
CAN_NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800100  00002a7a  00002b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d1  008002a4  008002a4  00002cb2  2**0
                  ALLOC
  3 .stab         00001398  00000000  00000000  00002cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000405  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000328  00000000  00000000  00004458  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004126  00000000  00000000  00004780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c0f  00000000  00000000  000088a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001956  00000000  00000000  0000a4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007fc  00000000  00000000  0000be0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009cc  00000000  00000000  0000c608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002419  00000000  00000000  0000cfd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000f3ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	12 e0       	ldi	r17, 0x02	; 2
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea e7       	ldi	r30, 0x7A	; 122
      a8:	fa e2       	ldi	r31, 0x2A	; 42
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a4 3a       	cpi	r26, 0xA4	; 164
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	a4 ea       	ldi	r26, 0xA4	; 164
      be:	b2 e0       	ldi	r27, 0x02	; 2
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a5 37       	cpi	r26, 0x75	; 117
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 ff 10 	call	0x21fe	; 0x21fe <main>
      ce:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <can_init>:
//***************************************************************
void can_init (char baudRate)	// CAN초기화 
{
	unsigned char i, j;
	
	CANGCON |= (1<<SWRES);	// CAN 제어기 리셋
      d6:	90 91 d8 00 	lds	r25, 0x00D8
      da:	91 60       	ori	r25, 0x01	; 1
      dc:	90 93 d8 00 	sts	0x00D8, r25
							// CAN General Control Register
  							
	//보레이트 설정 ==============================================
	switch(baudRate){
      e0:	83 30       	cpi	r24, 0x03	; 3
      e2:	89 f0       	breq	.+34     	; 0x106 <can_init+0x30>
      e4:	84 30       	cpi	r24, 0x04	; 4
      e6:	28 f4       	brcc	.+10     	; 0xf2 <can_init+0x1c>
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	51 f0       	breq	.+20     	; 0x100 <can_init+0x2a>
      ec:	82 30       	cpi	r24, 0x02	; 2
      ee:	d1 f4       	brne	.+52     	; 0x124 <can_init+0x4e>
      f0:	11 c0       	rjmp	.+34     	; 0x114 <can_init+0x3e>
      f2:	85 30       	cpi	r24, 0x05	; 5
      f4:	61 f0       	breq	.+24     	; 0x10e <can_init+0x38>
      f6:	85 30       	cpi	r24, 0x05	; 5
      f8:	40 f0       	brcs	.+16     	; 0x10a <can_init+0x34>
      fa:	86 30       	cpi	r24, 0x06	; 6
      fc:	99 f4       	brne	.+38     	; 0x124 <can_init+0x4e>
      fe:	09 c0       	rjmp	.+18     	; 0x112 <can_init+0x3c>
		case b1M:
			CANBT1= 0x00;
     100:	10 92 e2 00 	sts	0x00E2, r1
     104:	09 c0       	rjmp	.+18     	; 0x118 <can_init+0x42>
			CANBT1= 0x02;
			CANBT2= 0x0c;
			CANBT3= 0x37;			
			break;
		case b250k:
			CANBT1= 0x06;	// CAN보레이트 설정 
     106:	86 e0       	ldi	r24, 0x06	; 6
     108:	05 c0       	rjmp	.+10     	; 0x114 <can_init+0x3e>
			CANBT2= 0x0c;	// bit timing: datasheet 264 (check table)
			CANBT3= 0x37;	// 250kbps, 16 MHz CPU Clock(0.250usec)
			break;
		case b200k:
			CANBT1= 0x08;
     10a:	88 e0       	ldi	r24, 0x08	; 8
     10c:	03 c0       	rjmp	.+6      	; 0x114 <can_init+0x3e>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;
		case b125k:
			CANBT1= 0x0E;
     10e:	8e e0       	ldi	r24, 0x0E	; 14
     110:	01 c0       	rjmp	.+2      	; 0x114 <can_init+0x3e>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;

		case b100k:
			CANBT1= 0x12;
     112:	82 e1       	ldi	r24, 0x12	; 18
     114:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0c;
     118:	8c e0       	ldi	r24, 0x0C	; 12
     11a:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x37;													
     11e:	87 e3       	ldi	r24, 0x37	; 55
     120:	80 93 e4 00 	sts	0x00E4, r24
// 6. CAN MOb 인터럽트 클리어(CAN MOb 인터럽트 사용하지 않음)
// 7. CAN 제어기 인에이블 모드 설정 
// 8. CAN 제어기 동작 확인 후 초기화 완료  									
//***************************************************************
void can_init (char baudRate)	// CAN초기화 
{
     124:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
	{
		CANPAGE = (i<<4);	// MOBNB3~0
     126:	98 2f       	mov	r25, r24
     128:	92 95       	swap	r25
     12a:	90 7f       	andi	r25, 0xF0	; 240
     12c:	90 93 ed 00 	sts	0x00ED, r25
							// MOb Number Select(0~14)
		CANCDMOB = 0;		// ALL Disable MOb
     130:	10 92 ef 00 	sts	0x00EF, r1
		CANSTMOB = 0;		// Clear status
     134:	10 92 ee 00 	sts	0x00EE, r1
		CANIDT1 = 0;		// Clear ID
     138:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;		// Clear ID
     13c:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;		// Clear ID
     140:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;		// Clear ID
     144:	10 92 f0 00 	sts	0x00F0, r1
		CANIDM1 = 0;		// Clear mask
     148:	10 92 f7 00 	sts	0x00F7, r1
		CANIDM2 = 0;		// Clear mask
     14c:	10 92 f6 00 	sts	0x00F6, r1
		CANIDM3 = 0;		// Clear mask
     150:	10 92 f5 00 	sts	0x00F5, r1
		CANIDM4 = 0;		// Clear mask
     154:	10 92 f4 00 	sts	0x00F4, r1

		for(j=0; j<8; j++)
			CANMSG = 0;		// CAN Data Message Register
     158:	10 92 fa 00 	sts	0x00FA, r1
     15c:	10 92 fa 00 	sts	0x00FA, r1
     160:	10 92 fa 00 	sts	0x00FA, r1
     164:	10 92 fa 00 	sts	0x00FA, r1
     168:	10 92 fa 00 	sts	0x00FA, r1
     16c:	10 92 fa 00 	sts	0x00FA, r1
     170:	10 92 fa 00 	sts	0x00FA, r1
     174:	10 92 fa 00 	sts	0x00FA, r1
			CANBT2= 0x0c;
			CANBT3= 0x37;													
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
     178:	8f 5f       	subi	r24, 0xFF	; 255
     17a:	8f 30       	cpi	r24, 0x0F	; 15
     17c:	a1 f6       	brne	.-88     	; 0x126 <can_init+0x50>
			CANMSG = 0;		// CAN Data Message Register
							// Clear data
	}
							
							// Clear CAN interrupt registers
	CANGIE = 0;				// CAN General Interrupt Enable Register 
     17e:	10 92 db 00 	sts	0x00DB, r1
							// None Interrupts
	CANIE1 = 0;				// CAN Enable INT MOb Registers 1
     182:	10 92 df 00 	sts	0x00DF, r1
							// None Interrupts on MObs
	CANIE2 = 0;				// CAN Enable INT MOb Registers 2
     186:	10 92 de 00 	sts	0x00DE, r1
							// None Interrupts on MObs
	CANSIT1 = 0;			// CAN Status INT MOb Registers 1
     18a:	10 92 e1 00 	sts	0x00E1, r1
							// None Interrupts on MObs
	CANSIT2 = 0;			// CAN Status INT MOb Registers 2
     18e:	10 92 e0 00 	sts	0x00E0, r1
							// None Interrupts on MObs

	//CANGCON = (1<<TTC );	// TTC mode *******************************************
	
	CANGCON |= (1<<ENASTB);	// CAN General Control Register 
     192:	80 91 d8 00 	lds	r24, 0x00D8
     196:	82 60       	ori	r24, 0x02	; 2
     198:	80 93 d8 00 	sts	0x00D8, r24
							// Enable Mode (11 Recessive Bits has Been read)
							// Start CAN interface

	while (!(CANGSTA & (1<<ENFG))); // CAN General Status Register (Enable Flag)
     19c:	80 91 d9 00 	lds	r24, 0x00D9
     1a0:	82 ff       	sbrs	r24, 2
     1a2:	fc cf       	rjmp	.-8      	; 0x19c <can_init+0xc6>
									// Wait until module ready
}
     1a4:	08 95       	ret

000001a6 <can_init_8Mhz>:
//***************************************************************
void can_init_8Mhz(char baudRate)	// CAN초기화 
{
	unsigned char i, j;
	
	CANGCON |= (1<<SWRES);	// CAN 제어기 리셋
     1a6:	90 91 d8 00 	lds	r25, 0x00D8
     1aa:	91 60       	ori	r25, 0x01	; 1
     1ac:	90 93 d8 00 	sts	0x00D8, r25
							// CAN General Control Register
  							
	//보레이트 설정 ==============================================
	switch(baudRate){
     1b0:	83 30       	cpi	r24, 0x03	; 3
     1b2:	c1 f0       	breq	.+48     	; 0x1e4 <can_init_8Mhz+0x3e>
     1b4:	84 30       	cpi	r24, 0x04	; 4
     1b6:	28 f4       	brcc	.+10     	; 0x1c2 <can_init_8Mhz+0x1c>
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	51 f0       	breq	.+20     	; 0x1d0 <can_init_8Mhz+0x2a>
     1bc:	82 30       	cpi	r24, 0x02	; 2
     1be:	39 f5       	brne	.+78     	; 0x20e <can_init_8Mhz+0x68>
     1c0:	0e c0       	rjmp	.+28     	; 0x1de <can_init_8Mhz+0x38>
     1c2:	85 30       	cpi	r24, 0x05	; 5
     1c4:	c9 f0       	breq	.+50     	; 0x1f8 <can_init_8Mhz+0x52>
     1c6:	85 30       	cpi	r24, 0x05	; 5
     1c8:	78 f0       	brcs	.+30     	; 0x1e8 <can_init_8Mhz+0x42>
     1ca:	86 30       	cpi	r24, 0x06	; 6
     1cc:	01 f5       	brne	.+64     	; 0x20e <can_init_8Mhz+0x68>
     1ce:	16 c0       	rjmp	.+44     	; 0x1fc <can_init_8Mhz+0x56>
		case b1M:
			CANBT1= 0x00;
     1d0:	10 92 e2 00 	sts	0x00E2, r1
			CANBT2= 0x04;
     1d4:	84 e0       	ldi	r24, 0x04	; 4
     1d6:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x13;
     1da:	83 e1       	ldi	r24, 0x13	; 19
     1dc:	16 c0       	rjmp	.+44     	; 0x20a <can_init_8Mhz+0x64>
			break;
		case b500k:
			CANBT1= 0x00;
     1de:	10 92 e2 00 	sts	0x00E2, r1
     1e2:	0f c0       	rjmp	.+30     	; 0x202 <can_init_8Mhz+0x5c>
			CANBT2= 0x0c;
			CANBT3= 0x37;			
			break;
		case b250k:
			CANBT1= 0x02;	// CAN baud rate set
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	0b c0       	rjmp	.+22     	; 0x1fe <can_init_8Mhz+0x58>
			CANBT2= 0x0c;	// bit timing: datasheet 264 (check table)
			CANBT3= 0x37;	// 250kbps 8 MHz CPU Clock(0.250usec)
			break;
		case b200k:
			CANBT1= 0x02;
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0e;
     1ee:	8e e0       	ldi	r24, 0x0E	; 14
     1f0:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x4b;
     1f4:	8b e4       	ldi	r24, 0x4B	; 75
     1f6:	09 c0       	rjmp	.+18     	; 0x20a <can_init_8Mhz+0x64>
			break;
		case b125k:
			CANBT1= 0x06;
     1f8:	86 e0       	ldi	r24, 0x06	; 6
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <can_init_8Mhz+0x58>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;
		case b100k:
			CANBT1= 0x08;
     1fc:	88 e0       	ldi	r24, 0x08	; 8
     1fe:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0c;
     202:	8c e0       	ldi	r24, 0x0C	; 12
     204:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x37;													
     208:	87 e3       	ldi	r24, 0x37	; 55
     20a:	80 93 e4 00 	sts	0x00E4, r24
// 6. CAN MOb 인터럽트 클리어(CAN MOb 인터럽트 사용하지 않음)
// 7. CAN 제어기 인에이블 모드 설정 
// 8. CAN 제어기 동작 확인 후 초기화 완료  									
//***************************************************************
void can_init_8Mhz(char baudRate)	// CAN초기화 
{
     20e:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
	{
		CANPAGE = (i<<4);	// MOBNB3~0
     210:	98 2f       	mov	r25, r24
     212:	92 95       	swap	r25
     214:	90 7f       	andi	r25, 0xF0	; 240
     216:	90 93 ed 00 	sts	0x00ED, r25
							// MOb Number Select(0~14)
		CANCDMOB = 0;		// ALL Disable MOb
     21a:	10 92 ef 00 	sts	0x00EF, r1
		CANSTMOB = 0;		// Clear status
     21e:	10 92 ee 00 	sts	0x00EE, r1
		CANIDT1 = 0;		// Clear ID
     222:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;		// Clear ID
     226:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;		// Clear ID
     22a:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;		// Clear ID
     22e:	10 92 f0 00 	sts	0x00F0, r1
		CANIDM1 = 0;		// Clear mask
     232:	10 92 f7 00 	sts	0x00F7, r1
		CANIDM2 = 0;		// Clear mask
     236:	10 92 f6 00 	sts	0x00F6, r1
		CANIDM3 = 0;		// Clear mask
     23a:	10 92 f5 00 	sts	0x00F5, r1
		CANIDM4 = 0;		// Clear mask
     23e:	10 92 f4 00 	sts	0x00F4, r1

		for(j=0; j<8; j++)
			CANMSG = 0;		// CAN Data Message Register
     242:	10 92 fa 00 	sts	0x00FA, r1
     246:	10 92 fa 00 	sts	0x00FA, r1
     24a:	10 92 fa 00 	sts	0x00FA, r1
     24e:	10 92 fa 00 	sts	0x00FA, r1
     252:	10 92 fa 00 	sts	0x00FA, r1
     256:	10 92 fa 00 	sts	0x00FA, r1
     25a:	10 92 fa 00 	sts	0x00FA, r1
     25e:	10 92 fa 00 	sts	0x00FA, r1
			CANBT2= 0x0c;
			CANBT3= 0x37;													
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	8f 30       	cpi	r24, 0x0F	; 15
     266:	a1 f6       	brne	.-88     	; 0x210 <can_init_8Mhz+0x6a>
			CANMSG = 0;		// CAN Data Message Register
							// Clear data
	}
							
							// Clear CAN interrupt registers
	CANGIE = 0;				// CAN General Interrupt Enable Register 
     268:	10 92 db 00 	sts	0x00DB, r1
							// None Interrupts
	CANIE1 = 0;				// CAN Enable INT MOb Registers 1
     26c:	10 92 df 00 	sts	0x00DF, r1
							// None Interrupts on MObs
	CANIE2 = 0;				// CAN Enable INT MOb Registers 2
     270:	10 92 de 00 	sts	0x00DE, r1
							// None Interrupts on MObs
	CANSIT1 = 0;			// CAN Status INT MOb Registers 1
     274:	10 92 e1 00 	sts	0x00E1, r1
							// None Interrupts on MObs
	CANSIT2 = 0;			// CAN Status INT MOb Registers 2
     278:	10 92 e0 00 	sts	0x00E0, r1
							// None Interrupts on MObs

	CANGCON = (1<<TTC );	// TTC mode *******************************************
     27c:	80 e2       	ldi	r24, 0x20	; 32
     27e:	80 93 d8 00 	sts	0x00D8, r24
	
	CANGCON |= (1<<ENASTB);	// CAN General Control Register 
     282:	80 91 d8 00 	lds	r24, 0x00D8
     286:	82 60       	ori	r24, 0x02	; 2
     288:	80 93 d8 00 	sts	0x00D8, r24
							// Enable Mode (11 Recessive Bits has Been read)
							// Start CAN interface

	while (!(CANGSTA & (1<<ENFG))); // CAN General Status Register (Enable Flag)
     28c:	80 91 d9 00 	lds	r24, 0x00D9
     290:	82 ff       	sbrs	r24, 2
     292:	fc cf       	rjmp	.-8      	; 0x28c <can_init_8Mhz+0xe6>
									// Wait until module ready
}
     294:	08 95       	ret

00000296 <can_tx>:
//		obj; MOb 번호 
//		msg; 메시지 구조체 
//		rtr; RTR r결정(0; 데이터 프레임, 1; 리모트 프레임)	
//***************************************************************
char can_tx (unsigned char obj, struct MOb *msg, char rtr)	// CAN transmission
{
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	fb 01       	movw	r30, r22
	//usart1_transmit_string("\rCAn loop in\n");

	char send_result = _SEND_FAIL;
	unsigned char i;	
	unsigned long can_id= msg->id;
     29c:	00 81       	ld	r16, Z
     29e:	11 81       	ldd	r17, Z+1	; 0x01
     2a0:	22 81       	ldd	r18, Z+2	; 0x02
     2a2:	33 81       	ldd	r19, Z+3	; 0x03
	
								// Enable MOb1, auto increment index, start with index = 0
	CANPAGE = (obj<<4);			// CAN Page MOb Register
     2a4:	82 95       	swap	r24
     2a6:	80 7f       	andi	r24, 0xF0	; 240
     2a8:	80 93 ed 00 	sts	0x00ED, r24
								// MOb Number Select

	//usart1_transmit_string("\rPAGE Clear\n");

	CANSTMOB = 0x00;
     2ac:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;
     2b0:	10 92 ef 00 	sts	0x00EF, r1
	
	//usart1_transmit_string("\rMOb Clear\n");

	if(msg->ide== 0x00)	// standard
     2b4:	85 81       	ldd	r24, Z+5	; 0x05
     2b6:	88 23       	and	r24, r24
     2b8:	a1 f4       	brne	.+40     	; 0x2e2 <can_tx+0x4c>
	{
		CANIDT1= (unsigned char)(can_id>>3);
     2ba:	d9 01       	movw	r26, r18
     2bc:	c8 01       	movw	r24, r16
     2be:	53 e0       	ldi	r21, 0x03	; 3
     2c0:	b6 95       	lsr	r27
     2c2:	a7 95       	ror	r26
     2c4:	97 95       	ror	r25
     2c6:	87 95       	ror	r24
     2c8:	5a 95       	dec	r21
     2ca:	d1 f7       	brne	.-12     	; 0x2c0 <can_tx+0x2a>
     2cc:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(can_id<<5);
     2d0:	02 95       	swap	r16
     2d2:	00 0f       	add	r16, r16
     2d4:	00 7e       	andi	r16, 0xE0	; 224
     2d6:	00 93 f2 00 	sts	0x00F2, r16

		CANCDMOB &= ~0x10;		// Set IDE bit 2.0A 11bits
     2da:	80 91 ef 00 	lds	r24, 0x00EF
     2de:	8f 7e       	andi	r24, 0xEF	; 239
     2e0:	29 c0       	rjmp	.+82     	; 0x334 <can_tx+0x9e>
		//usart1_transmit_string("\rstandard\n");
	}
	else	// extended
	{
		CANIDT1= (unsigned char)(can_id>>21);
     2e2:	d9 01       	movw	r26, r18
     2e4:	c8 01       	movw	r24, r16
     2e6:	55 e1       	ldi	r21, 0x15	; 21
     2e8:	b6 95       	lsr	r27
     2ea:	a7 95       	ror	r26
     2ec:	97 95       	ror	r25
     2ee:	87 95       	ror	r24
     2f0:	5a 95       	dec	r21
     2f2:	d1 f7       	brne	.-12     	; 0x2e8 <can_tx+0x52>
     2f4:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(can_id>>13);
     2f8:	d9 01       	movw	r26, r18
     2fa:	c8 01       	movw	r24, r16
     2fc:	6d e0       	ldi	r22, 0x0D	; 13
     2fe:	b6 95       	lsr	r27
     300:	a7 95       	ror	r26
     302:	97 95       	ror	r25
     304:	87 95       	ror	r24
     306:	6a 95       	dec	r22
     308:	d1 f7       	brne	.-12     	; 0x2fe <can_tx+0x68>
     30a:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(can_id>>5);
     30e:	d9 01       	movw	r26, r18
     310:	c8 01       	movw	r24, r16
     312:	75 e0       	ldi	r23, 0x05	; 5
     314:	b6 95       	lsr	r27
     316:	a7 95       	ror	r26
     318:	97 95       	ror	r25
     31a:	87 95       	ror	r24
     31c:	7a 95       	dec	r23
     31e:	d1 f7       	brne	.-12     	; 0x314 <can_tx+0x7e>
     320:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(can_id<<3);
     324:	00 0f       	add	r16, r16
     326:	00 0f       	add	r16, r16
     328:	00 0f       	add	r16, r16
     32a:	00 93 f0 00 	sts	0x00F0, r16

		CANCDMOB |= 0x10;		// Set IDE bit 2.0B 29bits
     32e:	80 91 ef 00 	lds	r24, 0x00EF
     332:	80 61       	ori	r24, 0x10	; 16
     334:	80 93 ef 00 	sts	0x00EF, r24
	//	usart1_transmit_string("\rExtended\n");
	}

	CANCDMOB |= (msg->dlc<<DLC0);	// set data length
     338:	80 91 ef 00 	lds	r24, 0x00EF
     33c:	96 81       	ldd	r25, Z+6	; 0x06
     33e:	89 2b       	or	r24, r25
     340:	80 93 ef 00 	sts	0x00EF, r24

	//usart1_transmit_string("\rDLC Clear\n");	

	CANIDT4 |= (rtr & 0x04);     // RTRTAG 설정;
     344:	80 91 f0 00 	lds	r24, 0x00F0
     348:	44 70       	andi	r20, 0x04	; 4
     34a:	48 2b       	or	r20, r24
     34c:	40 93 f0 00 	sts	0x00F0, r20

	CANIDT4 &= ~0x02;		   // RB1TAG=0;
     350:	80 91 f0 00 	lds	r24, 0x00F0
     354:	8d 7f       	andi	r24, 0xFD	; 253
     356:	80 93 f0 00 	sts	0x00F0, r24
	CANIDT4 &= ~0x01;		   // RB0TAG=1;
     35a:	80 91 f0 00 	lds	r24, 0x00F0
     35e:	8e 7f       	andi	r24, 0xFE	; 254
     360:	80 93 f0 00 	sts	0x00F0, r24

	//usart1_transmit_string("\rRTR Clear\n");	

	//put data in mailbox
	for(i=0; i<msg->dlc; i++)
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	09 c0       	rjmp	.+18     	; 0x37a <can_tx+0xe4>
		CANMSG = msg->data[i];	// full message 
     368:	df 01       	movw	r26, r30
     36a:	a8 0f       	add	r26, r24
     36c:	b1 1d       	adc	r27, r1
     36e:	17 96       	adiw	r26, 0x07	; 7
     370:	9c 91       	ld	r25, X
     372:	17 97       	sbiw	r26, 0x07	; 7
     374:	90 93 fa 00 	sts	0x00FA, r25
	CANIDT4 &= ~0x01;		   // RB0TAG=1;

	//usart1_transmit_string("\rRTR Clear\n");	

	//put data in mailbox
	for(i=0; i<msg->dlc; i++)
     378:	8f 5f       	subi	r24, 0xFF	; 255
     37a:	96 81       	ldd	r25, Z+6	; 0x06
     37c:	89 17       	cp	r24, r25
     37e:	a0 f3       	brcs	.-24     	; 0x368 <can_tx+0xd2>
		CANMSG = msg->data[i];	// full message 

	//usart1_transmit_string("\rMSG Clear\n");	

	//enable transmission		
	CANCDMOB |= (1<<CONMOB0);
     380:	80 91 ef 00 	lds	r24, 0x00EF
     384:	80 64       	ori	r24, 0x40	; 64
     386:	80 93 ef 00 	sts	0x00EF, r24

	//usart1_transmit_string("\renable transmissionr\n");	

	while (!(CANSTMOB & (1<<TXOK)));	// check tx ok
     38a:	80 91 ee 00 	lds	r24, 0x00EE
     38e:	86 ff       	sbrs	r24, 6
     390:	fc cf       	rjmp	.-8      	; 0x38a <can_tx+0xf4>

	// monitoring with serial com
	//usart1_transmit_string("\rTXOK\n");

	//reset flag
	CANSTMOB &= ~(1<<TXOK);
     392:	80 91 ee 00 	lds	r24, 0x00EE
     396:	8f 7b       	andi	r24, 0xBF	; 191
     398:	80 93 ee 00 	sts	0x00EE, r24

	return(send_result);
}
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	08 95       	ret

000003a4 <can_rx>:
// 5. IDE 수신 처리 
// 6. DLC 수신 처리 
// 7. Data 수신 처리 
//***************************************************************
char can_rx(unsigned char obj, struct MOb *msg)		
{
     3a4:	cf 92       	push	r12
     3a6:	df 92       	push	r13
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	fb 01       	movw	r30, r22
	char rece_result = _RECE_FAIL;
	unsigned char i;	
	unsigned long can_id= 0;
	
	CANPAGE = (obj<<4);				// 수신 MOb 선택 
     3b2:	82 95       	swap	r24
     3b4:	80 7f       	andi	r24, 0xF0	; 240
     3b6:	80 93 ed 00 	sts	0x00ED, r24
	//usart1_transmit_string("\rRX MOb #");
	//usart1_transmit(obj+0x30);
	//usart1_transmit_string("\r\n");

	// 수신 완료될 때까지 대기함 
	while(!(CANSTMOB&(1<<RXOK)));
     3ba:	80 91 ee 00 	lds	r24, 0x00EE
     3be:	85 ff       	sbrs	r24, 5
     3c0:	fc cf       	rjmp	.-8      	; 0x3ba <can_rx+0x16>
	// get CANIDT and CANCDMOB and CANMSg
	//usart1_transmit_string("\rRXOK\n");
	rece_result = _RECE_OK;

	// 표준 혹은 확장 포맷에 맞추어 ID, IDE 결정 
	if((CANCDMOB & 0x10) == 0x00){			// IDE standard ?
     3c2:	80 91 ef 00 	lds	r24, 0x00EF
     3c6:	84 fd       	sbrc	r24, 4
     3c8:	1b c0       	rjmp	.+54     	; 0x400 <can_rx+0x5c>
		msg->ide= STD;
     3ca:	15 82       	std	Z+5, r1	; 0x05
		can_id  = ((unsigned long)CANIDT1)<<8;
     3cc:	80 91 f3 00 	lds	r24, 0x00F3
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	a0 e0       	ldi	r26, 0x00	; 0
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	ba 2f       	mov	r27, r26
     3d8:	a9 2f       	mov	r26, r25
     3da:	98 2f       	mov	r25, r24
     3dc:	88 27       	eor	r24, r24
		can_id |= ((unsigned long)CANIDT2);
     3de:	40 91 f2 00 	lds	r20, 0x00F2
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	84 2b       	or	r24, r20
     3ea:	95 2b       	or	r25, r21
     3ec:	a6 2b       	or	r26, r22
     3ee:	b7 2b       	or	r27, r23
		can_id>>=5;
     3f0:	35 e0       	ldi	r19, 0x05	; 5
     3f2:	b6 95       	lsr	r27
     3f4:	a7 95       	ror	r26
     3f6:	97 95       	ror	r25
     3f8:	87 95       	ror	r24
     3fa:	3a 95       	dec	r19
     3fc:	d1 f7       	brne	.-12     	; 0x3f2 <can_rx+0x4e>
     3fe:	35 c0       	rjmp	.+106    	; 0x46a <can_rx+0xc6>
		//usart1_transmit_string("\rRx Standard\n");
	}
	else{
		msg->ide= EXT;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	85 83       	std	Z+5, r24	; 0x05
		can_id  = ((unsigned long)CANIDT1)<<24;
     404:	80 91 f3 00 	lds	r24, 0x00F3
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	a0 e0       	ldi	r26, 0x00	; 0
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	b8 2f       	mov	r27, r24
     410:	aa 27       	eor	r26, r26
     412:	99 27       	eor	r25, r25
     414:	88 27       	eor	r24, r24
		can_id |= ((unsigned long)CANIDT2)<<16;
     416:	c0 90 f2 00 	lds	r12, 0x00F2
		can_id |= ((unsigned long)CANIDT3)<<8;
     41a:	40 91 f1 00 	lds	r20, 0x00F1
		can_id |= ((unsigned long)CANIDT4);
     41e:	00 91 f0 00 	lds	r16, 0x00F0
		//usart1_transmit_string("\rRx Standard\n");
	}
	else{
		msg->ide= EXT;
		can_id  = ((unsigned long)CANIDT1)<<24;
		can_id |= ((unsigned long)CANIDT2)<<16;
     422:	dd 24       	eor	r13, r13
     424:	ee 24       	eor	r14, r14
     426:	ff 24       	eor	r15, r15
     428:	76 01       	movw	r14, r12
     42a:	dd 24       	eor	r13, r13
     42c:	cc 24       	eor	r12, r12
     42e:	8c 29       	or	r24, r12
     430:	9d 29       	or	r25, r13
     432:	ae 29       	or	r26, r14
     434:	bf 29       	or	r27, r15
		can_id |= ((unsigned long)CANIDT3)<<8;
		can_id |= ((unsigned long)CANIDT4);
     436:	10 e0       	ldi	r17, 0x00	; 0
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
	}
	else{
		msg->ide= EXT;
		can_id  = ((unsigned long)CANIDT1)<<24;
		can_id |= ((unsigned long)CANIDT2)<<16;
		can_id |= ((unsigned long)CANIDT3)<<8;
     43c:	80 2b       	or	r24, r16
     43e:	91 2b       	or	r25, r17
     440:	a2 2b       	or	r26, r18
     442:	b3 2b       	or	r27, r19
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	76 2f       	mov	r23, r22
     44c:	65 2f       	mov	r22, r21
     44e:	54 2f       	mov	r21, r20
     450:	44 27       	eor	r20, r20
		can_id |= ((unsigned long)CANIDT4);
     452:	84 2b       	or	r24, r20
     454:	95 2b       	or	r25, r21
     456:	a6 2b       	or	r26, r22
     458:	b7 2b       	or	r27, r23
		can_id>>=3;
     45a:	68 94       	set
     45c:	12 f8       	bld	r1, 2
     45e:	b6 95       	lsr	r27
     460:	a7 95       	ror	r26
     462:	97 95       	ror	r25
     464:	87 95       	ror	r24
     466:	16 94       	lsr	r1
     468:	d1 f7       	brne	.-12     	; 0x45e <can_rx+0xba>
		//usart1_transmit_string("\rRx Extended\n");
	}
	msg->id= can_id;			// 구조체 변수로 CANID 대입 
     46a:	80 83       	st	Z, r24
     46c:	91 83       	std	Z+1, r25	; 0x01
     46e:	a2 83       	std	Z+2, r26	; 0x02
     470:	b3 83       	std	Z+3, r27	; 0x03

	msg->rtr= CANIDT4 & 0x04;   
     472:	80 91 f0 00 	lds	r24, 0x00F0
     476:	84 70       	andi	r24, 0x04	; 4
     478:	84 83       	std	Z+4, r24	; 0x04

	msg->dlc= CANCDMOB & 0x0f;	// 수신 메시지 길이 구조체 변수에 대입 
     47a:	80 91 ef 00 	lds	r24, 0x00EF
     47e:	8f 70       	andi	r24, 0x0F	; 15
     480:	86 83       	std	Z+6, r24	; 0x06

	// get data
	for(i=0; i<(CANCDMOB&0xf); i++){
     482:	40 e0       	ldi	r20, 0x00	; 0
     484:	09 c0       	rjmp	.+18     	; 0x498 <can_rx+0xf4>
		msg->data[i] = CANMSG;	// 메시지 데이터 배열에 저장 
     486:	80 91 fa 00 	lds	r24, 0x00FA
     48a:	2e 0f       	add	r18, r30
     48c:	3f 1f       	adc	r19, r31
     48e:	d9 01       	movw	r26, r18
     490:	17 96       	adiw	r26, 0x07	; 7
     492:	8c 93       	st	X, r24
     494:	17 97       	sbiw	r26, 0x07	; 7
	msg->rtr= CANIDT4 & 0x04;   

	msg->dlc= CANCDMOB & 0x0f;	// 수신 메시지 길이 구조체 변수에 대입 

	// get data
	for(i=0; i<(CANCDMOB&0xf); i++){
     496:	4f 5f       	subi	r20, 0xFF	; 255
     498:	24 2f       	mov	r18, r20
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	80 91 ef 00 	lds	r24, 0x00EF
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	8f 70       	andi	r24, 0x0F	; 15
     4a4:	90 70       	andi	r25, 0x00	; 0
     4a6:	28 17       	cp	r18, r24
     4a8:	39 07       	cpc	r19, r25
     4aa:	6c f3       	brlt	.-38     	; 0x486 <can_rx+0xe2>
		msg->data[i] = CANMSG;	// 메시지 데이터 배열에 저장 
	}

	// rx init 
	CANSTMOB = 0x00;			// 상태 초기 화 
     4ac:	10 92 ee 00 	sts	0x00EE, r1

	// enable reception mode and ide set
	CANCDMOB |= (1<<CONMOB1); 	// 수신 IDE 유지하고 수신 모드 설정
     4b0:	80 91 ef 00 	lds	r24, 0x00EF
     4b4:	80 68       	ori	r24, 0x80	; 128
     4b6:	80 93 ef 00 	sts	0x00EF, r24

	// reset flag
	CANSTMOB &= ~(1<<RXOK);		// 수신대기 
     4ba:	80 91 ee 00 	lds	r24, 0x00EE
     4be:	8f 7d       	andi	r24, 0xDF	; 223
     4c0:	80 93 ee 00 	sts	0x00EE, r24

	return(rece_result);
}
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	08 95       	ret

000004d4 <can_rx_set>:
//		idmask; CAN ID 수신 마스크 
//		rtrIdemask; RTR 비트와 IDE 마스크 			
//****************************************************************/
void can_rx_set(char obj, unsigned long id, char ide, unsigned char dlc, 
				unsigned long idmask, unsigned char rtrIdemask)
{
     4d4:	af 92       	push	r10
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
	CANPAGE = obj<<4;		// set MOb number
     4e0:	82 95       	swap	r24
     4e2:	80 7f       	andi	r24, 0xF0	; 240
     4e4:	80 93 ed 00 	sts	0x00ED, r24

	CANSTMOB = 0x00;		// clear status
     4e8:	10 92 ee 00 	sts	0x00EE, r1

	if(ide== STD)			// standard
	{
		CANIDT1= (unsigned char)(id>>3);
     4ec:	db 01       	movw	r26, r22
     4ee:	ca 01       	movw	r24, r20
{
	CANPAGE = obj<<4;		// set MOb number

	CANSTMOB = 0x00;		// clear status

	if(ide== STD)			// standard
     4f0:	22 23       	and	r18, r18
     4f2:	29 f5       	brne	.+74     	; 0x53e <can_rx_set+0x6a>
	{
		CANIDT1= (unsigned char)(id>>3);
     4f4:	f3 e0       	ldi	r31, 0x03	; 3
     4f6:	b6 95       	lsr	r27
     4f8:	a7 95       	ror	r26
     4fa:	97 95       	ror	r25
     4fc:	87 95       	ror	r24
     4fe:	fa 95       	dec	r31
     500:	d1 f7       	brne	.-12     	; 0x4f6 <can_rx_set+0x22>
     502:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id<<5);
     506:	42 95       	swap	r20
     508:	44 0f       	add	r20, r20
     50a:	40 7e       	andi	r20, 0xE0	; 224
     50c:	40 93 f2 00 	sts	0x00F2, r20

		CANIDM1= (unsigned char)(idmask>>3);
     510:	d7 01       	movw	r26, r14
     512:	c6 01       	movw	r24, r12
     514:	23 e0       	ldi	r18, 0x03	; 3
     516:	b6 95       	lsr	r27
     518:	a7 95       	ror	r26
     51a:	97 95       	ror	r25
     51c:	87 95       	ror	r24
     51e:	2a 95       	dec	r18
     520:	d1 f7       	brne	.-12     	; 0x516 <can_rx_set+0x42>
     522:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask<<5);
     526:	c2 94       	swap	r12
     528:	cc 0c       	add	r12, r12
     52a:	30 ee       	ldi	r19, 0xE0	; 224
     52c:	c3 22       	and	r12, r19
     52e:	c0 92 f6 00 	sts	0x00F6, r12
		CANIDM4=0;
     532:	10 92 f4 00 	sts	0x00F4, r1

		CANCDMOB &= ~0x10;	// clear IDE =0, standard 11 bits
     536:	80 91 ef 00 	lds	r24, 0x00EF
     53a:	8f 7e       	andi	r24, 0xEF	; 239
     53c:	4d c0       	rjmp	.+154    	; 0x5d8 <can_rx_set+0x104>

		//usart1_transmit_string("\rRx Standard Set\n");
	}
	else					// extended
	{
		CANIDT1= (unsigned char)(id>>21);
     53e:	e5 e1       	ldi	r30, 0x15	; 21
     540:	b6 95       	lsr	r27
     542:	a7 95       	ror	r26
     544:	97 95       	ror	r25
     546:	87 95       	ror	r24
     548:	ea 95       	dec	r30
     54a:	d1 f7       	brne	.-12     	; 0x540 <can_rx_set+0x6c>
     54c:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id>>13);
     550:	db 01       	movw	r26, r22
     552:	ca 01       	movw	r24, r20
     554:	fd e0       	ldi	r31, 0x0D	; 13
     556:	b6 95       	lsr	r27
     558:	a7 95       	ror	r26
     55a:	97 95       	ror	r25
     55c:	87 95       	ror	r24
     55e:	fa 95       	dec	r31
     560:	d1 f7       	brne	.-12     	; 0x556 <can_rx_set+0x82>
     562:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(id>>5);
     566:	db 01       	movw	r26, r22
     568:	ca 01       	movw	r24, r20
     56a:	25 e0       	ldi	r18, 0x05	; 5
     56c:	b6 95       	lsr	r27
     56e:	a7 95       	ror	r26
     570:	97 95       	ror	r25
     572:	87 95       	ror	r24
     574:	2a 95       	dec	r18
     576:	d1 f7       	brne	.-12     	; 0x56c <can_rx_set+0x98>
     578:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(id<<3);
     57c:	44 0f       	add	r20, r20
     57e:	44 0f       	add	r20, r20
     580:	44 0f       	add	r20, r20
     582:	40 93 f0 00 	sts	0x00F0, r20

		CANIDM1= (unsigned char)(idmask>>21);
     586:	d7 01       	movw	r26, r14
     588:	c6 01       	movw	r24, r12
     58a:	35 e1       	ldi	r19, 0x15	; 21
     58c:	b6 95       	lsr	r27
     58e:	a7 95       	ror	r26
     590:	97 95       	ror	r25
     592:	87 95       	ror	r24
     594:	3a 95       	dec	r19
     596:	d1 f7       	brne	.-12     	; 0x58c <can_rx_set+0xb8>
     598:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask>>13);
     59c:	d7 01       	movw	r26, r14
     59e:	c6 01       	movw	r24, r12
     5a0:	4d e0       	ldi	r20, 0x0D	; 13
     5a2:	b6 95       	lsr	r27
     5a4:	a7 95       	ror	r26
     5a6:	97 95       	ror	r25
     5a8:	87 95       	ror	r24
     5aa:	4a 95       	dec	r20
     5ac:	d1 f7       	brne	.-12     	; 0x5a2 <can_rx_set+0xce>
     5ae:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM3= (unsigned char)(idmask>>5);
     5b2:	d7 01       	movw	r26, r14
     5b4:	c6 01       	movw	r24, r12
     5b6:	e5 e0       	ldi	r30, 0x05	; 5
     5b8:	b6 95       	lsr	r27
     5ba:	a7 95       	ror	r26
     5bc:	97 95       	ror	r25
     5be:	87 95       	ror	r24
     5c0:	ea 95       	dec	r30
     5c2:	d1 f7       	brne	.-12     	; 0x5b8 <can_rx_set+0xe4>
     5c4:	80 93 f5 00 	sts	0x00F5, r24
		CANIDM4= (unsigned char)(idmask<<3);
     5c8:	cc 0c       	add	r12, r12
     5ca:	cc 0c       	add	r12, r12
     5cc:	cc 0c       	add	r12, r12
     5ce:	c0 92 f4 00 	sts	0x00F4, r12

		CANCDMOB |= 0x10;	// set IDE =1, extended 29 bits
     5d2:	80 91 ef 00 	lds	r24, 0x00EF
     5d6:	80 61       	ori	r24, 0x10	; 16
     5d8:	80 93 ef 00 	sts	0x00EF, r24

		//usart1_transmit_string("\rRx Extended Set\n");
	}
	CANCDMOB |= (dlc & 0x0f);		// set data length
     5dc:	80 91 ef 00 	lds	r24, 0x00EF
     5e0:	0f 70       	andi	r16, 0x0F	; 15
     5e2:	08 2b       	or	r16, r24
     5e4:	00 93 ef 00 	sts	0x00EF, r16

	CANIDM4 |= (unsigned char)(rtrIdemask & 0x07);
     5e8:	90 91 f4 00 	lds	r25, 0x00F4
     5ec:	8a 2d       	mov	r24, r10
     5ee:	87 70       	andi	r24, 0x07	; 7
     5f0:	89 2b       	or	r24, r25
     5f2:	80 93 f4 00 	sts	0x00F4, r24
//	CANIDM4 &= ~0x04;		// RTRMSK= 1/0 enable comparison (Data receive)
//	CANIDM4 &= ~0x02;		// recommended
	CANIDM4 &= ~0x01;		// IDEMSK= 1/0 enable comparison (IDE receive)
     5f6:	80 91 f4 00 	lds	r24, 0x00F4
     5fa:	8e 7f       	andi	r24, 0xFE	; 254
     5fc:	80 93 f4 00 	sts	0x00F4, r24

	CANCDMOB |= 0x80;		// receive enable 
     600:	80 91 ef 00 	lds	r24, 0x00EF
     604:	80 68       	ori	r24, 0x80	; 128
     606:	80 93 ef 00 	sts	0x00EF, r24
}
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	af 90       	pop	r10
     616:	08 95       	ret

00000618 <can_int_rx_set>:
//  7. 수신 모드 설정 
//****************************************************************/
void can_int_rx_set(char obj, unsigned long id, char rplvIde, 
					unsigned char dlc, unsigned long idmask, 
					unsigned char rtrIdemask)
{
     618:	af 92       	push	r10
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	38 2f       	mov	r19, r24
	CANPAGE = obj<<4;		// set MOb number
     626:	82 95       	swap	r24
     628:	80 7f       	andi	r24, 0xF0	; 240
     62a:	80 93 ed 00 	sts	0x00ED, r24

	CANSTMOB = 0x00;		// clear status
     62e:	10 92 ee 00 	sts	0x00EE, r1

	if(rplvIde & 0x02)	
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
     632:	80 91 ef 00 	lds	r24, 0x00EF
{
	CANPAGE = obj<<4;		// set MOb number

	CANSTMOB = 0x00;		// clear status

	if(rplvIde & 0x02)	
     636:	21 ff       	sbrs	r18, 1
     638:	02 c0       	rjmp	.+4      	; 0x63e <can_int_rx_set+0x26>
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
     63a:	80 62       	ori	r24, 0x20	; 32
     63c:	01 c0       	rjmp	.+2      	; 0x640 <can_int_rx_set+0x28>
	else
		CANCDMOB &= ~0x20;			// RPLV clear
     63e:	8f 7d       	andi	r24, 0xDF	; 223
     640:	80 93 ef 00 	sts	0x00EF, r24

	if(( rplvIde & 0x01) == STD)			// standard
	{
		CANIDT1= (unsigned char)(id>>3);
     644:	db 01       	movw	r26, r22
     646:	ca 01       	movw	r24, r20
	if(rplvIde & 0x02)	
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
	else
		CANCDMOB &= ~0x20;			// RPLV clear

	if(( rplvIde & 0x01) == STD)			// standard
     648:	20 fd       	sbrc	r18, 0
     64a:	25 c0       	rjmp	.+74     	; 0x696 <can_int_rx_set+0x7e>
	{
		CANIDT1= (unsigned char)(id>>3);
     64c:	23 e0       	ldi	r18, 0x03	; 3
     64e:	b6 95       	lsr	r27
     650:	a7 95       	ror	r26
     652:	97 95       	ror	r25
     654:	87 95       	ror	r24
     656:	2a 95       	dec	r18
     658:	d1 f7       	brne	.-12     	; 0x64e <can_int_rx_set+0x36>
     65a:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id<<5);
     65e:	42 95       	swap	r20
     660:	44 0f       	add	r20, r20
     662:	40 7e       	andi	r20, 0xE0	; 224
     664:	40 93 f2 00 	sts	0x00F2, r20

		CANIDM1= (unsigned char)(idmask>>3);
     668:	d7 01       	movw	r26, r14
     66a:	c6 01       	movw	r24, r12
     66c:	43 e0       	ldi	r20, 0x03	; 3
     66e:	b6 95       	lsr	r27
     670:	a7 95       	ror	r26
     672:	97 95       	ror	r25
     674:	87 95       	ror	r24
     676:	4a 95       	dec	r20
     678:	d1 f7       	brne	.-12     	; 0x66e <can_int_rx_set+0x56>
     67a:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask<<5);
     67e:	c2 94       	swap	r12
     680:	cc 0c       	add	r12, r12
     682:	50 ee       	ldi	r21, 0xE0	; 224
     684:	c5 22       	and	r12, r21
     686:	c0 92 f6 00 	sts	0x00F6, r12
		CANIDM4=0;
     68a:	10 92 f4 00 	sts	0x00F4, r1

		CANCDMOB &= ~0x10;	// clear IDE =0, standard 11 bits
     68e:	80 91 ef 00 	lds	r24, 0x00EF
     692:	8f 7e       	andi	r24, 0xEF	; 239
     694:	4d c0       	rjmp	.+154    	; 0x730 <can_int_rx_set+0x118>

		//usart1_transmit_string("\rRx Standard Set\n");
	}
	else					// extended
	{
		CANIDT1= (unsigned char)(id>>21);
     696:	e5 e1       	ldi	r30, 0x15	; 21
     698:	b6 95       	lsr	r27
     69a:	a7 95       	ror	r26
     69c:	97 95       	ror	r25
     69e:	87 95       	ror	r24
     6a0:	ea 95       	dec	r30
     6a2:	d1 f7       	brne	.-12     	; 0x698 <can_int_rx_set+0x80>
     6a4:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id>>13);
     6a8:	db 01       	movw	r26, r22
     6aa:	ca 01       	movw	r24, r20
     6ac:	fd e0       	ldi	r31, 0x0D	; 13
     6ae:	b6 95       	lsr	r27
     6b0:	a7 95       	ror	r26
     6b2:	97 95       	ror	r25
     6b4:	87 95       	ror	r24
     6b6:	fa 95       	dec	r31
     6b8:	d1 f7       	brne	.-12     	; 0x6ae <can_int_rx_set+0x96>
     6ba:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(id>>5);
     6be:	db 01       	movw	r26, r22
     6c0:	ca 01       	movw	r24, r20
     6c2:	25 e0       	ldi	r18, 0x05	; 5
     6c4:	b6 95       	lsr	r27
     6c6:	a7 95       	ror	r26
     6c8:	97 95       	ror	r25
     6ca:	87 95       	ror	r24
     6cc:	2a 95       	dec	r18
     6ce:	d1 f7       	brne	.-12     	; 0x6c4 <can_int_rx_set+0xac>
     6d0:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(id<<3);
     6d4:	44 0f       	add	r20, r20
     6d6:	44 0f       	add	r20, r20
     6d8:	44 0f       	add	r20, r20
     6da:	40 93 f0 00 	sts	0x00F0, r20

		CANIDM1= (unsigned char)(idmask>>21);
     6de:	d7 01       	movw	r26, r14
     6e0:	c6 01       	movw	r24, r12
     6e2:	45 e1       	ldi	r20, 0x15	; 21
     6e4:	b6 95       	lsr	r27
     6e6:	a7 95       	ror	r26
     6e8:	97 95       	ror	r25
     6ea:	87 95       	ror	r24
     6ec:	4a 95       	dec	r20
     6ee:	d1 f7       	brne	.-12     	; 0x6e4 <can_int_rx_set+0xcc>
     6f0:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask>>13);
     6f4:	d7 01       	movw	r26, r14
     6f6:	c6 01       	movw	r24, r12
     6f8:	ed e0       	ldi	r30, 0x0D	; 13
     6fa:	b6 95       	lsr	r27
     6fc:	a7 95       	ror	r26
     6fe:	97 95       	ror	r25
     700:	87 95       	ror	r24
     702:	ea 95       	dec	r30
     704:	d1 f7       	brne	.-12     	; 0x6fa <can_int_rx_set+0xe2>
     706:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM3= (unsigned char)(idmask>>5);
     70a:	d7 01       	movw	r26, r14
     70c:	c6 01       	movw	r24, r12
     70e:	f5 e0       	ldi	r31, 0x05	; 5
     710:	b6 95       	lsr	r27
     712:	a7 95       	ror	r26
     714:	97 95       	ror	r25
     716:	87 95       	ror	r24
     718:	fa 95       	dec	r31
     71a:	d1 f7       	brne	.-12     	; 0x710 <can_int_rx_set+0xf8>
     71c:	80 93 f5 00 	sts	0x00F5, r24
		CANIDM4= (unsigned char)(idmask<<3);
     720:	cc 0c       	add	r12, r12
     722:	cc 0c       	add	r12, r12
     724:	cc 0c       	add	r12, r12
     726:	c0 92 f4 00 	sts	0x00F4, r12

		CANCDMOB |= 0x10;	// set IDE =1, extended 29 bits
     72a:	80 91 ef 00 	lds	r24, 0x00EF
     72e:	80 61       	ori	r24, 0x10	; 16
     730:	80 93 ef 00 	sts	0x00EF, r24

		//usart1_transmit_string("\rRx Extended Set\n");
	}
	CANCDMOB |= (dlc & 0x0f);		// set data length
     734:	80 91 ef 00 	lds	r24, 0x00EF
     738:	0f 70       	andi	r16, 0x0F	; 15
     73a:	08 2b       	or	r16, r24
     73c:	00 93 ef 00 	sts	0x00EF, r16

	CANIDM4 |= (unsigned char)(rtrIdemask & 0x07);
     740:	90 91 f4 00 	lds	r25, 0x00F4
     744:	8a 2d       	mov	r24, r10
     746:	87 70       	andi	r24, 0x07	; 7
     748:	89 2b       	or	r24, r25
     74a:	80 93 f4 00 	sts	0x00F4, r24
//	CANIDM4 &= ~0x02;		// recommended
//	CANIDM4 &= ~0x01;		// IDEMSK= 1/0 enable comparison (IDE receive)


//  인터럽트 인에이블(인터럽트 설정)
	CANGIE |= 0xa0; 		// Enable all interrupt and Enable Rx interrupt
     74e:	80 91 db 00 	lds	r24, 0x00DB
     752:	80 6a       	ori	r24, 0xA0	; 160
     754:	80 93 db 00 	sts	0x00DB, r24

	if(obj<8) 
     758:	38 30       	cpi	r19, 0x08	; 8
     75a:	50 f4       	brcc	.+20     	; 0x770 <can_int_rx_set+0x158>
		CANIE2 = (1<<obj);		// 해당 MOb의 인터럽트를 인에이블 시킴 
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	02 c0       	rjmp	.+4      	; 0x766 <can_int_rx_set+0x14e>
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	3a 95       	dec	r19
     768:	e2 f7       	brpl	.-8      	; 0x762 <can_int_rx_set+0x14a>
     76a:	80 93 de 00 	sts	0x00DE, r24
     76e:	0d c0       	rjmp	.+26     	; 0x78a <can_int_rx_set+0x172>
	else        
		CANIE1 = (1<<(obj-8));	// 
     770:	23 2f       	mov	r18, r19
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	28 50       	subi	r18, 0x08	; 8
     776:	30 40       	sbci	r19, 0x00	; 0
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	02 c0       	rjmp	.+4      	; 0x782 <can_int_rx_set+0x16a>
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	2a 95       	dec	r18
     784:	e2 f7       	brpl	.-8      	; 0x77e <can_int_rx_set+0x166>
     786:	80 93 df 00 	sts	0x00DF, r24

	CANCDMOB |= 0x80;			// 수신 인에이블 
     78a:	80 91 ef 00 	lds	r24, 0x00EF
     78e:	80 68       	ori	r24, 0x80	; 128
     790:	80 93 ef 00 	sts	0x00EF, r24
	sei();
     794:	78 94       	sei
}
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	df 90       	pop	r13
     79e:	cf 90       	pop	r12
     7a0:	af 90       	pop	r10
     7a2:	08 95       	ret

000007a4 <CAN_NODE_2_AUTO_step>:
RT_MODEL_CAN_NODE_2_AUTO CAN_NODE_2_AUTO_M_;
RT_MODEL_CAN_NODE_2_AUTO *CAN_NODE_2_AUTO_M = &CAN_NODE_2_AUTO_M_;

/* Model step function */
void CAN_NODE_2_AUTO_step(void)
{
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
   *  Inport: '<Root>/msg1_data_0_'
   *  Inport: '<Root>/speed'
   */
  /* Gateway: Chart */
  /* During: Chart */
  if (CAN_NODE_2_AUTO_DWork.is_active_c1_CAN_NODE_2_AUTO == 0) {
     7b0:	80 91 4e 03 	lds	r24, 0x034E
     7b4:	88 23       	and	r24, r24
     7b6:	21 f4       	brne	.+8      	; 0x7c0 <CAN_NODE_2_AUTO_step+0x1c>
    /* Entry: Chart */
    CAN_NODE_2_AUTO_DWork.is_active_c1_CAN_NODE_2_AUTO = 1U;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	80 93 4e 03 	sts	0x034E, r24
     7be:	46 c1       	rjmp	.+652    	; 0xa4c <CAN_NODE_2_AUTO_step+0x2a8>
    CAN_NODE_2_AUTO_B.msg3_data_0_ = 0.0;
    CAN_NODE_2_AUTO_B.ocr3a = 100.0;
    CAN_NODE_2_AUTO_B.ocr3b = 100.0;
    CAN_NODE_2_AUTO_B.porte = (real_T)0xfc;
  } else {
    switch (CAN_NODE_2_AUTO_DWork.is_c1_CAN_NODE_2_AUTO) {
     7c0:	c0 91 4f 03 	lds	r28, 0x034F
     7c4:	c1 30       	cpi	r28, 0x01	; 1
     7c6:	21 f0       	breq	.+8      	; 0x7d0 <CAN_NODE_2_AUTO_step+0x2c>
     7c8:	c2 30       	cpi	r28, 0x02	; 2
     7ca:	09 f0       	breq	.+2      	; 0x7ce <CAN_NODE_2_AUTO_step+0x2a>
     7cc:	3f c1       	rjmp	.+638    	; 0xa4c <CAN_NODE_2_AUTO_step+0x2a8>
     7ce:	26 c1       	rjmp	.+588    	; 0xa1c <CAN_NODE_2_AUTO_step+0x278>
     case CAN_NODE_2_AUTO_IN_Moter:
      /* During 'Moter': '<S1>:65' */
      if (CAN_NODE_2_AUTO_U.msg1_data_0_ == 0.0) {
     7d0:	c0 90 3c 03 	lds	r12, 0x033C
     7d4:	d0 90 3d 03 	lds	r13, 0x033D
     7d8:	e0 90 3e 03 	lds	r14, 0x033E
     7dc:	f0 90 3f 03 	lds	r15, 0x033F
     7e0:	c7 01       	movw	r24, r14
     7e2:	b6 01       	movw	r22, r12
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	a9 01       	movw	r20, r18
     7ea:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__eqsf2>
     7ee:	88 23       	and	r24, r24
     7f0:	39 f4       	brne	.+14     	; 0x800 <CAN_NODE_2_AUTO_step+0x5c>
        /* Transition: '<S1>:88' */
        /* Exit 'Body_L_ACCR': '<S1>:9' */
        CAN_NODE_2_AUTO_DWork.is_ACCR = (uint8_T)CAN_NODE_2_A_IN_NO_ACTIVE_CHILD;
     7f2:	10 92 50 03 	sts	0x0350, r1

        /* Exit 'Body_R_ACCR': '<S1>:8' */
        /* Exit 'ACCR': '<S1>:5' */
        CAN_NODE_2_AUTO_DWork.is_Moter = (uint8_T)
     7f6:	10 92 52 03 	sts	0x0352, r1
          CAN_NODE_2_A_IN_NO_ACTIVE_CHILD;

        /* Exit 'Body_L_SLOW': '<S1>:11' */
        CAN_NODE_2_AUTO_DWork.is_SLOW = (uint8_T)CAN_NODE_2_A_IN_NO_ACTIVE_CHILD;
     7fa:	10 92 51 03 	sts	0x0351, r1
     7fe:	26 c1       	rjmp	.+588    	; 0xa4c <CAN_NODE_2_AUTO_step+0x2a8>
        CAN_NODE_2_AUTO_B.msg3_data_0_ = 0.0;
        CAN_NODE_2_AUTO_B.ocr3a = 100.0;
        CAN_NODE_2_AUTO_B.ocr3b = 100.0;
        CAN_NODE_2_AUTO_B.porte = (real_T)0xfc;
      } else {
        switch (CAN_NODE_2_AUTO_DWork.is_Moter) {
     800:	d0 91 52 03 	lds	r29, 0x0352
     804:	d1 30       	cpi	r29, 0x01	; 1
     806:	21 f0       	breq	.+8      	; 0x810 <CAN_NODE_2_AUTO_step+0x6c>
     808:	d2 30       	cpi	r29, 0x02	; 2
     80a:	09 f0       	breq	.+2      	; 0x80e <CAN_NODE_2_AUTO_step+0x6a>
     80c:	f5 c0       	rjmp	.+490    	; 0x9f8 <CAN_NODE_2_AUTO_step+0x254>
     80e:	3b c0       	rjmp	.+118    	; 0x886 <CAN_NODE_2_AUTO_step+0xe2>
         case CAN_NODE_2_AUTO_IN_ACCR:
          /* During 'ACCR': '<S1>:5' */
          if (CAN_NODE_2_AUTO_U.msg1_data_0_ == 2.0) {
     810:	c7 01       	movw	r24, r14
     812:	b6 01       	movw	r22, r12
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	50 e4       	ldi	r21, 0x40	; 64
     81c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__eqsf2>
     820:	88 23       	and	r24, r24
     822:	31 f4       	brne	.+12     	; 0x830 <CAN_NODE_2_AUTO_step+0x8c>
            /* Transition: '<S1>:12' */
            /* Exit 'Body_L_ACCR': '<S1>:9' */
            CAN_NODE_2_AUTO_DWork.is_ACCR = (uint8_T)
     824:	10 92 50 03 	sts	0x0350, r1
              CAN_NODE_2_A_IN_NO_ACTIVE_CHILD;

            /* Exit 'Body_R_ACCR': '<S1>:8' */
            /* Exit 'ACCR': '<S1>:5' */
            /* Entry 'SLOW': '<S1>:6' */
            CAN_NODE_2_AUTO_DWork.is_Moter = CAN_NODE_2_AUTO_IN_SLOW;
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	80 93 52 03 	sts	0x0352, r24
     82e:	54 c0       	rjmp	.+168    	; 0x8d8 <CAN_NODE_2_AUTO_step+0x134>
            /* Transition: '<S1>:70' */
            /* Entry 'Body_L_SLOW': '<S1>:11' */
            CAN_NODE_2_AUTO_DWork.is_SLOW = CAN_NODE_2_AUTO_IN_Body_L_SLOW;
            CAN_NODE_2_AUTO_B.msg3_data_0_ = 2.0;
          } else {
            switch (CAN_NODE_2_AUTO_DWork.is_ACCR) {
     830:	80 91 50 03 	lds	r24, 0x0350
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	21 f0       	breq	.+8      	; 0x840 <CAN_NODE_2_AUTO_step+0x9c>
     838:	82 30       	cpi	r24, 0x02	; 2
     83a:	09 f0       	breq	.+2      	; 0x83e <CAN_NODE_2_AUTO_step+0x9a>
     83c:	df c0       	rjmp	.+446    	; 0x9fc <CAN_NODE_2_AUTO_step+0x258>
     83e:	12 c0       	rjmp	.+36     	; 0x864 <CAN_NODE_2_AUTO_step+0xc0>
             case CAN_NODE_2_AUTO_IN_Body_L_ACCR:
              /* During 'Body_L_ACCR': '<S1>:9' */
              if (CAN_NODE_2_AUTO_U.gyro_x > 30.0) {
     840:	60 91 44 03 	lds	r22, 0x0344
     844:	70 91 45 03 	lds	r23, 0x0345
     848:	80 91 46 03 	lds	r24, 0x0346
     84c:	90 91 47 03 	lds	r25, 0x0347
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 ef       	ldi	r20, 0xF0	; 240
     856:	51 e4       	ldi	r21, 0x41	; 65
     858:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__gtsf2>
     85c:	18 16       	cp	r1, r24
     85e:	0c f0       	brlt	.+2      	; 0x862 <CAN_NODE_2_AUTO_step+0xbe>
     860:	89 c0       	rjmp	.+274    	; 0x974 <CAN_NODE_2_AUTO_step+0x1d0>
     862:	cc c0       	rjmp	.+408    	; 0x9fc <CAN_NODE_2_AUTO_step+0x258>
              }
              break;

             case CAN_NODE_2_AUTO_IN_Body_R_ACCR:
              /* During 'Body_R_ACCR': '<S1>:8' */
              if (CAN_NODE_2_AUTO_U.gyro_x < -30.0) {
     864:	60 91 44 03 	lds	r22, 0x0344
     868:	70 91 45 03 	lds	r23, 0x0345
     86c:	80 91 46 03 	lds	r24, 0x0346
     870:	90 91 47 03 	lds	r25, 0x0347
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 ef       	ldi	r20, 0xF0	; 240
     87a:	51 ec       	ldi	r21, 0xC1	; 193
     87c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__ltsf2>
     880:	87 ff       	sbrs	r24, 7
     882:	2d c0       	rjmp	.+90     	; 0x8de <CAN_NODE_2_AUTO_step+0x13a>
     884:	0e c0       	rjmp	.+28     	; 0x8a2 <CAN_NODE_2_AUTO_step+0xfe>
          }
          break;

         case CAN_NODE_2_AUTO_IN_SLOW:
          /* During 'SLOW': '<S1>:6' */
          if (CAN_NODE_2_AUTO_U.msg1_data_0_ == 1.0) {
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	40 e8       	ldi	r20, 0x80	; 128
     890:	5f e3       	ldi	r21, 0x3F	; 63
     892:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__eqsf2>
     896:	88 23       	and	r24, r24
     898:	39 f4       	brne	.+14     	; 0x8a8 <CAN_NODE_2_AUTO_step+0x104>
            /* Transition: '<S1>:14' */
            /* Exit 'Body_L_SLOW': '<S1>:11' */
            CAN_NODE_2_AUTO_DWork.is_SLOW = (uint8_T)
     89a:	10 92 51 03 	sts	0x0351, r1
              CAN_NODE_2_A_IN_NO_ACTIVE_CHILD;

            /* Exit 'Body_R_SLOW': '<S1>:10' */
            /* Exit 'SLOW': '<S1>:6' */
            /* Entry 'ACCR': '<S1>:5' */
            CAN_NODE_2_AUTO_DWork.is_Moter = CAN_NODE_2_AUTO_IN_ACCR;
     89e:	c0 93 52 03 	sts	0x0352, r28

            /* Transition: '<S1>:68' */
            /* Entry 'Body_R_ACCR': '<S1>:8' */
            CAN_NODE_2_AUTO_DWork.is_ACCR = CAN_NODE_2_AUTO_IN_Body_R_ACCR;
     8a2:	d0 93 50 03 	sts	0x0350, r29
     8a6:	ad c0       	rjmp	.+346    	; 0xa02 <CAN_NODE_2_AUTO_step+0x25e>
            CAN_NODE_2_AUTO_B.msg3_data_0_ = 1.0;
          } else {
            switch (CAN_NODE_2_AUTO_DWork.is_SLOW) {
     8a8:	80 91 51 03 	lds	r24, 0x0351
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <CAN_NODE_2_AUTO_step+0x114>
     8b0:	82 30       	cpi	r24, 0x02	; 2
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <CAN_NODE_2_AUTO_step+0x112>
     8b4:	9a c0       	rjmp	.+308    	; 0x9ea <CAN_NODE_2_AUTO_step+0x246>
     8b6:	4e c0       	rjmp	.+156    	; 0x954 <CAN_NODE_2_AUTO_step+0x1b0>
             case CAN_NODE_2_AUTO_IN_Body_L_SLOW:
              /* During 'Body_L_SLOW': '<S1>:11' */
              if (CAN_NODE_2_AUTO_U.gyro_x > 30.0) {
     8b8:	60 91 44 03 	lds	r22, 0x0344
     8bc:	70 91 45 03 	lds	r23, 0x0345
     8c0:	80 91 46 03 	lds	r24, 0x0346
     8c4:	90 91 47 03 	lds	r25, 0x0347
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	40 ef       	ldi	r20, 0xF0	; 240
     8ce:	51 e4       	ldi	r21, 0x41	; 65
     8d0:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__gtsf2>
     8d4:	18 16       	cp	r1, r24
     8d6:	1c f4       	brge	.+6      	; 0x8de <CAN_NODE_2_AUTO_step+0x13a>
                /* Transition: '<S1>:39' */
                /* Exit 'Body_L_SLOW': '<S1>:11' */
                /* Entry 'Body_R_SLOW': '<S1>:10' */
                CAN_NODE_2_AUTO_DWork.is_SLOW = CAN_NODE_2_AUTO_IN_Body_R_SLOW;
     8d8:	d0 93 51 03 	sts	0x0351, r29
     8dc:	88 c0       	rjmp	.+272    	; 0x9ee <CAN_NODE_2_AUTO_step+0x24a>
                CAN_NODE_2_AUTO_B.msg3_data_0_ = 2.0;
              } else {
                CAN_NODE_2_AUTO_B.ocr3a = CAN_NODE_2_AUTO_U.speed * 1.6E+007 /
     8de:	60 91 40 03 	lds	r22, 0x0340
     8e2:	70 91 41 03 	lds	r23, 0x0341
     8e6:	80 91 42 03 	lds	r24, 0x0342
     8ea:	90 91 43 03 	lds	r25, 0x0343
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	34 e2       	ldi	r19, 0x24	; 36
     8f2:	44 e7       	ldi	r20, 0x74	; 116
     8f4:	5b e4       	ldi	r21, 0x4B	; 75
     8f6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__mulsf3>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	5f e3       	ldi	r21, 0x3F	; 63
     902:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__mulsf3>
                  2.0 / 64.0 / 1000.0 * 25.0 / 5.0;
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e8       	ldi	r20, 0x80	; 128
     90c:	5c e3       	ldi	r21, 0x3C	; 60
     90e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__mulsf3>
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	4a e7       	ldi	r20, 0x7A	; 122
     918:	54 e4       	ldi	r21, 0x44	; 68
     91a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	48 ec       	ldi	r20, 0xC8	; 200
     924:	51 e4       	ldi	r21, 0x41	; 65
     926:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__mulsf3>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 ea       	ldi	r20, 0xA0	; 160
     930:	50 e4       	ldi	r21, 0x40	; 64
     932:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
     936:	dc 01       	movw	r26, r24
     938:	cb 01       	movw	r24, r22
                /* Exit 'Body_L_SLOW': '<S1>:11' */
                /* Entry 'Body_R_SLOW': '<S1>:10' */
                CAN_NODE_2_AUTO_DWork.is_SLOW = CAN_NODE_2_AUTO_IN_Body_R_SLOW;
                CAN_NODE_2_AUTO_B.msg3_data_0_ = 2.0;
              } else {
                CAN_NODE_2_AUTO_B.ocr3a = CAN_NODE_2_AUTO_U.speed * 1.6E+007 /
     93a:	80 93 f9 02 	sts	0x02F9, r24
     93e:	90 93 fa 02 	sts	0x02FA, r25
     942:	a0 93 fb 02 	sts	0x02FB, r26
     946:	b0 93 fc 02 	sts	0x02FC, r27
                  2.0 / 64.0 / 1000.0 * 25.0 / 5.0;
                CAN_NODE_2_AUTO_B.porte = (real_T)0xfd;
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	ad e7       	ldi	r26, 0x7D	; 125
     950:	b3 e4       	ldi	r27, 0x43	; 67
     952:	a2 c0       	rjmp	.+324    	; 0xa98 <CAN_NODE_2_AUTO_step+0x2f4>
              }
              break;

             case CAN_NODE_2_AUTO_IN_Body_R_SLOW:
              /* During 'Body_R_SLOW': '<S1>:10' */
              if (CAN_NODE_2_AUTO_U.gyro_x < -30.0) {
     954:	60 91 44 03 	lds	r22, 0x0344
     958:	70 91 45 03 	lds	r23, 0x0345
     95c:	80 91 46 03 	lds	r24, 0x0346
     960:	90 91 47 03 	lds	r25, 0x0347
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 ef       	ldi	r20, 0xF0	; 240
     96a:	51 ec       	ldi	r21, 0xC1	; 193
     96c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__ltsf2>
     970:	87 fd       	sbrc	r24, 7
     972:	3b c0       	rjmp	.+118    	; 0x9ea <CAN_NODE_2_AUTO_step+0x246>
                /* Exit 'Body_R_SLOW': '<S1>:10' */
                /* Entry 'Body_L_SLOW': '<S1>:11' */
                CAN_NODE_2_AUTO_DWork.is_SLOW = CAN_NODE_2_AUTO_IN_Body_L_SLOW;
                CAN_NODE_2_AUTO_B.msg3_data_0_ = 2.0;
              } else {
                CAN_NODE_2_AUTO_B.ocr3a = CAN_NODE_2_AUTO_U.speed * 1.6E+007 /
     974:	60 91 40 03 	lds	r22, 0x0340
     978:	70 91 41 03 	lds	r23, 0x0341
     97c:	80 91 42 03 	lds	r24, 0x0342
     980:	90 91 43 03 	lds	r25, 0x0343
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	34 e2       	ldi	r19, 0x24	; 36
     988:	44 e7       	ldi	r20, 0x74	; 116
     98a:	5b e4       	ldi	r21, 0x4B	; 75
     98c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__mulsf3>
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	5f e3       	ldi	r21, 0x3F	; 63
     998:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__mulsf3>
                  2.0 / 64.0 / 1000.0 * 25.0 / 5.0;
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	40 e8       	ldi	r20, 0x80	; 128
     9a2:	5c e3       	ldi	r21, 0x3C	; 60
     9a4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__mulsf3>
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	4a e7       	ldi	r20, 0x7A	; 122
     9ae:	54 e4       	ldi	r21, 0x44	; 68
     9b0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	48 ec       	ldi	r20, 0xC8	; 200
     9ba:	51 e4       	ldi	r21, 0x41	; 65
     9bc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__mulsf3>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 ea       	ldi	r20, 0xA0	; 160
     9c6:	50 e4       	ldi	r21, 0x40	; 64
     9c8:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
     9cc:	dc 01       	movw	r26, r24
     9ce:	cb 01       	movw	r24, r22
                /* Exit 'Body_R_SLOW': '<S1>:10' */
                /* Entry 'Body_L_SLOW': '<S1>:11' */
                CAN_NODE_2_AUTO_DWork.is_SLOW = CAN_NODE_2_AUTO_IN_Body_L_SLOW;
                CAN_NODE_2_AUTO_B.msg3_data_0_ = 2.0;
              } else {
                CAN_NODE_2_AUTO_B.ocr3a = CAN_NODE_2_AUTO_U.speed * 1.6E+007 /
     9d0:	80 93 f9 02 	sts	0x02F9, r24
     9d4:	90 93 fa 02 	sts	0x02FA, r25
     9d8:	a0 93 fb 02 	sts	0x02FB, r26
     9dc:	b0 93 fc 02 	sts	0x02FC, r27
                  2.0 / 64.0 / 1000.0 * 25.0 / 5.0;
                CAN_NODE_2_AUTO_B.porte = (real_T)0xfe;
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	ae e7       	ldi	r26, 0x7E	; 126
     9e6:	b3 e4       	ldi	r27, 0x43	; 67
     9e8:	57 c0       	rjmp	.+174    	; 0xa98 <CAN_NODE_2_AUTO_step+0x2f4>
              break;

             default:
              /* Transition: '<S1>:70' */
              /* Entry 'Body_L_SLOW': '<S1>:11' */
              CAN_NODE_2_AUTO_DWork.is_SLOW = CAN_NODE_2_AUTO_IN_Body_L_SLOW;
     9ea:	c0 93 51 03 	sts	0x0351, r28
              CAN_NODE_2_AUTO_B.msg3_data_0_ = 2.0;
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	a0 e0       	ldi	r26, 0x00	; 0
     9f4:	b0 e4       	ldi	r27, 0x40	; 64
     9f6:	09 c0       	rjmp	.+18     	; 0xa0a <CAN_NODE_2_AUTO_step+0x266>
          break;

         default:
          /* Transition: '<S1>:67' */
          /* Entry 'ACCR': '<S1>:5' */
          CAN_NODE_2_AUTO_DWork.is_Moter = CAN_NODE_2_AUTO_IN_ACCR;
     9f8:	c0 93 52 03 	sts	0x0352, r28

          /* Transition: '<S1>:68' */
          /* Entry 'Body_R_ACCR': '<S1>:8' */
          CAN_NODE_2_AUTO_DWork.is_ACCR = CAN_NODE_2_AUTO_IN_Body_R_ACCR;
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	80 93 50 03 	sts	0x0350, r24
          CAN_NODE_2_AUTO_B.msg3_data_0_ = 1.0;
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	a0 e8       	ldi	r26, 0x80	; 128
     a08:	bf e3       	ldi	r27, 0x3F	; 63
     a0a:	80 93 f5 02 	sts	0x02F5, r24
     a0e:	90 93 f6 02 	sts	0x02F6, r25
     a12:	a0 93 f7 02 	sts	0x02F7, r26
     a16:	b0 93 f8 02 	sts	0x02F8, r27
          break;
     a1a:	46 c0       	rjmp	.+140    	; 0xaa8 <CAN_NODE_2_AUTO_step+0x304>
      }
      break;

     case CAN_NODE_2_AUTO_IN_wait:
      /* During 'wait': '<S1>:1' */
      if (CAN_NODE_2_AUTO_U.msg1_data_0_ == 1.0) {
     a1c:	60 91 3c 03 	lds	r22, 0x033C
     a20:	70 91 3d 03 	lds	r23, 0x033D
     a24:	80 91 3e 03 	lds	r24, 0x033E
     a28:	90 91 3f 03 	lds	r25, 0x033F
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e8       	ldi	r20, 0x80	; 128
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__eqsf2>
     a38:	88 23       	and	r24, r24
     a3a:	b1 f5       	brne	.+108    	; 0xaa8 <CAN_NODE_2_AUTO_step+0x304>
        /* Transition: '<S1>:7' */
        /* Exit 'wait': '<S1>:1' */
        /* Entry 'Moter': '<S1>:65' */
        CAN_NODE_2_AUTO_DWork.is_c1_CAN_NODE_2_AUTO = CAN_NODE_2_AUTO_IN_Moter;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	80 93 4f 03 	sts	0x034F, r24

        /* Transition: '<S1>:67' */
        /* Entry 'ACCR': '<S1>:5' */
        CAN_NODE_2_AUTO_DWork.is_Moter = CAN_NODE_2_AUTO_IN_ACCR;
     a42:	80 93 52 03 	sts	0x0352, r24

        /* Transition: '<S1>:68' */
        /* Entry 'Body_R_ACCR': '<S1>:8' */
        CAN_NODE_2_AUTO_DWork.is_ACCR = CAN_NODE_2_AUTO_IN_Body_R_ACCR;
     a46:	c0 93 50 03 	sts	0x0350, r28
     a4a:	db cf       	rjmp	.-74     	; 0xa02 <CAN_NODE_2_AUTO_step+0x25e>
      break;

     default:
      /* Transition: '<S1>:2' */
      /* Entry 'wait': '<S1>:1' */
      CAN_NODE_2_AUTO_DWork.is_c1_CAN_NODE_2_AUTO = CAN_NODE_2_AUTO_IN_wait;
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	80 93 4f 03 	sts	0x034F, r24
      CAN_NODE_2_AUTO_B.msg3_data_0_ = 0.0;
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	dc 01       	movw	r26, r24
     a58:	80 93 f5 02 	sts	0x02F5, r24
     a5c:	90 93 f6 02 	sts	0x02F6, r25
     a60:	a0 93 f7 02 	sts	0x02F7, r26
     a64:	b0 93 f8 02 	sts	0x02F8, r27
      CAN_NODE_2_AUTO_B.ocr3a = 100.0;
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a8 ec       	ldi	r26, 0xC8	; 200
     a6e:	b2 e4       	ldi	r27, 0x42	; 66
     a70:	80 93 f9 02 	sts	0x02F9, r24
     a74:	90 93 fa 02 	sts	0x02FA, r25
     a78:	a0 93 fb 02 	sts	0x02FB, r26
     a7c:	b0 93 fc 02 	sts	0x02FC, r27
      CAN_NODE_2_AUTO_B.ocr3b = 100.0;
     a80:	80 93 fd 02 	sts	0x02FD, r24
     a84:	90 93 fe 02 	sts	0x02FE, r25
     a88:	a0 93 ff 02 	sts	0x02FF, r26
     a8c:	b0 93 00 03 	sts	0x0300, r27
      CAN_NODE_2_AUTO_B.porte = (real_T)0xfc;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	ac e7       	ldi	r26, 0x7C	; 124
     a96:	b3 e4       	ldi	r27, 0x43	; 67
     a98:	80 93 01 03 	sts	0x0301, r24
     a9c:	90 93 02 03 	sts	0x0302, r25
     aa0:	a0 93 03 03 	sts	0x0303, r26
     aa4:	b0 93 04 03 	sts	0x0304, r27
      break;
    }
  }

  /* Outport: '<Root>/msg3_data_0_' */
  CAN_NODE_2_AUTO_Y.msg3_data_0_ = CAN_NODE_2_AUTO_B.msg3_data_0_;
     aa8:	80 91 f5 02 	lds	r24, 0x02F5
     aac:	90 91 f6 02 	lds	r25, 0x02F6
     ab0:	a0 91 f7 02 	lds	r26, 0x02F7
     ab4:	b0 91 f8 02 	lds	r27, 0x02F8
     ab8:	80 93 63 03 	sts	0x0363, r24
     abc:	90 93 64 03 	sts	0x0364, r25
     ac0:	a0 93 65 03 	sts	0x0365, r26
     ac4:	b0 93 66 03 	sts	0x0366, r27

  /* Outport: '<Root>/ocr3a' */
  CAN_NODE_2_AUTO_Y.ocr3a = CAN_NODE_2_AUTO_B.ocr3a;
     ac8:	80 91 f9 02 	lds	r24, 0x02F9
     acc:	90 91 fa 02 	lds	r25, 0x02FA
     ad0:	a0 91 fb 02 	lds	r26, 0x02FB
     ad4:	b0 91 fc 02 	lds	r27, 0x02FC
     ad8:	80 93 67 03 	sts	0x0367, r24
     adc:	90 93 68 03 	sts	0x0368, r25
     ae0:	a0 93 69 03 	sts	0x0369, r26
     ae4:	b0 93 6a 03 	sts	0x036A, r27

  /* Outport: '<Root>/ocr3b' */
  CAN_NODE_2_AUTO_Y.ocr3b = CAN_NODE_2_AUTO_B.ocr3b;
     ae8:	80 91 fd 02 	lds	r24, 0x02FD
     aec:	90 91 fe 02 	lds	r25, 0x02FE
     af0:	a0 91 ff 02 	lds	r26, 0x02FF
     af4:	b0 91 00 03 	lds	r27, 0x0300
     af8:	80 93 6b 03 	sts	0x036B, r24
     afc:	90 93 6c 03 	sts	0x036C, r25
     b00:	a0 93 6d 03 	sts	0x036D, r26
     b04:	b0 93 6e 03 	sts	0x036E, r27

  /* Outport: '<Root>/porte' */
  CAN_NODE_2_AUTO_Y.porte = CAN_NODE_2_AUTO_B.porte;
     b08:	80 91 01 03 	lds	r24, 0x0301
     b0c:	90 91 02 03 	lds	r25, 0x0302
     b10:	a0 91 03 03 	lds	r26, 0x0303
     b14:	b0 91 04 03 	lds	r27, 0x0304
     b18:	80 93 6f 03 	sts	0x036F, r24
     b1c:	90 93 70 03 	sts	0x0370, r25
     b20:	a0 93 71 03 	sts	0x0371, r26
     b24:	b0 93 72 03 	sts	0x0372, r27
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	cf 90       	pop	r12
     b34:	08 95       	ret

00000b36 <CAN_NODE_2_AUTO_initialize>:
void CAN_NODE_2_AUTO_initialize(void)
{
  /* Registration code */

  /* initialize error status */
  rtmSetErrorStatus(CAN_NODE_2_AUTO_M, (NULL));
     b36:	e0 91 99 01 	lds	r30, 0x0199
     b3a:	f0 91 9a 01 	lds	r31, 0x019A
     b3e:	11 82       	std	Z+1, r1	; 0x01
     b40:	10 82       	st	Z, r1

  /* block I/O */
  (void) memset(((void *) &CAN_NODE_2_AUTO_B), 0,
     b42:	80 e1       	ldi	r24, 0x10	; 16
     b44:	e5 ef       	ldi	r30, 0xF5	; 245
     b46:	f2 e0       	ldi	r31, 0x02	; 2
     b48:	df 01       	movw	r26, r30
     b4a:	98 2f       	mov	r25, r24
     b4c:	1d 92       	st	X+, r1
     b4e:	9a 95       	dec	r25
     b50:	e9 f7       	brne	.-6      	; 0xb4c <CAN_NODE_2_AUTO_initialize+0x16>
                sizeof(BlockIO_CAN_NODE_2_AUTO));

  /* states (dwork) */
  (void) memset((void *)&CAN_NODE_2_AUTO_DWork, 0,
     b52:	95 e0       	ldi	r25, 0x05	; 5
     b54:	ee e4       	ldi	r30, 0x4E	; 78
     b56:	f3 e0       	ldi	r31, 0x03	; 3
     b58:	df 01       	movw	r26, r30
     b5a:	1d 92       	st	X+, r1
     b5c:	9a 95       	dec	r25
     b5e:	e9 f7       	brne	.-6      	; 0xb5a <CAN_NODE_2_AUTO_initialize+0x24>
                sizeof(D_Work_CAN_NODE_2_AUTO));

  /* external inputs */
  (void) memset((void *)&CAN_NODE_2_AUTO_U, 0,
     b60:	9c e0       	ldi	r25, 0x0C	; 12
     b62:	ec e3       	ldi	r30, 0x3C	; 60
     b64:	f3 e0       	ldi	r31, 0x03	; 3
     b66:	df 01       	movw	r26, r30
     b68:	1d 92       	st	X+, r1
     b6a:	9a 95       	dec	r25
     b6c:	e9 f7       	brne	.-6      	; 0xb68 <CAN_NODE_2_AUTO_initialize+0x32>
                sizeof(ExternalInputs_CAN_NODE_2_AUTO));

  /* external outputs */
  (void) memset((void *)&CAN_NODE_2_AUTO_Y, 0,
     b6e:	e3 e6       	ldi	r30, 0x63	; 99
     b70:	f3 e0       	ldi	r31, 0x03	; 3
     b72:	df 01       	movw	r26, r30
     b74:	1d 92       	st	X+, r1
     b76:	8a 95       	dec	r24
     b78:	e9 f7       	brne	.-6      	; 0xb74 <CAN_NODE_2_AUTO_initialize+0x3e>
  CAN_NODE_2_AUTO_DWork.is_c1_CAN_NODE_2_AUTO = 0U;
  CAN_NODE_2_AUTO_B.msg3_data_0_ = 0.0;
  CAN_NODE_2_AUTO_B.ocr3a = 0.0;
  CAN_NODE_2_AUTO_B.ocr3b = 0.0;
  CAN_NODE_2_AUTO_B.porte = 0.0;
}
     b7a:	08 95       	ret

00000b7c <CAN_NODE_2_AUTO_terminate>:

/* Model terminate function */
void CAN_NODE_2_AUTO_terminate(void)
{
  /* (no terminate code required) */
}
     b7c:	08 95       	ret

00000b7e <Swap>:
  }
} 


void Swap(volatile unsigned int *a, volatile unsigned int *b) 
{
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	00 d0       	rcall	.+0      	; 0xb84 <Swap+0x6>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	fc 01       	movw	r30, r24
     b8a:	db 01       	movw	r26, r22
  volatile unsigned int tmp=*a;
     b8c:	80 81       	ld	r24, Z
     b8e:	91 81       	ldd	r25, Z+1	; 0x01
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	89 83       	std	Y+1, r24	; 0x01
  *a=*b;
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	11 97       	sbiw	r26, 0x01	; 1
     b9a:	91 83       	std	Z+1, r25	; 0x01
     b9c:	80 83       	st	Z, r24
  *b=tmp;
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	11 96       	adiw	r26, 0x01	; 1
     ba4:	9c 93       	st	X, r25
     ba6:	8e 93       	st	-X, r24
}
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <Sort4>:
     }
  }
} 

void Sort4(void) 
{
     bb2:	cf 92       	push	r12
     bb4:	df 92       	push	r13
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
  int i, j;
  for (i=0; i<10; i++) {
     bc2:	c0 e0       	ldi	r28, 0x00	; 0
     bc4:	d0 e0       	ldi	r29, 0x00	; 0
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <Sort4+0x18>
     bc8:	e7 01       	movw	r28, r14
       for (j=i+1; j<11; j++) { 
     bca:	7e 01       	movw	r14, r28
     bcc:	08 94       	sec
     bce:	e1 1c       	adc	r14, r1
     bd0:	f1 1c       	adc	r15, r1
     bd2:	87 01       	movw	r16, r14
            if (data4[i] > data4[j]) Swap(&data4[i], &data4[j]);
     bd4:	cc 0f       	add	r28, r28
     bd6:	dd 1f       	adc	r29, r29
     bd8:	cf 51       	subi	r28, 0x1F	; 31
     bda:	dd 4f       	sbci	r29, 0xFD	; 253
     bdc:	dc 2e       	mov	r13, r28
     bde:	cd 2e       	mov	r12, r29
     be0:	88 81       	ld	r24, Y
     be2:	99 81       	ldd	r25, Y+1	; 0x01
     be4:	b8 01       	movw	r22, r16
     be6:	66 0f       	add	r22, r22
     be8:	77 1f       	adc	r23, r23
     bea:	6f 51       	subi	r22, 0x1F	; 31
     bec:	7d 4f       	sbci	r23, 0xFD	; 253
     bee:	fb 01       	movw	r30, r22
     bf0:	20 81       	ld	r18, Z
     bf2:	31 81       	ldd	r19, Z+1	; 0x01
     bf4:	28 17       	cp	r18, r24
     bf6:	39 07       	cpc	r19, r25
     bf8:	20 f4       	brcc	.+8      	; 0xc02 <Sort4+0x50>
     bfa:	8d 2d       	mov	r24, r13
     bfc:	9c 2d       	mov	r25, r12
     bfe:	0e 94 bf 05 	call	0xb7e	; 0xb7e <Swap>

void Sort4(void) 
{
  int i, j;
  for (i=0; i<10; i++) {
       for (j=i+1; j<11; j++) { 
     c02:	0f 5f       	subi	r16, 0xFF	; 255
     c04:	1f 4f       	sbci	r17, 0xFF	; 255
     c06:	0b 30       	cpi	r16, 0x0B	; 11
     c08:	11 05       	cpc	r17, r1
     c0a:	54 f3       	brlt	.-44     	; 0xbe0 <Sort4+0x2e>
} 

void Sort4(void) 
{
  int i, j;
  for (i=0; i<10; i++) {
     c0c:	fa e0       	ldi	r31, 0x0A	; 10
     c0e:	ef 16       	cp	r14, r31
     c10:	f1 04       	cpc	r15, r1
     c12:	d1 f6       	brne	.-76     	; 0xbc8 <Sort4+0x16>
       for (j=i+1; j<11; j++) { 
            if (data4[i] > data4[j]) Swap(&data4[i], &data4[j]);
     }
  }
} 
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	df 90       	pop	r13
     c22:	cf 90       	pop	r12
     c24:	08 95       	ret

00000c26 <Sort2>:
     }
  }
} 

void Sort2(void) 
{
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
  int i, j;
  for (i=0; i<10; i++) {
     c36:	c0 e0       	ldi	r28, 0x00	; 0
     c38:	d0 e0       	ldi	r29, 0x00	; 0
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <Sort2+0x18>
     c3c:	e7 01       	movw	r28, r14
       for (j=i+1; j<11; j++) { 
     c3e:	7e 01       	movw	r14, r28
     c40:	08 94       	sec
     c42:	e1 1c       	adc	r14, r1
     c44:	f1 1c       	adc	r15, r1
     c46:	87 01       	movw	r16, r14
            if (data2[i] > data2[j]) Swap(&data2[i], &data2[j]);
     c48:	cc 0f       	add	r28, r28
     c4a:	dd 1f       	adc	r29, r29
     c4c:	c3 53       	subi	r28, 0x33	; 51
     c4e:	dd 4f       	sbci	r29, 0xFD	; 253
     c50:	dc 2e       	mov	r13, r28
     c52:	cd 2e       	mov	r12, r29
     c54:	88 81       	ld	r24, Y
     c56:	99 81       	ldd	r25, Y+1	; 0x01
     c58:	b8 01       	movw	r22, r16
     c5a:	66 0f       	add	r22, r22
     c5c:	77 1f       	adc	r23, r23
     c5e:	63 53       	subi	r22, 0x33	; 51
     c60:	7d 4f       	sbci	r23, 0xFD	; 253
     c62:	fb 01       	movw	r30, r22
     c64:	20 81       	ld	r18, Z
     c66:	31 81       	ldd	r19, Z+1	; 0x01
     c68:	28 17       	cp	r18, r24
     c6a:	39 07       	cpc	r19, r25
     c6c:	20 f4       	brcc	.+8      	; 0xc76 <Sort2+0x50>
     c6e:	8d 2d       	mov	r24, r13
     c70:	9c 2d       	mov	r25, r12
     c72:	0e 94 bf 05 	call	0xb7e	; 0xb7e <Swap>

void Sort2(void) 
{
  int i, j;
  for (i=0; i<10; i++) {
       for (j=i+1; j<11; j++) { 
     c76:	0f 5f       	subi	r16, 0xFF	; 255
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	0b 30       	cpi	r16, 0x0B	; 11
     c7c:	11 05       	cpc	r17, r1
     c7e:	54 f3       	brlt	.-44     	; 0xc54 <Sort2+0x2e>
} 

void Sort2(void) 
{
  int i, j;
  for (i=0; i<10; i++) {
     c80:	fa e0       	ldi	r31, 0x0A	; 10
     c82:	ef 16       	cp	r14, r31
     c84:	f1 04       	cpc	r15, r1
     c86:	d1 f6       	brne	.-76     	; 0xc3c <Sort2+0x16>
       for (j=i+1; j<11; j++) { 
            if (data2[i] > data2[j]) Swap(&data2[i], &data2[j]);
     }
  }
} 
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	df 90       	pop	r13
     c96:	cf 90       	pop	r12
     c98:	08 95       	ret

00000c9a <Sort0>:

void get_adc_data(void);
void sys_init(void);

void Sort0(void) 
{
     c9a:	cf 92       	push	r12
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
  int i, j;
  for (i=0; i<10; i++) {
     caa:	c0 e0       	ldi	r28, 0x00	; 0
     cac:	d0 e0       	ldi	r29, 0x00	; 0
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <Sort0+0x18>
     cb0:	e7 01       	movw	r28, r14
       for (j=i+1; j<11; j++) { 
     cb2:	7e 01       	movw	r14, r28
     cb4:	08 94       	sec
     cb6:	e1 1c       	adc	r14, r1
     cb8:	f1 1c       	adc	r15, r1
     cba:	87 01       	movw	r16, r14
            if (data0[i] > data0[j]) Swap(&data0[i], &data0[j]);
     cbc:	cc 0f       	add	r28, r28
     cbe:	dd 1f       	adc	r29, r29
     cc0:	c8 5d       	subi	r28, 0xD8	; 216
     cc2:	dc 4f       	sbci	r29, 0xFC	; 252
     cc4:	dc 2e       	mov	r13, r28
     cc6:	cd 2e       	mov	r12, r29
     cc8:	88 81       	ld	r24, Y
     cca:	99 81       	ldd	r25, Y+1	; 0x01
     ccc:	b8 01       	movw	r22, r16
     cce:	66 0f       	add	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	68 5d       	subi	r22, 0xD8	; 216
     cd4:	7c 4f       	sbci	r23, 0xFC	; 252
     cd6:	fb 01       	movw	r30, r22
     cd8:	20 81       	ld	r18, Z
     cda:	31 81       	ldd	r19, Z+1	; 0x01
     cdc:	28 17       	cp	r18, r24
     cde:	39 07       	cpc	r19, r25
     ce0:	20 f4       	brcc	.+8      	; 0xcea <Sort0+0x50>
     ce2:	8d 2d       	mov	r24, r13
     ce4:	9c 2d       	mov	r25, r12
     ce6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <Swap>

void Sort0(void) 
{
  int i, j;
  for (i=0; i<10; i++) {
       for (j=i+1; j<11; j++) { 
     cea:	0f 5f       	subi	r16, 0xFF	; 255
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	0b 30       	cpi	r16, 0x0B	; 11
     cf0:	11 05       	cpc	r17, r1
     cf2:	54 f3       	brlt	.-44     	; 0xcc8 <Sort0+0x2e>
void sys_init(void);

void Sort0(void) 
{
  int i, j;
  for (i=0; i<10; i++) {
     cf4:	fa e0       	ldi	r31, 0x0A	; 10
     cf6:	ef 16       	cp	r14, r31
     cf8:	f1 04       	cpc	r15, r1
     cfa:	d1 f6       	brne	.-76     	; 0xcb0 <Sort0+0x16>
       for (j=i+1; j<11; j++) { 
            if (data0[i] > data0[j]) Swap(&data0[i], &data0[j]);
     }
  }
} 
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	08 95       	ret

00000d0e <sys_init>:
  *b=tmp;
}

void sys_init(void){
    int i;
    ch0 = 0;
     d0e:	10 92 56 03 	sts	0x0356, r1
     d12:	10 92 55 03 	sts	0x0355, r1
    ch2 = 0;
     d16:	10 92 06 03 	sts	0x0306, r1
     d1a:	10 92 05 03 	sts	0x0305, r1
    ch4 = 0;
     d1e:	10 92 1b 03 	sts	0x031B, r1
     d22:	10 92 1a 03 	sts	0x031A, r1
    
    for(i=0;i<10;i++){
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
       buf[i] = 0;
     d2a:	fc 01       	movw	r30, r24
     d2c:	e2 54       	subi	r30, 0x42	; 66
     d2e:	fd 4f       	sbci	r31, 0xFD	; 253
     d30:	10 82       	st	Z, r1
      data0[i] = 0;
     d32:	9c 01       	movw	r18, r24
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	f9 01       	movw	r30, r18
     d3a:	e8 5d       	subi	r30, 0xD8	; 216
     d3c:	fc 4f       	sbci	r31, 0xFC	; 252
     d3e:	11 82       	std	Z+1, r1	; 0x01
     d40:	10 82       	st	Z, r1
      data2[i] = 0;
     d42:	f9 01       	movw	r30, r18
     d44:	e3 53       	subi	r30, 0x33	; 51
     d46:	fd 4f       	sbci	r31, 0xFD	; 253
     d48:	11 82       	std	Z+1, r1	; 0x01
     d4a:	10 82       	st	Z, r1
      data4[i] = 0;
     d4c:	2f 51       	subi	r18, 0x1F	; 31
     d4e:	3d 4f       	sbci	r19, 0xFD	; 253
     d50:	f9 01       	movw	r30, r18
     d52:	11 82       	std	Z+1, r1	; 0x01
     d54:	10 82       	st	Z, r1
    int i;
    ch0 = 0;
    ch2 = 0;
    ch4 = 0;
    
    for(i=0;i<10;i++){
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	8a 30       	cpi	r24, 0x0A	; 10
     d5a:	91 05       	cpc	r25, r1
     d5c:	31 f7       	brne	.-52     	; 0xd2a <sys_init+0x1c>
       buf[i] = 0;
      data0[i] = 0;
      data2[i] = 0;
      data4[i] = 0;
    }    
}
     d5e:	08 95       	ret

00000d60 <get_adc_data>:

void get_adc_data(void)
{
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
   unsigned int i;
   
   ch0 = ch2 = ch4 = 0;
     d68:	10 92 1b 03 	sts	0x031B, r1
     d6c:	10 92 1a 03 	sts	0x031A, r1
     d70:	10 92 06 03 	sts	0x0306, r1
     d74:	10 92 05 03 	sts	0x0305, r1
     d78:	10 92 56 03 	sts	0x0356, r1
     d7c:	10 92 55 03 	sts	0x0355, r1
     d80:	20 e1       	ldi	r18, 0x10	; 16
     d82:	30 e0       	ldi	r19, 0x00	; 0
   for(i=0;i<16;i++){
//X
      ADCSRA &= 0x7f;
      ADMUX = 0x40;
     d84:	a0 e4       	ldi	r26, 0x40	; 64
      buf[3] = ADCL;
      buf[2] = ADCH & 0x3f;
      ch0 = buf[3]+buf[2]*256;
//Y
      ADCSRA &= 0x7f;
      ADMUX = 0x42;
     d86:	f2 e4       	ldi	r31, 0x42	; 66
      buf[5] = ADCL;
      buf[4] = ADCH & 0x3f;
      ch2 = buf[5]+buf[4]*256;
//Z      
      ADCSRA &= 0x7f;
      ADMUX = 0x44;
     d88:	e4 e4       	ldi	r30, 0x44	; 68
   unsigned int i;
   
   ch0 = ch2 = ch4 = 0;
   for(i=0;i<16;i++){
//X
      ADCSRA &= 0x7f;
     d8a:	80 91 7a 00 	lds	r24, 0x007A
     d8e:	8f 77       	andi	r24, 0x7F	; 127
     d90:	80 93 7a 00 	sts	0x007A, r24
      ADMUX = 0x40;
     d94:	a0 93 7c 00 	sts	0x007C, r26
      ADCSRA |= 0xC0;
     d98:	80 91 7a 00 	lds	r24, 0x007A
     d9c:	80 6c       	ori	r24, 0xC0	; 192
     d9e:	80 93 7a 00 	sts	0x007A, r24

      while((ADCSRA & 0x10) != 0x10);
     da2:	80 91 7a 00 	lds	r24, 0x007A
     da6:	84 ff       	sbrs	r24, 4
     da8:	fc cf       	rjmp	.-8      	; 0xda2 <get_adc_data+0x42>
      buf[3] = ADCL;
     daa:	80 91 78 00 	lds	r24, 0x0078
     dae:	80 93 c1 02 	sts	0x02C1, r24
      buf[2] = ADCH & 0x3f;
     db2:	80 91 79 00 	lds	r24, 0x0079
     db6:	8f 73       	andi	r24, 0x3F	; 63
     db8:	80 93 c0 02 	sts	0x02C0, r24
      ch0 = buf[3]+buf[2]*256;
     dbc:	80 91 c1 02 	lds	r24, 0x02C1
     dc0:	90 91 c0 02 	lds	r25, 0x02C0
     dc4:	d9 2f       	mov	r29, r25
     dc6:	00 e0       	ldi	r16, 0x00	; 0
     dc8:	c0 2f       	mov	r28, r16
     dca:	8e 01       	movw	r16, r28
     dcc:	08 0f       	add	r16, r24
     dce:	11 1d       	adc	r17, r1
     dd0:	10 93 56 03 	sts	0x0356, r17
     dd4:	00 93 55 03 	sts	0x0355, r16
//Y
      ADCSRA &= 0x7f;
     dd8:	80 91 7a 00 	lds	r24, 0x007A
     ddc:	8f 77       	andi	r24, 0x7F	; 127
     dde:	80 93 7a 00 	sts	0x007A, r24
      ADMUX = 0x42;
     de2:	f0 93 7c 00 	sts	0x007C, r31
      ADCSRA |= 0xC0;
     de6:	80 91 7a 00 	lds	r24, 0x007A
     dea:	80 6c       	ori	r24, 0xC0	; 192
     dec:	80 93 7a 00 	sts	0x007A, r24

      while((ADCSRA & 0x10) != 0x10);
     df0:	80 91 7a 00 	lds	r24, 0x007A
     df4:	84 ff       	sbrs	r24, 4
     df6:	fc cf       	rjmp	.-8      	; 0xdf0 <get_adc_data+0x90>
      buf[5] = ADCL;
     df8:	80 91 78 00 	lds	r24, 0x0078
     dfc:	80 93 c3 02 	sts	0x02C3, r24
      buf[4] = ADCH & 0x3f;
     e00:	80 91 79 00 	lds	r24, 0x0079
     e04:	8f 73       	andi	r24, 0x3F	; 63
     e06:	80 93 c2 02 	sts	0x02C2, r24
      ch2 = buf[5]+buf[4]*256;
     e0a:	80 91 c3 02 	lds	r24, 0x02C3
     e0e:	90 91 c2 02 	lds	r25, 0x02C2
     e12:	79 2f       	mov	r23, r25
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	8b 01       	movw	r16, r22
     e18:	08 0f       	add	r16, r24
     e1a:	11 1d       	adc	r17, r1
     e1c:	10 93 06 03 	sts	0x0306, r17
     e20:	00 93 05 03 	sts	0x0305, r16
//Z      
      ADCSRA &= 0x7f;
     e24:	80 91 7a 00 	lds	r24, 0x007A
     e28:	8f 77       	andi	r24, 0x7F	; 127
     e2a:	80 93 7a 00 	sts	0x007A, r24
      ADMUX = 0x44;
     e2e:	e0 93 7c 00 	sts	0x007C, r30
      ADCSRA |= 0xC0;
     e32:	80 91 7a 00 	lds	r24, 0x007A
     e36:	80 6c       	ori	r24, 0xC0	; 192
     e38:	80 93 7a 00 	sts	0x007A, r24
      
      while((ADCSRA & 0x10) != 0x10);
     e3c:	80 91 7a 00 	lds	r24, 0x007A
     e40:	84 ff       	sbrs	r24, 4
     e42:	fc cf       	rjmp	.-8      	; 0xe3c <get_adc_data+0xdc>
      buf[7] = ADCL;
     e44:	80 91 78 00 	lds	r24, 0x0078
     e48:	80 93 c5 02 	sts	0x02C5, r24
      buf[6] = ADCH & 0x3f;
     e4c:	80 91 79 00 	lds	r24, 0x0079
     e50:	8f 73       	andi	r24, 0x3F	; 63
     e52:	80 93 c4 02 	sts	0x02C4, r24
      ch4 = buf[7]+buf[6]*256;      
     e56:	80 91 c5 02 	lds	r24, 0x02C5
     e5a:	90 91 c4 02 	lds	r25, 0x02C4
     e5e:	59 2f       	mov	r21, r25
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	8a 01       	movw	r16, r20
     e64:	08 0f       	add	r16, r24
     e66:	11 1d       	adc	r17, r1
     e68:	10 93 1b 03 	sts	0x031B, r17
     e6c:	00 93 1a 03 	sts	0x031A, r16
     e70:	21 50       	subi	r18, 0x01	; 1
     e72:	30 40       	sbci	r19, 0x00	; 0
void get_adc_data(void)
{
   unsigned int i;
   
   ch0 = ch2 = ch4 = 0;
   for(i=0;i<16;i++){
     e74:	09 f0       	breq	.+2      	; 0xe78 <get_adc_data+0x118>
     e76:	89 cf       	rjmp	.-238    	; 0xd8a <get_adc_data+0x2a>
      while((ADCSRA & 0x10) != 0x10);
      buf[7] = ADCL;
      buf[6] = ADCH & 0x3f;
      ch4 = buf[7]+buf[6]*256;      
   }      
}
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	08 95       	ret

00000e82 <Viking>:

int Viking(void) {
          
      for(i=0;i<10;i++){
     e82:	10 92 1f 03 	sts	0x031F, r1
     e86:	10 92 1e 03 	sts	0x031E, r1
     e8a:	35 c0       	rjmp	.+106    	; 0xef6 <Viking+0x74>
         get_adc_data();
     e8c:	0e 94 b0 06 	call	0xd60	; 0xd60 <get_adc_data>
         data0[i] = ch0;
     e90:	e0 91 1e 03 	lds	r30, 0x031E
     e94:	f0 91 1f 03 	lds	r31, 0x031F
     e98:	80 91 55 03 	lds	r24, 0x0355
     e9c:	90 91 56 03 	lds	r25, 0x0356
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	e8 5d       	subi	r30, 0xD8	; 216
     ea6:	fc 4f       	sbci	r31, 0xFC	; 252
     ea8:	91 83       	std	Z+1, r25	; 0x01
     eaa:	80 83       	st	Z, r24
         data2[i] = ch2;
     eac:	e0 91 1e 03 	lds	r30, 0x031E
     eb0:	f0 91 1f 03 	lds	r31, 0x031F
     eb4:	80 91 05 03 	lds	r24, 0x0305
     eb8:	90 91 06 03 	lds	r25, 0x0306
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	e3 53       	subi	r30, 0x33	; 51
     ec2:	fd 4f       	sbci	r31, 0xFD	; 253
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	80 83       	st	Z, r24
         data4[i] = ch4;         
     ec8:	e0 91 1e 03 	lds	r30, 0x031E
     ecc:	f0 91 1f 03 	lds	r31, 0x031F
     ed0:	80 91 1a 03 	lds	r24, 0x031A
     ed4:	90 91 1b 03 	lds	r25, 0x031B
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	ef 51       	subi	r30, 0x1F	; 31
     ede:	fd 4f       	sbci	r31, 0xFD	; 253
     ee0:	91 83       	std	Z+1, r25	; 0x01
     ee2:	80 83       	st	Z, r24
   }      
}

int Viking(void) {
          
      for(i=0;i<10;i++){
     ee4:	80 91 1e 03 	lds	r24, 0x031E
     ee8:	90 91 1f 03 	lds	r25, 0x031F
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	90 93 1f 03 	sts	0x031F, r25
     ef2:	80 93 1e 03 	sts	0x031E, r24
     ef6:	80 91 1e 03 	lds	r24, 0x031E
     efa:	90 91 1f 03 	lds	r25, 0x031F
     efe:	8a 30       	cpi	r24, 0x0A	; 10
     f00:	91 05       	cpc	r25, r1
     f02:	20 f2       	brcs	.-120    	; 0xe8c <Viking+0xa>
         data0[i] = ch0;
         data2[i] = ch2;
         data4[i] = ch4;         
      }      
      // Sort
      Sort0();
     f04:	0e 94 4d 06 	call	0xc9a	; 0xc9a <Sort0>
      Sort2();
     f08:	0e 94 13 06 	call	0xc26	; 0xc26 <Sort2>
      Sort4();
     f0c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <Sort4>
      
      sum0 = sum2 = sum4 = 0;
     f10:	10 92 19 03 	sts	0x0319, r1
     f14:	10 92 18 03 	sts	0x0318, r1
     f18:	10 92 54 03 	sts	0x0354, r1
     f1c:	10 92 53 03 	sts	0x0353, r1
     f20:	10 92 74 03 	sts	0x0374, r1
     f24:	10 92 73 03 	sts	0x0373, r1
      
      for(i=2;i<9;i++){
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	41 c0       	rjmp	.+130    	; 0xfb0 <Viking+0x12e>
         sum0 = sum0 + data0[i];
     f2e:	20 91 73 03 	lds	r18, 0x0373
     f32:	30 91 74 03 	lds	r19, 0x0374
     f36:	e0 91 1e 03 	lds	r30, 0x031E
     f3a:	f0 91 1f 03 	lds	r31, 0x031F
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	e8 5d       	subi	r30, 0xD8	; 216
     f44:	fc 4f       	sbci	r31, 0xFC	; 252
     f46:	80 81       	ld	r24, Z
     f48:	91 81       	ldd	r25, Z+1	; 0x01
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	90 93 74 03 	sts	0x0374, r25
     f52:	80 93 73 03 	sts	0x0373, r24
         sum2 = sum2 + data2[i];
     f56:	20 91 53 03 	lds	r18, 0x0353
     f5a:	30 91 54 03 	lds	r19, 0x0354
     f5e:	e0 91 1e 03 	lds	r30, 0x031E
     f62:	f0 91 1f 03 	lds	r31, 0x031F
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	e3 53       	subi	r30, 0x33	; 51
     f6c:	fd 4f       	sbci	r31, 0xFD	; 253
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	82 0f       	add	r24, r18
     f74:	93 1f       	adc	r25, r19
     f76:	90 93 54 03 	sts	0x0354, r25
     f7a:	80 93 53 03 	sts	0x0353, r24
         sum4 = sum4 + data4[i];         
     f7e:	20 91 18 03 	lds	r18, 0x0318
     f82:	30 91 19 03 	lds	r19, 0x0319
     f86:	e0 91 1e 03 	lds	r30, 0x031E
     f8a:	f0 91 1f 03 	lds	r31, 0x031F
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	ef 51       	subi	r30, 0x1F	; 31
     f94:	fd 4f       	sbci	r31, 0xFD	; 253
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	90 93 19 03 	sts	0x0319, r25
     fa2:	80 93 18 03 	sts	0x0318, r24
      Sort2();
      Sort4();
      
      sum0 = sum2 = sum4 = 0;
      
      for(i=2;i<9;i++){
     fa6:	80 91 1e 03 	lds	r24, 0x031E
     faa:	90 91 1f 03 	lds	r25, 0x031F
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	90 93 1f 03 	sts	0x031F, r25
     fb4:	80 93 1e 03 	sts	0x031E, r24
     fb8:	80 91 1e 03 	lds	r24, 0x031E
     fbc:	90 91 1f 03 	lds	r25, 0x031F
     fc0:	89 30       	cpi	r24, 0x09	; 9
     fc2:	91 05       	cpc	r25, r1
     fc4:	08 f4       	brcc	.+2      	; 0xfc8 <Viking+0x146>
     fc6:	b3 cf       	rjmp	.-154    	; 0xf2e <Viking+0xac>
         sum0 = sum0 + data0[i];
         sum2 = sum2 + data2[i];
         sum4 = sum4 + data4[i];         
      }

      Final0 = floor(sum0 / 8);
     fc8:	60 91 73 03 	lds	r22, 0x0373
     fcc:	70 91 74 03 	lds	r23, 0x0374
     fd0:	53 e0       	ldi	r21, 0x03	; 3
     fd2:	76 95       	lsr	r23
     fd4:	67 95       	ror	r22
     fd6:	5a 95       	dec	r21
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <Viking+0x150>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__floatunsisf>
     fe2:	0e 94 18 12 	call	0x2430	; 0x2430 <floor>
     fe6:	0e 94 6d 09 	call	0x12da	; 0x12da <__fixunssfsi>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	90 93 1d 03 	sts	0x031D, r25
     ff2:	80 93 1c 03 	sts	0x031C, r24
      Final2 = floor(sum2 / 8);
     ff6:	60 91 53 03 	lds	r22, 0x0353
     ffa:	70 91 54 03 	lds	r23, 0x0354
     ffe:	e3 e0       	ldi	r30, 0x03	; 3
    1000:	76 95       	lsr	r23
    1002:	67 95       	ror	r22
    1004:	ea 95       	dec	r30
    1006:	e1 f7       	brne	.-8      	; 0x1000 <Viking+0x17e>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__floatunsisf>
    1010:	0e 94 18 12 	call	0x2430	; 0x2430 <floor>
    1014:	0e 94 6d 09 	call	0x12da	; 0x12da <__fixunssfsi>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	90 93 cc 02 	sts	0x02CC, r25
    1020:	80 93 cb 02 	sts	0x02CB, r24
      Final4 = floor(sum4 / 8);
    1024:	60 91 18 03 	lds	r22, 0x0318
    1028:	70 91 19 03 	lds	r23, 0x0319
    102c:	f3 e0       	ldi	r31, 0x03	; 3
    102e:	76 95       	lsr	r23
    1030:	67 95       	ror	r22
    1032:	fa 95       	dec	r31
    1034:	e1 f7       	brne	.-8      	; 0x102e <Viking+0x1ac>
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__floatunsisf>
    103e:	0e 94 18 12 	call	0x2430	; 0x2430 <floor>
    1042:	0e 94 6d 09 	call	0x12da	; 0x12da <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	90 93 23 03 	sts	0x0323, r25
    104e:	80 93 22 03 	sts	0x0322, r24
      
      FinalX = Final0 - 350;
    1052:	80 91 1c 03 	lds	r24, 0x031C
    1056:	90 91 1d 03 	lds	r25, 0x031D
    105a:	8e 55       	subi	r24, 0x5E	; 94
    105c:	91 40       	sbci	r25, 0x01	; 1
    105e:	90 93 ca 02 	sts	0x02CA, r25
    1062:	80 93 c9 02 	sts	0x02C9, r24

      return (int)FinalX;
    1066:	80 91 c9 02 	lds	r24, 0x02C9
    106a:	90 91 ca 02 	lds	r25, 0x02CA
}
    106e:	08 95       	ret

00001070 <initPort>:



void initPort(void)
{
   DDRC  = 0xff;   // LCD 데이터 및 명령 
    1070:	8f ef       	ldi	r24, 0xFF	; 255
    1072:	87 b9       	out	0x07, r24	; 7
   DDRG  = 0x0f;   // LCD 제어 출력 (RS, RW, E)
    1074:	9f e0       	ldi	r25, 0x0F	; 15
    1076:	93 bb       	out	0x13, r25	; 19
   DDRD  = 0x00;   // SW 입력설정
    1078:	1a b8       	out	0x0a, r1	; 10
   DDRE  = 0xf0;   // Motor를 이용하기 위한 포트. 필요한 핀 출력 설정
    107a:	90 ef       	ldi	r25, 0xF0	; 240
    107c:	9d b9       	out	0x0d, r25	; 13
   PORTE = 0xff;
    107e:	8e b9       	out	0x0e, r24	; 14
}
    1080:	08 95       	ret

00001082 <initMotor>:

// DC모터 초기화
void initMotor(void)
{
   TCCR3A=   0b10001010;   // COM3A[1:0]=10,  비교일치시 클리어
    1082:	8a e8       	ldi	r24, 0x8A	; 138
    1084:	80 93 90 00 	sts	0x0090, r24
            //               TOP 셋 
            // WGM3[3:0] :     Phase correct PWM mode 
            //                 TOP값은 ICR 레지스터가 결정
   TCCR3B=   0b00010011;   // 64 분주 
    1088:	83 e1       	ldi	r24, 0x13	; 19
    108a:	80 93 91 00 	sts	0x0091, r24
                
                
   ICR3 = FREQ_CLKIO/2/PRESCALE/1000*DC_PERIOD;   
    108e:	85 e3       	ldi	r24, 0x35	; 53
    1090:	9c e0       	ldi	r25, 0x0C	; 12
    1092:	90 93 97 00 	sts	0x0097, r25
    1096:	80 93 96 00 	sts	0x0096, r24
               // 최고값(Top)3125, 40Hz(25msec) 

   OCR3C = 70;
    109a:	86 e4       	ldi	r24, 0x46	; 70
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	90 93 9d 00 	sts	0x009D, r25
    10a2:	80 93 9c 00 	sts	0x009C, r24
}
    10a6:	08 95       	ret

000010a8 <delay>:
void delay(unsigned int k)
{
    unsigned int i;

   for(i=0;i<k;i++); 
}
    10a8:	08 95       	ret

000010aa <us_delay>:

void us_delay(unsigned int us_time)
{
   unsigned int i;

   for(i=0; i<us_time; i++) // 4 cycle +
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	08 c0       	rjmp	.+16     	; 0x10c0 <us_delay+0x16>
   {
       asm("PUSH R0");    // 2 cycle +
    10b0:	0f 92       	push	r0
      asm("POP R0");       // 2 cycle +
    10b2:	0f 90       	pop	r0
      asm("PUSH R0");    // 2 cycle +
    10b4:	0f 92       	push	r0
      asm("POP R0");       // 2 cycle + =12 cycle for 11.0592MHZ
    10b6:	0f 90       	pop	r0
      asm("PUSH R0");    // 2 cycle +
    10b8:	0f 92       	push	r0
      asm("POP R0");       // 2 cycle = 16 cycle = 1us for 16MHz
    10ba:	0f 90       	pop	r0

void us_delay(unsigned int us_time)
{
   unsigned int i;

   for(i=0; i<us_time; i++) // 4 cycle +
    10bc:	2f 5f       	subi	r18, 0xFF	; 255
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    10c0:	28 17       	cp	r18, r24
    10c2:	39 07       	cpc	r19, r25
    10c4:	a9 f7       	brne	.-22     	; 0x10b0 <us_delay+0x6>
      asm("PUSH R0");    // 2 cycle +
      asm("POP R0");       // 2 cycle + =12 cycle for 11.0592MHZ
      asm("PUSH R0");    // 2 cycle +
      asm("POP R0");       // 2 cycle = 16 cycle = 1us for 16MHz
   }
}
    10c6:	08 95       	ret

000010c8 <ms_delay>:

void ms_delay(unsigned int ms_time)
{
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	8c 01       	movw	r16, r24
    unsigned int i;
    
    for(i=0; i<ms_time;i++)
    10d2:	c0 e0       	ldi	r28, 0x00	; 0
    10d4:	d0 e0       	ldi	r29, 0x00	; 0
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <ms_delay+0x1a>
        us_delay(1000);
    10d8:	88 ee       	ldi	r24, 0xE8	; 232
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	0e 94 55 08 	call	0x10aa	; 0x10aa <us_delay>

void ms_delay(unsigned int ms_time)
{
    unsigned int i;
    
    for(i=0; i<ms_time;i++)
    10e0:	21 96       	adiw	r28, 0x01	; 1
    10e2:	c0 17       	cp	r28, r16
    10e4:	d1 07       	cpc	r29, r17
    10e6:	c1 f7       	brne	.-16     	; 0x10d8 <ms_delay+0x10>
        us_delay(1000);
}
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	08 95       	ret

000010f2 <rt_OneStep>:
  static boolean_T OverrunFlag = 0;

  /* Disable interrupts here */

  /* Check for overrun */
  if (OverrunFlag) {
    10f2:	80 91 c8 02 	lds	r24, 0x02C8
    10f6:	88 23       	and	r24, r24
    10f8:	49 f0       	breq	.+18     	; 0x110c <__stack+0xd>
    rtmSetErrorStatus(CAN_NODE_2_AUTO_M, "Overrun");
    10fa:	e0 91 99 01 	lds	r30, 0x0199
    10fe:	f0 91 9a 01 	lds	r31, 0x019A
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	91 83       	std	Z+1, r25	; 0x01
    1108:	80 83       	st	Z, r24
    return;
    110a:	08 95       	ret
  }

  OverrunFlag = TRUE;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	80 93 c8 02 	sts	0x02C8, r24
  /* Re-enable timer or interrupt here */
  /* Set model inputs here */

  //CAN_NODE_2_AUTO_U.distance = (double)distance2;

  CAN_NODE_2_AUTO_U.gyro_x = (double)gyro_x;
    1112:	60 91 4a 03 	lds	r22, 0x034A
    1116:	70 91 4b 03 	lds	r23, 0x034B
    111a:	88 27       	eor	r24, r24
    111c:	77 fd       	sbrc	r23, 7
    111e:	80 95       	com	r24
    1120:	98 2f       	mov	r25, r24
    1122:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__floatsisf>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	80 93 44 03 	sts	0x0344, r24
    112e:	90 93 45 03 	sts	0x0345, r25
    1132:	a0 93 46 03 	sts	0x0346, r26
    1136:	b0 93 47 03 	sts	0x0347, r27
  CAN_NODE_2_AUTO_U.msg1_data_0_ = msg1.data[0];
    113a:	60 91 10 03 	lds	r22, 0x0310
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__floatunsisf>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	80 93 3c 03 	sts	0x033C, r24
    1150:	90 93 3d 03 	sts	0x033D, r25
    1154:	a0 93 3e 03 	sts	0x033E, r26
    1158:	b0 93 3f 03 	sts	0x033F, r27
  CAN_NODE_2_AUTO_U.speed = speed;
    115c:	60 91 57 03 	lds	r22, 0x0357
    1160:	70 91 58 03 	lds	r23, 0x0358
    1164:	88 27       	eor	r24, r24
    1166:	77 fd       	sbrc	r23, 7
    1168:	80 95       	com	r24
    116a:	98 2f       	mov	r25, r24
    116c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__floatsisf>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	80 93 40 03 	sts	0x0340, r24
    1178:	90 93 41 03 	sts	0x0341, r25
    117c:	a0 93 42 03 	sts	0x0342, r26
    1180:	b0 93 43 03 	sts	0x0343, r27
  /* Step the model */
  CAN_NODE_2_AUTO_step();
    1184:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <CAN_NODE_2_AUTO_step>

  /* Get model outputs here */

  /* Outport: '<Root>/msg3_data_0_' */
  msg3.data[0] = CAN_NODE_2_AUTO_Y.msg3_data_0_;
    1188:	60 91 63 03 	lds	r22, 0x0363
    118c:	70 91 64 03 	lds	r23, 0x0364
    1190:	80 91 65 03 	lds	r24, 0x0365
    1194:	90 91 66 03 	lds	r25, 0x0366
    1198:	0e 94 6d 09 	call	0x12da	; 0x12da <__fixunssfsi>
    119c:	60 93 26 01 	sts	0x0126, r22

  /* Outport: '<Root>/ocr3a' */
  OCR3A = CAN_NODE_2_AUTO_Y.ocr3a;
    11a0:	60 91 67 03 	lds	r22, 0x0367
    11a4:	70 91 68 03 	lds	r23, 0x0368
    11a8:	80 91 69 03 	lds	r24, 0x0369
    11ac:	90 91 6a 03 	lds	r25, 0x036A
    11b0:	0e 94 6d 09 	call	0x12da	; 0x12da <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	90 93 99 00 	sts	0x0099, r25
    11bc:	80 93 98 00 	sts	0x0098, r24

  /* Outport: '<Root>/ocr3b' */
  OCR3B = CAN_NODE_2_AUTO_Y.ocr3b;
    11c0:	60 91 6b 03 	lds	r22, 0x036B
    11c4:	70 91 6c 03 	lds	r23, 0x036C
    11c8:	80 91 6d 03 	lds	r24, 0x036D
    11cc:	90 91 6e 03 	lds	r25, 0x036E
    11d0:	0e 94 6d 09 	call	0x12da	; 0x12da <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	90 93 9b 00 	sts	0x009B, r25
    11dc:	80 93 9a 00 	sts	0x009A, r24

  /* Outport: '<Root>/porte' */
  PORTE = CAN_NODE_2_AUTO_Y.porte;
    11e0:	60 91 6f 03 	lds	r22, 0x036F
    11e4:	70 91 70 03 	lds	r23, 0x0370
    11e8:	80 91 71 03 	lds	r24, 0x0371
    11ec:	90 91 72 03 	lds	r25, 0x0372
    11f0:	0e 94 6d 09 	call	0x12da	; 0x12da <__fixunssfsi>
    11f4:	6e b9       	out	0x0e, r22	; 14

  /* Outport: '<Root>/distance_check' */
  //distance_check = CAN_NODE_2_AUTO_Y.distance_check;
  /* Indicate task complete */
  OverrunFlag = FALSE;
    11f6:	10 92 c8 02 	sts	0x02C8, r1
    11fa:	08 95       	ret

000011fc <E_Pulse>:
#define EN_0      (PORTG &= 0xFB)

//LCD Functions =================================================
void E_Pulse(void)
{
	EN_1;
    11fc:	a2 9a       	sbi	0x14, 2	; 20

	us_delay(100);
    11fe:	84 e6       	ldi	r24, 0x64	; 100
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 55 08 	call	0x10aa	; 0x10aa <us_delay>

	EN_0;
    1206:	a2 98       	cbi	0x14, 2	; 20
}
    1208:	08 95       	ret

0000120a <LCD_init>:

void LCD_init(void)
{
	ms_delay(40);
    120a:	88 e2       	ldi	r24, 0x28	; 40
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ms_delay>

	PORTC = 0x38;	// Function Set
    1212:	88 e3       	ldi	r24, 0x38	; 56
    1214:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
    1216:	0e 94 fe 08 	call	0x11fc	; 0x11fc <E_Pulse>
    us_delay(40);
    121a:	88 e2       	ldi	r24, 0x28	; 40
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 55 08 	call	0x10aa	; 0x10aa <us_delay>

	PORTC = 0x0c; // DisPlay ON/OFF Control
    1222:	8c e0       	ldi	r24, 0x0C	; 12
    1224:	88 b9       	out	0x08, r24	; 8
	us_delay(40);
    1226:	88 e2       	ldi	r24, 0x28	; 40
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 55 08 	call	0x10aa	; 0x10aa <us_delay>
	E_Pulse();
    122e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <E_Pulse>
	
	PORTC = 0x01; // Display Clear
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	88 b9       	out	0x08, r24	; 8
	ms_delay(2);
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ms_delay>
	E_Pulse();
    123e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <E_Pulse>

	PORTC = 0x06; // Entry Mode Set
    1242:	86 e0       	ldi	r24, 0x06	; 6
    1244:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
    1246:	0e 94 fe 08 	call	0x11fc	; 0x11fc <E_Pulse>
}
    124a:	08 95       	ret

0000124c <LCD_cmd>:

void LCD_cmd(unsigned char cmd)
{
	LCD_RS_0;
    124c:	a0 98       	cbi	0x14, 0	; 20
	LCD_RW_0;
    124e:	a1 98       	cbi	0x14, 1	; 20
	PORTC=cmd;
    1250:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
    1252:	0e 94 fe 08 	call	0x11fc	; 0x11fc <E_Pulse>
}	
    1256:	08 95       	ret

00001258 <Write_Char>:

void Write_Char(unsigned char buf)
{
	LCD_RS_1;
    1258:	a0 9a       	sbi	0x14, 0	; 20
	LCD_RW_0;
    125a:	a1 98       	cbi	0x14, 1	; 20
	PORTC=buf;
    125c:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
    125e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <E_Pulse>
}	
    1262:	08 95       	ret

00001264 <LCD_Disp>:

void LCD_Disp(char x,char y)
{
	LCD_RS_0;
    1264:	a0 98       	cbi	0x14, 0	; 20
	LCD_RW_0;
    1266:	a1 98       	cbi	0x14, 1	; 20

	if(y==0) PORTC = x + 0x80;
    1268:	66 23       	and	r22, r22
    126a:	11 f4       	brne	.+4      	; 0x1270 <LCD_Disp+0xc>
    126c:	80 58       	subi	r24, 0x80	; 128
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <LCD_Disp+0x12>
	else if(y==1) PORTC = x + 0xc0;
    1270:	61 30       	cpi	r22, 0x01	; 1
    1272:	11 f4       	brne	.+4      	; 0x1278 <LCD_Disp+0x14>
    1274:	80 54       	subi	r24, 0x40	; 64
    1276:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
    1278:	0e 94 fe 08 	call	0x11fc	; 0x11fc <E_Pulse>
}
    127c:	08 95       	ret

0000127e <LCD_Write>:
 
void LCD_Write(char x, char y,char *str)
{
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	00 d0       	rcall	.+0      	; 0x1288 <LCD_Write+0xa>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	LCD_Disp(x,y);
    128c:	49 83       	std	Y+1, r20	; 0x01
    128e:	5a 83       	std	Y+2, r21	; 0x02
    1290:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Disp>
    1294:	49 81       	ldd	r20, Y+1	; 0x01
    1296:	04 2f       	mov	r16, r20
    1298:	5a 81       	ldd	r21, Y+2	; 0x02
    129a:	15 2f       	mov	r17, r21
	while(*str)
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <LCD_Write+0x24>
	Write_Char(*str++);
    129e:	0e 94 2c 09 	call	0x1258	; 0x1258 <Write_Char>
}
 
void LCD_Write(char x, char y,char *str)
{
	LCD_Disp(x,y);
	while(*str)
    12a2:	f8 01       	movw	r30, r16
    12a4:	81 91       	ld	r24, Z+
    12a6:	8f 01       	movw	r16, r30
    12a8:	88 23       	and	r24, r24
    12aa:	c9 f7       	brne	.-14     	; 0x129e <LCD_Write+0x20>
	Write_Char(*str++);
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	08 95       	ret

000012ba <LCD_Write_char>:

void LCD_Write_char(char x, char y, unsigned char ch)
{
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	0f 92       	push	r0
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	LCD_Disp(x,y);
    12c4:	49 83       	std	Y+1, r20	; 0x01
    12c6:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Disp>
	Write_Char(ch);
    12ca:	49 81       	ldd	r20, Y+1	; 0x01
    12cc:	84 2f       	mov	r24, r20
    12ce:	0e 94 2c 09 	call	0x1258	; 0x1258 <Write_Char>
}
    12d2:	0f 90       	pop	r0
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	08 95       	ret

000012da <__fixunssfsi>:
    12da:	cf 92       	push	r12
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	6b 01       	movw	r12, r22
    12e8:	7c 01       	movw	r14, r24
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	5f e4       	ldi	r21, 0x4F	; 79
    12f2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__gesf2>
    12f6:	87 fd       	sbrc	r24, 7
    12f8:	11 c0       	rjmp	.+34     	; 0x131c <__fixunssfsi+0x42>
    12fa:	c7 01       	movw	r24, r14
    12fc:	b6 01       	movw	r22, r12
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	5f e4       	ldi	r21, 0x4F	; 79
    1306:	0e 94 22 0b 	call	0x1644	; 0x1644 <__subsf3>
    130a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__fixsfsi>
    130e:	8b 01       	movw	r16, r22
    1310:	9c 01       	movw	r18, r24
    1312:	00 50       	subi	r16, 0x00	; 0
    1314:	10 40       	sbci	r17, 0x00	; 0
    1316:	20 40       	sbci	r18, 0x00	; 0
    1318:	30 48       	sbci	r19, 0x80	; 128
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <__fixunssfsi+0x4e>
    131c:	c7 01       	movw	r24, r14
    131e:	b6 01       	movw	r22, r12
    1320:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__fixsfsi>
    1324:	8b 01       	movw	r16, r22
    1326:	9c 01       	movw	r18, r24
    1328:	b8 01       	movw	r22, r16
    132a:	c9 01       	movw	r24, r18
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	08 95       	ret

0000133a <_fpadd_parts>:
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e3 ea       	ldi	r30, 0xA3	; 163
    1340:	f9 e0       	ldi	r31, 0x09	; 9
    1342:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__prologue_saves__+0x4>
    1346:	ec 01       	movw	r28, r24
    1348:	4b 01       	movw	r8, r22
    134a:	fa 01       	movw	r30, r20
    134c:	88 81       	ld	r24, Y
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	08 f4       	brcc	.+2      	; 0x1354 <_fpadd_parts+0x1a>
    1352:	3e c1       	rjmp	.+636    	; 0x15d0 <_fpadd_parts+0x296>
    1354:	db 01       	movw	r26, r22
    1356:	9c 91       	ld	r25, X
    1358:	92 30       	cpi	r25, 0x02	; 2
    135a:	08 f4       	brcc	.+2      	; 0x135e <_fpadd_parts+0x24>
    135c:	36 c1       	rjmp	.+620    	; 0x15ca <_fpadd_parts+0x290>
    135e:	84 30       	cpi	r24, 0x04	; 4
    1360:	59 f4       	brne	.+22     	; 0x1378 <_fpadd_parts+0x3e>
    1362:	94 30       	cpi	r25, 0x04	; 4
    1364:	09 f0       	breq	.+2      	; 0x1368 <_fpadd_parts+0x2e>
    1366:	34 c1       	rjmp	.+616    	; 0x15d0 <_fpadd_parts+0x296>
    1368:	99 81       	ldd	r25, Y+1	; 0x01
    136a:	11 96       	adiw	r26, 0x01	; 1
    136c:	8c 91       	ld	r24, X
    136e:	11 97       	sbiw	r26, 0x01	; 1
    1370:	98 17       	cp	r25, r24
    1372:	09 f0       	breq	.+2      	; 0x1376 <_fpadd_parts+0x3c>
    1374:	27 c1       	rjmp	.+590    	; 0x15c4 <_fpadd_parts+0x28a>
    1376:	2c c1       	rjmp	.+600    	; 0x15d0 <_fpadd_parts+0x296>
    1378:	94 30       	cpi	r25, 0x04	; 4
    137a:	09 f4       	brne	.+2      	; 0x137e <_fpadd_parts+0x44>
    137c:	26 c1       	rjmp	.+588    	; 0x15ca <_fpadd_parts+0x290>
    137e:	92 30       	cpi	r25, 0x02	; 2
    1380:	a9 f4       	brne	.+42     	; 0x13ac <_fpadd_parts+0x72>
    1382:	82 30       	cpi	r24, 0x02	; 2
    1384:	09 f0       	breq	.+2      	; 0x1388 <_fpadd_parts+0x4e>
    1386:	24 c1       	rjmp	.+584    	; 0x15d0 <_fpadd_parts+0x296>
    1388:	ce 01       	movw	r24, r28
    138a:	28 e0       	ldi	r18, 0x08	; 8
    138c:	dc 01       	movw	r26, r24
    138e:	0d 90       	ld	r0, X+
    1390:	cd 01       	movw	r24, r26
    1392:	da 01       	movw	r26, r20
    1394:	0d 92       	st	X+, r0
    1396:	ad 01       	movw	r20, r26
    1398:	21 50       	subi	r18, 0x01	; 1
    139a:	c1 f7       	brne	.-16     	; 0x138c <_fpadd_parts+0x52>
    139c:	d4 01       	movw	r26, r8
    139e:	11 96       	adiw	r26, 0x01	; 1
    13a0:	8c 91       	ld	r24, X
    13a2:	11 97       	sbiw	r26, 0x01	; 1
    13a4:	99 81       	ldd	r25, Y+1	; 0x01
    13a6:	89 23       	and	r24, r25
    13a8:	81 83       	std	Z+1, r24	; 0x01
    13aa:	11 c1       	rjmp	.+546    	; 0x15ce <_fpadd_parts+0x294>
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <_fpadd_parts+0x78>
    13b0:	0c c1       	rjmp	.+536    	; 0x15ca <_fpadd_parts+0x290>
    13b2:	aa 80       	ldd	r10, Y+2	; 0x02
    13b4:	bb 80       	ldd	r11, Y+3	; 0x03
    13b6:	db 01       	movw	r26, r22
    13b8:	12 96       	adiw	r26, 0x02	; 2
    13ba:	4d 91       	ld	r20, X+
    13bc:	5c 91       	ld	r21, X
    13be:	13 97       	sbiw	r26, 0x03	; 3
    13c0:	cc 80       	ldd	r12, Y+4	; 0x04
    13c2:	dd 80       	ldd	r13, Y+5	; 0x05
    13c4:	ee 80       	ldd	r14, Y+6	; 0x06
    13c6:	ff 80       	ldd	r15, Y+7	; 0x07
    13c8:	14 96       	adiw	r26, 0x04	; 4
    13ca:	0d 91       	ld	r16, X+
    13cc:	1d 91       	ld	r17, X+
    13ce:	2d 91       	ld	r18, X+
    13d0:	3c 91       	ld	r19, X
    13d2:	17 97       	sbiw	r26, 0x07	; 7
    13d4:	c5 01       	movw	r24, r10
    13d6:	84 1b       	sub	r24, r20
    13d8:	95 0b       	sbc	r25, r21
    13da:	dc 01       	movw	r26, r24
    13dc:	97 ff       	sbrs	r25, 7
    13de:	04 c0       	rjmp	.+8      	; 0x13e8 <_fpadd_parts+0xae>
    13e0:	aa 27       	eor	r26, r26
    13e2:	bb 27       	eor	r27, r27
    13e4:	a8 1b       	sub	r26, r24
    13e6:	b9 0b       	sbc	r27, r25
    13e8:	a0 32       	cpi	r26, 0x20	; 32
    13ea:	b1 05       	cpc	r27, r1
    13ec:	0c f0       	brlt	.+2      	; 0x13f0 <_fpadd_parts+0xb6>
    13ee:	67 c0       	rjmp	.+206    	; 0x14be <_fpadd_parts+0x184>
    13f0:	18 16       	cp	r1, r24
    13f2:	19 06       	cpc	r1, r25
    13f4:	84 f5       	brge	.+96     	; 0x1456 <_fpadd_parts+0x11c>
    13f6:	28 01       	movw	r4, r16
    13f8:	39 01       	movw	r6, r18
    13fa:	0a 2e       	mov	r0, r26
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <_fpadd_parts+0xcc>
    13fe:	76 94       	lsr	r7
    1400:	67 94       	ror	r6
    1402:	57 94       	ror	r5
    1404:	47 94       	ror	r4
    1406:	0a 94       	dec	r0
    1408:	d2 f7       	brpl	.-12     	; 0x13fe <_fpadd_parts+0xc4>
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	04 c0       	rjmp	.+8      	; 0x141c <_fpadd_parts+0xe2>
    1414:	44 0f       	add	r20, r20
    1416:	55 1f       	adc	r21, r21
    1418:	66 1f       	adc	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	aa 95       	dec	r26
    141e:	d2 f7       	brpl	.-12     	; 0x1414 <_fpadd_parts+0xda>
    1420:	41 50       	subi	r20, 0x01	; 1
    1422:	50 40       	sbci	r21, 0x00	; 0
    1424:	60 40       	sbci	r22, 0x00	; 0
    1426:	70 40       	sbci	r23, 0x00	; 0
    1428:	40 23       	and	r20, r16
    142a:	51 23       	and	r21, r17
    142c:	62 23       	and	r22, r18
    142e:	73 23       	and	r23, r19
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a0 e0       	ldi	r26, 0x00	; 0
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	41 15       	cp	r20, r1
    143a:	51 05       	cpc	r21, r1
    143c:	61 05       	cpc	r22, r1
    143e:	71 05       	cpc	r23, r1
    1440:	19 f4       	brne	.+6      	; 0x1448 <_fpadd_parts+0x10e>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	dc 01       	movw	r26, r24
    1448:	8c 01       	movw	r16, r24
    144a:	9d 01       	movw	r18, r26
    144c:	04 29       	or	r16, r4
    144e:	15 29       	or	r17, r5
    1450:	26 29       	or	r18, r6
    1452:	37 29       	or	r19, r7
    1454:	3f c0       	rjmp	.+126    	; 0x14d4 <_fpadd_parts+0x19a>
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	e9 f1       	breq	.+122    	; 0x14d4 <_fpadd_parts+0x19a>
    145a:	aa 0e       	add	r10, r26
    145c:	bb 1e       	adc	r11, r27
    145e:	26 01       	movw	r4, r12
    1460:	37 01       	movw	r6, r14
    1462:	0a 2e       	mov	r0, r26
    1464:	04 c0       	rjmp	.+8      	; 0x146e <_fpadd_parts+0x134>
    1466:	76 94       	lsr	r7
    1468:	67 94       	ror	r6
    146a:	57 94       	ror	r5
    146c:	47 94       	ror	r4
    146e:	0a 94       	dec	r0
    1470:	d2 f7       	brpl	.-12     	; 0x1466 <_fpadd_parts+0x12c>
    1472:	41 e0       	ldi	r20, 0x01	; 1
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <_fpadd_parts+0x14a>
    147c:	44 0f       	add	r20, r20
    147e:	55 1f       	adc	r21, r21
    1480:	66 1f       	adc	r22, r22
    1482:	77 1f       	adc	r23, r23
    1484:	aa 95       	dec	r26
    1486:	d2 f7       	brpl	.-12     	; 0x147c <_fpadd_parts+0x142>
    1488:	41 50       	subi	r20, 0x01	; 1
    148a:	50 40       	sbci	r21, 0x00	; 0
    148c:	60 40       	sbci	r22, 0x00	; 0
    148e:	70 40       	sbci	r23, 0x00	; 0
    1490:	4c 21       	and	r20, r12
    1492:	5d 21       	and	r21, r13
    1494:	6e 21       	and	r22, r14
    1496:	7f 21       	and	r23, r15
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a0 e0       	ldi	r26, 0x00	; 0
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	41 15       	cp	r20, r1
    14a2:	51 05       	cpc	r21, r1
    14a4:	61 05       	cpc	r22, r1
    14a6:	71 05       	cpc	r23, r1
    14a8:	19 f4       	brne	.+6      	; 0x14b0 <_fpadd_parts+0x176>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	dc 01       	movw	r26, r24
    14b0:	6c 01       	movw	r12, r24
    14b2:	7d 01       	movw	r14, r26
    14b4:	c4 28       	or	r12, r4
    14b6:	d5 28       	or	r13, r5
    14b8:	e6 28       	or	r14, r6
    14ba:	f7 28       	or	r15, r7
    14bc:	0b c0       	rjmp	.+22     	; 0x14d4 <_fpadd_parts+0x19a>
    14be:	4a 15       	cp	r20, r10
    14c0:	5b 05       	cpc	r21, r11
    14c2:	24 f4       	brge	.+8      	; 0x14cc <_fpadd_parts+0x192>
    14c4:	00 e0       	ldi	r16, 0x00	; 0
    14c6:	10 e0       	ldi	r17, 0x00	; 0
    14c8:	98 01       	movw	r18, r16
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <_fpadd_parts+0x19a>
    14cc:	5a 01       	movw	r10, r20
    14ce:	cc 24       	eor	r12, r12
    14d0:	dd 24       	eor	r13, r13
    14d2:	76 01       	movw	r14, r12
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	d4 01       	movw	r26, r8
    14d8:	11 96       	adiw	r26, 0x01	; 1
    14da:	9c 91       	ld	r25, X
    14dc:	11 97       	sbiw	r26, 0x01	; 1
    14de:	89 17       	cp	r24, r25
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <_fpadd_parts+0x1aa>
    14e2:	45 c0       	rjmp	.+138    	; 0x156e <_fpadd_parts+0x234>
    14e4:	88 23       	and	r24, r24
    14e6:	29 f0       	breq	.+10     	; 0x14f2 <_fpadd_parts+0x1b8>
    14e8:	0c 19       	sub	r16, r12
    14ea:	1d 09       	sbc	r17, r13
    14ec:	2e 09       	sbc	r18, r14
    14ee:	3f 09       	sbc	r19, r15
    14f0:	08 c0       	rjmp	.+16     	; 0x1502 <_fpadd_parts+0x1c8>
    14f2:	d7 01       	movw	r26, r14
    14f4:	c6 01       	movw	r24, r12
    14f6:	80 1b       	sub	r24, r16
    14f8:	91 0b       	sbc	r25, r17
    14fa:	a2 0b       	sbc	r26, r18
    14fc:	b3 0b       	sbc	r27, r19
    14fe:	8c 01       	movw	r16, r24
    1500:	9d 01       	movw	r18, r26
    1502:	37 fd       	sbrc	r19, 7
    1504:	04 c0       	rjmp	.+8      	; 0x150e <_fpadd_parts+0x1d4>
    1506:	11 82       	std	Z+1, r1	; 0x01
    1508:	b3 82       	std	Z+3, r11	; 0x03
    150a:	a2 82       	std	Z+2, r10	; 0x02
    150c:	0b c0       	rjmp	.+22     	; 0x1524 <_fpadd_parts+0x1ea>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	81 83       	std	Z+1, r24	; 0x01
    1512:	b3 82       	std	Z+3, r11	; 0x03
    1514:	a2 82       	std	Z+2, r10	; 0x02
    1516:	30 95       	com	r19
    1518:	20 95       	com	r18
    151a:	10 95       	com	r17
    151c:	01 95       	neg	r16
    151e:	1f 4f       	sbci	r17, 0xFF	; 255
    1520:	2f 4f       	sbci	r18, 0xFF	; 255
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	04 83       	std	Z+4, r16	; 0x04
    1526:	15 83       	std	Z+5, r17	; 0x05
    1528:	26 83       	std	Z+6, r18	; 0x06
    152a:	37 83       	std	Z+7, r19	; 0x07
    152c:	0d c0       	rjmp	.+26     	; 0x1548 <_fpadd_parts+0x20e>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	aa 1f       	adc	r26, r26
    1534:	bb 1f       	adc	r27, r27
    1536:	84 83       	std	Z+4, r24	; 0x04
    1538:	95 83       	std	Z+5, r25	; 0x05
    153a:	a6 83       	std	Z+6, r26	; 0x06
    153c:	b7 83       	std	Z+7, r27	; 0x07
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	93 83       	std	Z+3, r25	; 0x03
    1546:	82 83       	std	Z+2, r24	; 0x02
    1548:	84 81       	ldd	r24, Z+4	; 0x04
    154a:	95 81       	ldd	r25, Z+5	; 0x05
    154c:	a6 81       	ldd	r26, Z+6	; 0x06
    154e:	b7 81       	ldd	r27, Z+7	; 0x07
    1550:	ac 01       	movw	r20, r24
    1552:	bd 01       	movw	r22, r26
    1554:	41 50       	subi	r20, 0x01	; 1
    1556:	50 40       	sbci	r21, 0x00	; 0
    1558:	60 40       	sbci	r22, 0x00	; 0
    155a:	70 40       	sbci	r23, 0x00	; 0
    155c:	4f 3f       	cpi	r20, 0xFF	; 255
    155e:	2f ef       	ldi	r18, 0xFF	; 255
    1560:	52 07       	cpc	r21, r18
    1562:	2f ef       	ldi	r18, 0xFF	; 255
    1564:	62 07       	cpc	r22, r18
    1566:	2f e3       	ldi	r18, 0x3F	; 63
    1568:	72 07       	cpc	r23, r18
    156a:	08 f3       	brcs	.-62     	; 0x152e <_fpadd_parts+0x1f4>
    156c:	0b c0       	rjmp	.+22     	; 0x1584 <_fpadd_parts+0x24a>
    156e:	81 83       	std	Z+1, r24	; 0x01
    1570:	b3 82       	std	Z+3, r11	; 0x03
    1572:	a2 82       	std	Z+2, r10	; 0x02
    1574:	0c 0d       	add	r16, r12
    1576:	1d 1d       	adc	r17, r13
    1578:	2e 1d       	adc	r18, r14
    157a:	3f 1d       	adc	r19, r15
    157c:	04 83       	std	Z+4, r16	; 0x04
    157e:	15 83       	std	Z+5, r17	; 0x05
    1580:	26 83       	std	Z+6, r18	; 0x06
    1582:	37 83       	std	Z+7, r19	; 0x07
    1584:	83 e0       	ldi	r24, 0x03	; 3
    1586:	80 83       	st	Z, r24
    1588:	44 81       	ldd	r20, Z+4	; 0x04
    158a:	55 81       	ldd	r21, Z+5	; 0x05
    158c:	66 81       	ldd	r22, Z+6	; 0x06
    158e:	77 81       	ldd	r23, Z+7	; 0x07
    1590:	77 ff       	sbrs	r23, 7
    1592:	1d c0       	rjmp	.+58     	; 0x15ce <_fpadd_parts+0x294>
    1594:	db 01       	movw	r26, r22
    1596:	ca 01       	movw	r24, r20
    1598:	81 70       	andi	r24, 0x01	; 1
    159a:	90 70       	andi	r25, 0x00	; 0
    159c:	a0 70       	andi	r26, 0x00	; 0
    159e:	b0 70       	andi	r27, 0x00	; 0
    15a0:	76 95       	lsr	r23
    15a2:	67 95       	ror	r22
    15a4:	57 95       	ror	r21
    15a6:	47 95       	ror	r20
    15a8:	84 2b       	or	r24, r20
    15aa:	95 2b       	or	r25, r21
    15ac:	a6 2b       	or	r26, r22
    15ae:	b7 2b       	or	r27, r23
    15b0:	84 83       	std	Z+4, r24	; 0x04
    15b2:	95 83       	std	Z+5, r25	; 0x05
    15b4:	a6 83       	std	Z+6, r26	; 0x06
    15b6:	b7 83       	std	Z+7, r27	; 0x07
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	93 83       	std	Z+3, r25	; 0x03
    15c0:	82 83       	std	Z+2, r24	; 0x02
    15c2:	05 c0       	rjmp	.+10     	; 0x15ce <_fpadd_parts+0x294>
    15c4:	cb e9       	ldi	r28, 0x9B	; 155
    15c6:	d1 e0       	ldi	r29, 0x01	; 1
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <_fpadd_parts+0x296>
    15ca:	e4 01       	movw	r28, r8
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <_fpadd_parts+0x296>
    15ce:	ef 01       	movw	r28, r30
    15d0:	ce 01       	movw	r24, r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	e0 e1       	ldi	r30, 0x10	; 16
    15d8:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__epilogue_restores__+0x4>

000015dc <__addsf3>:
    15dc:	a0 e2       	ldi	r26, 0x20	; 32
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e4 ef       	ldi	r30, 0xF4	; 244
    15e2:	fa e0       	ldi	r31, 0x0A	; 10
    15e4:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__prologue_saves__+0x20>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	af 83       	std	Y+7, r26	; 0x07
    15f2:	b8 87       	std	Y+8, r27	; 0x08
    15f4:	29 83       	std	Y+1, r18	; 0x01
    15f6:	3a 83       	std	Y+2, r19	; 0x02
    15f8:	4b 83       	std	Y+3, r20	; 0x03
    15fa:	5c 83       	std	Y+4, r21	; 0x04
    15fc:	ce 01       	movw	r24, r28
    15fe:	05 96       	adiw	r24, 0x05	; 5
    1600:	be 01       	movw	r22, r28
    1602:	67 5e       	subi	r22, 0xE7	; 231
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    160a:	ce 01       	movw	r24, r28
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	be 01       	movw	r22, r28
    1610:	6f 5e       	subi	r22, 0xEF	; 239
    1612:	7f 4f       	sbci	r23, 0xFF	; 255
    1614:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1618:	ce 01       	movw	r24, r28
    161a:	49 96       	adiw	r24, 0x19	; 25
    161c:	be 01       	movw	r22, r28
    161e:	6f 5e       	subi	r22, 0xEF	; 239
    1620:	7f 4f       	sbci	r23, 0xFF	; 255
    1622:	ae 01       	movw	r20, r28
    1624:	47 5f       	subi	r20, 0xF7	; 247
    1626:	5f 4f       	sbci	r21, 0xFF	; 255
    1628:	0e 94 9d 09 	call	0x133a	; 0x133a <_fpadd_parts>
    162c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__pack_f>
    1630:	46 2f       	mov	r20, r22
    1632:	57 2f       	mov	r21, r23
    1634:	68 2f       	mov	r22, r24
    1636:	79 2f       	mov	r23, r25
    1638:	cb 01       	movw	r24, r22
    163a:	ba 01       	movw	r22, r20
    163c:	a0 96       	adiw	r28, 0x20	; 32
    163e:	e2 e0       	ldi	r30, 0x02	; 2
    1640:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__epilogue_restores__+0x20>

00001644 <__subsf3>:
    1644:	a0 e2       	ldi	r26, 0x20	; 32
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e8 e2       	ldi	r30, 0x28	; 40
    164a:	fb e0       	ldi	r31, 0x0B	; 11
    164c:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__prologue_saves__+0x20>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	af 83       	std	Y+7, r26	; 0x07
    165a:	b8 87       	std	Y+8, r27	; 0x08
    165c:	29 83       	std	Y+1, r18	; 0x01
    165e:	3a 83       	std	Y+2, r19	; 0x02
    1660:	4b 83       	std	Y+3, r20	; 0x03
    1662:	5c 83       	std	Y+4, r21	; 0x04
    1664:	ce 01       	movw	r24, r28
    1666:	05 96       	adiw	r24, 0x05	; 5
    1668:	be 01       	movw	r22, r28
    166a:	67 5e       	subi	r22, 0xE7	; 231
    166c:	7f 4f       	sbci	r23, 0xFF	; 255
    166e:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1672:	ce 01       	movw	r24, r28
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	be 01       	movw	r22, r28
    1678:	6f 5e       	subi	r22, 0xEF	; 239
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1680:	8a 89       	ldd	r24, Y+18	; 0x12
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	89 27       	eor	r24, r25
    1686:	8a 8b       	std	Y+18, r24	; 0x12
    1688:	ce 01       	movw	r24, r28
    168a:	49 96       	adiw	r24, 0x19	; 25
    168c:	be 01       	movw	r22, r28
    168e:	6f 5e       	subi	r22, 0xEF	; 239
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	ae 01       	movw	r20, r28
    1694:	47 5f       	subi	r20, 0xF7	; 247
    1696:	5f 4f       	sbci	r21, 0xFF	; 255
    1698:	0e 94 9d 09 	call	0x133a	; 0x133a <_fpadd_parts>
    169c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__pack_f>
    16a0:	46 2f       	mov	r20, r22
    16a2:	57 2f       	mov	r21, r23
    16a4:	68 2f       	mov	r22, r24
    16a6:	79 2f       	mov	r23, r25
    16a8:	cb 01       	movw	r24, r22
    16aa:	ba 01       	movw	r22, r20
    16ac:	a0 96       	adiw	r28, 0x20	; 32
    16ae:	e2 e0       	ldi	r30, 0x02	; 2
    16b0:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__epilogue_restores__+0x20>

000016b4 <__mulsf3>:
    16b4:	a0 e2       	ldi	r26, 0x20	; 32
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e0 e6       	ldi	r30, 0x60	; 96
    16ba:	fb e0       	ldi	r31, 0x0B	; 11
    16bc:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__prologue_saves__+0x4>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	9e 83       	std	Y+6, r25	; 0x06
    16c8:	af 83       	std	Y+7, r26	; 0x07
    16ca:	b8 87       	std	Y+8, r27	; 0x08
    16cc:	29 83       	std	Y+1, r18	; 0x01
    16ce:	3a 83       	std	Y+2, r19	; 0x02
    16d0:	4b 83       	std	Y+3, r20	; 0x03
    16d2:	5c 83       	std	Y+4, r21	; 0x04
    16d4:	ce 01       	movw	r24, r28
    16d6:	05 96       	adiw	r24, 0x05	; 5
    16d8:	be 01       	movw	r22, r28
    16da:	67 5e       	subi	r22, 0xE7	; 231
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    16e2:	ce 01       	movw	r24, r28
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	be 01       	movw	r22, r28
    16e8:	6f 5e       	subi	r22, 0xEF	; 239
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    16f0:	99 8d       	ldd	r25, Y+25	; 0x19
    16f2:	92 30       	cpi	r25, 0x02	; 2
    16f4:	78 f0       	brcs	.+30     	; 0x1714 <__mulsf3+0x60>
    16f6:	89 89       	ldd	r24, Y+17	; 0x11
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	c0 f0       	brcs	.+48     	; 0x172c <__mulsf3+0x78>
    16fc:	94 30       	cpi	r25, 0x04	; 4
    16fe:	19 f4       	brne	.+6      	; 0x1706 <__mulsf3+0x52>
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	41 f4       	brne	.+16     	; 0x1714 <__mulsf3+0x60>
    1704:	ca c0       	rjmp	.+404    	; 0x189a <__mulsf3+0x1e6>
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	19 f4       	brne	.+6      	; 0x1710 <__mulsf3+0x5c>
    170a:	92 30       	cpi	r25, 0x02	; 2
    170c:	79 f4       	brne	.+30     	; 0x172c <__mulsf3+0x78>
    170e:	c5 c0       	rjmp	.+394    	; 0x189a <__mulsf3+0x1e6>
    1710:	92 30       	cpi	r25, 0x02	; 2
    1712:	51 f4       	brne	.+20     	; 0x1728 <__mulsf3+0x74>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1718:	9a 89       	ldd	r25, Y+18	; 0x12
    171a:	29 17       	cp	r18, r25
    171c:	09 f4       	brne	.+2      	; 0x1720 <__mulsf3+0x6c>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	8a 8f       	std	Y+26, r24	; 0x1a
    1722:	ce 01       	movw	r24, r28
    1724:	49 96       	adiw	r24, 0x19	; 25
    1726:	bb c0       	rjmp	.+374    	; 0x189e <__mulsf3+0x1ea>
    1728:	82 30       	cpi	r24, 0x02	; 2
    172a:	51 f4       	brne	.+20     	; 0x1740 <__mulsf3+0x8c>
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1730:	9a 89       	ldd	r25, Y+18	; 0x12
    1732:	29 17       	cp	r18, r25
    1734:	09 f4       	brne	.+2      	; 0x1738 <__mulsf3+0x84>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	8a 8b       	std	Y+18, r24	; 0x12
    173a:	ce 01       	movw	r24, r28
    173c:	41 96       	adiw	r24, 0x11	; 17
    173e:	af c0       	rjmp	.+350    	; 0x189e <__mulsf3+0x1ea>
    1740:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1742:	5e 8c       	ldd	r5, Y+30	; 0x1e
    1744:	6f 8c       	ldd	r6, Y+31	; 0x1f
    1746:	78 a0       	lds	r23, 0x88
    1748:	0d 89       	ldd	r16, Y+21	; 0x15
    174a:	1e 89       	ldd	r17, Y+22	; 0x16
    174c:	2f 89       	ldd	r18, Y+23	; 0x17
    174e:	38 8d       	ldd	r19, Y+24	; 0x18
    1750:	e0 e2       	ldi	r30, 0x20	; 32
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	ba 01       	movw	r22, r20
    175a:	88 24       	eor	r8, r8
    175c:	99 24       	eor	r9, r9
    175e:	54 01       	movw	r10, r8
    1760:	cc 24       	eor	r12, r12
    1762:	dd 24       	eor	r13, r13
    1764:	76 01       	movw	r14, r12
    1766:	c2 01       	movw	r24, r4
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	d1 f0       	breq	.+52     	; 0x17a4 <__mulsf3+0xf0>
    1770:	c0 0e       	add	r12, r16
    1772:	d1 1e       	adc	r13, r17
    1774:	e2 1e       	adc	r14, r18
    1776:	f3 1e       	adc	r15, r19
    1778:	db 01       	movw	r26, r22
    177a:	ca 01       	movw	r24, r20
    177c:	88 0d       	add	r24, r8
    177e:	99 1d       	adc	r25, r9
    1780:	aa 1d       	adc	r26, r10
    1782:	bb 1d       	adc	r27, r11
    1784:	41 e0       	ldi	r20, 0x01	; 1
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	c0 16       	cp	r12, r16
    178e:	d1 06       	cpc	r13, r17
    1790:	e2 06       	cpc	r14, r18
    1792:	f3 06       	cpc	r15, r19
    1794:	18 f0       	brcs	.+6      	; 0x179c <__mulsf3+0xe8>
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	ba 01       	movw	r22, r20
    179c:	48 0f       	add	r20, r24
    179e:	59 1f       	adc	r21, r25
    17a0:	6a 1f       	adc	r22, r26
    17a2:	7b 1f       	adc	r23, r27
    17a4:	88 0c       	add	r8, r8
    17a6:	99 1c       	adc	r9, r9
    17a8:	aa 1c       	adc	r10, r10
    17aa:	bb 1c       	adc	r11, r11
    17ac:	37 ff       	sbrs	r19, 7
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <__mulsf3+0x10c>
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a0 e0       	ldi	r26, 0x00	; 0
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	88 2a       	or	r8, r24
    17ba:	99 2a       	or	r9, r25
    17bc:	aa 2a       	or	r10, r26
    17be:	bb 2a       	or	r11, r27
    17c0:	00 0f       	add	r16, r16
    17c2:	11 1f       	adc	r17, r17
    17c4:	22 1f       	adc	r18, r18
    17c6:	33 1f       	adc	r19, r19
    17c8:	76 94       	lsr	r7
    17ca:	67 94       	ror	r6
    17cc:	57 94       	ror	r5
    17ce:	47 94       	ror	r4
    17d0:	31 97       	sbiw	r30, 0x01	; 1
    17d2:	49 f6       	brne	.-110    	; 0x1766 <__mulsf3+0xb2>
    17d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d8:	2b 89       	ldd	r18, Y+19	; 0x13
    17da:	3c 89       	ldd	r19, Y+20	; 0x14
    17dc:	82 0f       	add	r24, r18
    17de:	93 1f       	adc	r25, r19
    17e0:	02 96       	adiw	r24, 0x02	; 2
    17e2:	9c 87       	std	Y+12, r25	; 0x0c
    17e4:	8b 87       	std	Y+11, r24	; 0x0b
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	2a 8d       	ldd	r18, Y+26	; 0x1a
    17ea:	9a 89       	ldd	r25, Y+18	; 0x12
    17ec:	29 17       	cp	r18, r25
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <__mulsf3+0x13e>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	8a 87       	std	Y+10, r24	; 0x0a
    17f4:	2b 85       	ldd	r18, Y+11	; 0x0b
    17f6:	3c 85       	ldd	r19, Y+12	; 0x0c
    17f8:	17 c0       	rjmp	.+46     	; 0x1828 <__mulsf3+0x174>
    17fa:	ca 01       	movw	r24, r20
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	61 f0       	breq	.+24     	; 0x181c <__mulsf3+0x168>
    1804:	f6 94       	lsr	r15
    1806:	e7 94       	ror	r14
    1808:	d7 94       	ror	r13
    180a:	c7 94       	ror	r12
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e8       	ldi	r27, 0x80	; 128
    1814:	c8 2a       	or	r12, r24
    1816:	d9 2a       	or	r13, r25
    1818:	ea 2a       	or	r14, r26
    181a:	fb 2a       	or	r15, r27
    181c:	76 95       	lsr	r23
    181e:	67 95       	ror	r22
    1820:	57 95       	ror	r21
    1822:	47 95       	ror	r20
    1824:	2f 5f       	subi	r18, 0xFF	; 255
    1826:	3f 4f       	sbci	r19, 0xFF	; 255
    1828:	77 fd       	sbrc	r23, 7
    182a:	e7 cf       	rjmp	.-50     	; 0x17fa <__mulsf3+0x146>
    182c:	c9 01       	movw	r24, r18
    182e:	0b c0       	rjmp	.+22     	; 0x1846 <__mulsf3+0x192>
    1830:	44 0f       	add	r20, r20
    1832:	55 1f       	adc	r21, r21
    1834:	66 1f       	adc	r22, r22
    1836:	77 1f       	adc	r23, r23
    1838:	f7 fc       	sbrc	r15, 7
    183a:	41 60       	ori	r20, 0x01	; 1
    183c:	cc 0c       	add	r12, r12
    183e:	dd 1c       	adc	r13, r13
    1840:	ee 1c       	adc	r14, r14
    1842:	ff 1c       	adc	r15, r15
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	40 30       	cpi	r20, 0x00	; 0
    1848:	a0 e0       	ldi	r26, 0x00	; 0
    184a:	5a 07       	cpc	r21, r26
    184c:	a0 e0       	ldi	r26, 0x00	; 0
    184e:	6a 07       	cpc	r22, r26
    1850:	a0 e4       	ldi	r26, 0x40	; 64
    1852:	7a 07       	cpc	r23, r26
    1854:	68 f3       	brcs	.-38     	; 0x1830 <__mulsf3+0x17c>
    1856:	8b 87       	std	Y+11, r24	; 0x0b
    1858:	9c 87       	std	Y+12, r25	; 0x0c
    185a:	db 01       	movw	r26, r22
    185c:	ca 01       	movw	r24, r20
    185e:	8f 77       	andi	r24, 0x7F	; 127
    1860:	90 70       	andi	r25, 0x00	; 0
    1862:	a0 70       	andi	r26, 0x00	; 0
    1864:	b0 70       	andi	r27, 0x00	; 0
    1866:	80 34       	cpi	r24, 0x40	; 64
    1868:	91 05       	cpc	r25, r1
    186a:	a1 05       	cpc	r26, r1
    186c:	b1 05       	cpc	r27, r1
    186e:	61 f4       	brne	.+24     	; 0x1888 <__mulsf3+0x1d4>
    1870:	47 fd       	sbrc	r20, 7
    1872:	0a c0       	rjmp	.+20     	; 0x1888 <__mulsf3+0x1d4>
    1874:	c1 14       	cp	r12, r1
    1876:	d1 04       	cpc	r13, r1
    1878:	e1 04       	cpc	r14, r1
    187a:	f1 04       	cpc	r15, r1
    187c:	29 f0       	breq	.+10     	; 0x1888 <__mulsf3+0x1d4>
    187e:	40 5c       	subi	r20, 0xC0	; 192
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	6f 4f       	sbci	r22, 0xFF	; 255
    1884:	7f 4f       	sbci	r23, 0xFF	; 255
    1886:	40 78       	andi	r20, 0x80	; 128
    1888:	4d 87       	std	Y+13, r20	; 0x0d
    188a:	5e 87       	std	Y+14, r21	; 0x0e
    188c:	6f 87       	std	Y+15, r22	; 0x0f
    188e:	78 8b       	std	Y+16, r23	; 0x10
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	89 87       	std	Y+9, r24	; 0x09
    1894:	ce 01       	movw	r24, r28
    1896:	09 96       	adiw	r24, 0x09	; 9
    1898:	02 c0       	rjmp	.+4      	; 0x189e <__mulsf3+0x1ea>
    189a:	8b e9       	ldi	r24, 0x9B	; 155
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__pack_f>
    18a2:	46 2f       	mov	r20, r22
    18a4:	57 2f       	mov	r21, r23
    18a6:	68 2f       	mov	r22, r24
    18a8:	79 2f       	mov	r23, r25
    18aa:	cb 01       	movw	r24, r22
    18ac:	ba 01       	movw	r22, r20
    18ae:	a0 96       	adiw	r28, 0x20	; 32
    18b0:	e0 e1       	ldi	r30, 0x10	; 16
    18b2:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__epilogue_restores__+0x4>

000018b6 <__divsf3>:
    18b6:	a8 e1       	ldi	r26, 0x18	; 24
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e1 e6       	ldi	r30, 0x61	; 97
    18bc:	fc e0       	ldi	r31, 0x0C	; 12
    18be:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__prologue_saves__+0x14>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8d 83       	std	Y+5, r24	; 0x05
    18c8:	9e 83       	std	Y+6, r25	; 0x06
    18ca:	af 83       	std	Y+7, r26	; 0x07
    18cc:	b8 87       	std	Y+8, r27	; 0x08
    18ce:	29 83       	std	Y+1, r18	; 0x01
    18d0:	3a 83       	std	Y+2, r19	; 0x02
    18d2:	4b 83       	std	Y+3, r20	; 0x03
    18d4:	5c 83       	std	Y+4, r21	; 0x04
    18d6:	ce 01       	movw	r24, r28
    18d8:	05 96       	adiw	r24, 0x05	; 5
    18da:	be 01       	movw	r22, r28
    18dc:	6f 5e       	subi	r22, 0xEF	; 239
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    18e4:	ce 01       	movw	r24, r28
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	be 01       	movw	r22, r28
    18ea:	67 5f       	subi	r22, 0xF7	; 247
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255
    18ee:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    18f2:	99 89       	ldd	r25, Y+17	; 0x11
    18f4:	92 30       	cpi	r25, 0x02	; 2
    18f6:	08 f4       	brcc	.+2      	; 0x18fa <__divsf3+0x44>
    18f8:	75 c0       	rjmp	.+234    	; 0x19e4 <__divsf3+0x12e>
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	82 30       	cpi	r24, 0x02	; 2
    18fe:	08 f4       	brcc	.+2      	; 0x1902 <__divsf3+0x4c>
    1900:	74 c0       	rjmp	.+232    	; 0x19ea <__divsf3+0x134>
    1902:	2a 89       	ldd	r18, Y+18	; 0x12
    1904:	3a 85       	ldd	r19, Y+10	; 0x0a
    1906:	23 27       	eor	r18, r19
    1908:	2a 8b       	std	Y+18, r18	; 0x12
    190a:	94 30       	cpi	r25, 0x04	; 4
    190c:	11 f0       	breq	.+4      	; 0x1912 <__divsf3+0x5c>
    190e:	92 30       	cpi	r25, 0x02	; 2
    1910:	21 f4       	brne	.+8      	; 0x191a <__divsf3+0x64>
    1912:	98 17       	cp	r25, r24
    1914:	09 f0       	breq	.+2      	; 0x1918 <__divsf3+0x62>
    1916:	66 c0       	rjmp	.+204    	; 0x19e4 <__divsf3+0x12e>
    1918:	6b c0       	rjmp	.+214    	; 0x19f0 <__divsf3+0x13a>
    191a:	84 30       	cpi	r24, 0x04	; 4
    191c:	39 f4       	brne	.+14     	; 0x192c <__divsf3+0x76>
    191e:	1d 8a       	std	Y+21, r1	; 0x15
    1920:	1e 8a       	std	Y+22, r1	; 0x16
    1922:	1f 8a       	std	Y+23, r1	; 0x17
    1924:	18 8e       	std	Y+24, r1	; 0x18
    1926:	1c 8a       	std	Y+20, r1	; 0x14
    1928:	1b 8a       	std	Y+19, r1	; 0x13
    192a:	5c c0       	rjmp	.+184    	; 0x19e4 <__divsf3+0x12e>
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	19 f4       	brne	.+6      	; 0x1936 <__divsf3+0x80>
    1930:	84 e0       	ldi	r24, 0x04	; 4
    1932:	89 8b       	std	Y+17, r24	; 0x11
    1934:	57 c0       	rjmp	.+174    	; 0x19e4 <__divsf3+0x12e>
    1936:	2b 89       	ldd	r18, Y+19	; 0x13
    1938:	3c 89       	ldd	r19, Y+20	; 0x14
    193a:	8b 85       	ldd	r24, Y+11	; 0x0b
    193c:	9c 85       	ldd	r25, Y+12	; 0x0c
    193e:	28 1b       	sub	r18, r24
    1940:	39 0b       	sbc	r19, r25
    1942:	3c 8b       	std	Y+20, r19	; 0x14
    1944:	2b 8b       	std	Y+19, r18	; 0x13
    1946:	8d 89       	ldd	r24, Y+21	; 0x15
    1948:	9e 89       	ldd	r25, Y+22	; 0x16
    194a:	af 89       	ldd	r26, Y+23	; 0x17
    194c:	b8 8d       	ldd	r27, Y+24	; 0x18
    194e:	cd 84       	ldd	r12, Y+13	; 0x0d
    1950:	de 84       	ldd	r13, Y+14	; 0x0e
    1952:	ef 84       	ldd	r14, Y+15	; 0x0f
    1954:	f8 88       	ldd	r15, Y+16	; 0x10
    1956:	8c 15       	cp	r24, r12
    1958:	9d 05       	cpc	r25, r13
    195a:	ae 05       	cpc	r26, r14
    195c:	bf 05       	cpc	r27, r15
    195e:	40 f4       	brcc	.+16     	; 0x1970 <__divsf3+0xba>
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	aa 1f       	adc	r26, r26
    1966:	bb 1f       	adc	r27, r27
    1968:	21 50       	subi	r18, 0x01	; 1
    196a:	30 40       	sbci	r19, 0x00	; 0
    196c:	3c 8b       	std	Y+20, r19	; 0x14
    196e:	2b 8b       	std	Y+19, r18	; 0x13
    1970:	ef e1       	ldi	r30, 0x1F	; 31
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	00 e0       	ldi	r16, 0x00	; 0
    1976:	10 e0       	ldi	r17, 0x00	; 0
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e4       	ldi	r19, 0x40	; 64
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	ba 01       	movw	r22, r20
    1982:	8c 15       	cp	r24, r12
    1984:	9d 05       	cpc	r25, r13
    1986:	ae 05       	cpc	r26, r14
    1988:	bf 05       	cpc	r27, r15
    198a:	40 f0       	brcs	.+16     	; 0x199c <__divsf3+0xe6>
    198c:	40 2b       	or	r20, r16
    198e:	51 2b       	or	r21, r17
    1990:	62 2b       	or	r22, r18
    1992:	73 2b       	or	r23, r19
    1994:	8c 19       	sub	r24, r12
    1996:	9d 09       	sbc	r25, r13
    1998:	ae 09       	sbc	r26, r14
    199a:	bf 09       	sbc	r27, r15
    199c:	36 95       	lsr	r19
    199e:	27 95       	ror	r18
    19a0:	17 95       	ror	r17
    19a2:	07 95       	ror	r16
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	aa 1f       	adc	r26, r26
    19aa:	bb 1f       	adc	r27, r27
    19ac:	31 97       	sbiw	r30, 0x01	; 1
    19ae:	49 f7       	brne	.-46     	; 0x1982 <__divsf3+0xcc>
    19b0:	8a 01       	movw	r16, r20
    19b2:	9b 01       	movw	r18, r22
    19b4:	0f 77       	andi	r16, 0x7F	; 127
    19b6:	10 70       	andi	r17, 0x00	; 0
    19b8:	20 70       	andi	r18, 0x00	; 0
    19ba:	30 70       	andi	r19, 0x00	; 0
    19bc:	00 34       	cpi	r16, 0x40	; 64
    19be:	11 05       	cpc	r17, r1
    19c0:	21 05       	cpc	r18, r1
    19c2:	31 05       	cpc	r19, r1
    19c4:	59 f4       	brne	.+22     	; 0x19dc <__divsf3+0x126>
    19c6:	47 fd       	sbrc	r20, 7
    19c8:	09 c0       	rjmp	.+18     	; 0x19dc <__divsf3+0x126>
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	a1 05       	cpc	r26, r1
    19ce:	b1 05       	cpc	r27, r1
    19d0:	29 f0       	breq	.+10     	; 0x19dc <__divsf3+0x126>
    19d2:	40 5c       	subi	r20, 0xC0	; 192
    19d4:	5f 4f       	sbci	r21, 0xFF	; 255
    19d6:	6f 4f       	sbci	r22, 0xFF	; 255
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	40 78       	andi	r20, 0x80	; 128
    19dc:	4d 8b       	std	Y+21, r20	; 0x15
    19de:	5e 8b       	std	Y+22, r21	; 0x16
    19e0:	6f 8b       	std	Y+23, r22	; 0x17
    19e2:	78 8f       	std	Y+24, r23	; 0x18
    19e4:	ce 01       	movw	r24, r28
    19e6:	41 96       	adiw	r24, 0x11	; 17
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <__divsf3+0x13e>
    19ea:	ce 01       	movw	r24, r28
    19ec:	09 96       	adiw	r24, 0x09	; 9
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <__divsf3+0x13e>
    19f0:	8b e9       	ldi	r24, 0x9B	; 155
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__pack_f>
    19f8:	46 2f       	mov	r20, r22
    19fa:	57 2f       	mov	r21, r23
    19fc:	68 2f       	mov	r22, r24
    19fe:	79 2f       	mov	r23, r25
    1a00:	cb 01       	movw	r24, r22
    1a02:	ba 01       	movw	r22, r20
    1a04:	68 96       	adiw	r28, 0x18	; 24
    1a06:	e8 e0       	ldi	r30, 0x08	; 8
    1a08:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__epilogue_restores__+0x14>

00001a0c <__eqsf2>:
    1a0c:	a8 e1       	ldi	r26, 0x18	; 24
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	ec e0       	ldi	r30, 0x0C	; 12
    1a12:	fd e0       	ldi	r31, 0x0D	; 13
    1a14:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__prologue_saves__+0x20>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	af 83       	std	Y+7, r26	; 0x07
    1a22:	b8 87       	std	Y+8, r27	; 0x08
    1a24:	29 83       	std	Y+1, r18	; 0x01
    1a26:	3a 83       	std	Y+2, r19	; 0x02
    1a28:	4b 83       	std	Y+3, r20	; 0x03
    1a2a:	5c 83       	std	Y+4, r21	; 0x04
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	05 96       	adiw	r24, 0x05	; 5
    1a30:	be 01       	movw	r22, r28
    1a32:	6f 5e       	subi	r22, 0xEF	; 239
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255
    1a36:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	be 01       	movw	r22, r28
    1a40:	67 5f       	subi	r22, 0xF7	; 247
    1a42:	7f 4f       	sbci	r23, 0xFF	; 255
    1a44:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1a48:	89 89       	ldd	r24, Y+17	; 0x11
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	58 f0       	brcs	.+22     	; 0x1a64 <__eqsf2+0x58>
    1a4e:	89 85       	ldd	r24, Y+9	; 0x09
    1a50:	82 30       	cpi	r24, 0x02	; 2
    1a52:	40 f0       	brcs	.+16     	; 0x1a64 <__eqsf2+0x58>
    1a54:	ce 01       	movw	r24, r28
    1a56:	41 96       	adiw	r24, 0x11	; 17
    1a58:	be 01       	movw	r22, r28
    1a5a:	67 5f       	subi	r22, 0xF7	; 247
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5e:	0e 94 a2 10 	call	0x2144	; 0x2144 <__fpcmp_parts_f>
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <__eqsf2+0x5a>
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	68 96       	adiw	r28, 0x18	; 24
    1a68:	e2 e0       	ldi	r30, 0x02	; 2
    1a6a:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__epilogue_restores__+0x20>

00001a6e <__gtsf2>:
    1a6e:	a8 e1       	ldi	r26, 0x18	; 24
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ed e3       	ldi	r30, 0x3D	; 61
    1a74:	fd e0       	ldi	r31, 0x0D	; 13
    1a76:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__prologue_saves__+0x20>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	af 83       	std	Y+7, r26	; 0x07
    1a84:	b8 87       	std	Y+8, r27	; 0x08
    1a86:	29 83       	std	Y+1, r18	; 0x01
    1a88:	3a 83       	std	Y+2, r19	; 0x02
    1a8a:	4b 83       	std	Y+3, r20	; 0x03
    1a8c:	5c 83       	std	Y+4, r21	; 0x04
    1a8e:	ce 01       	movw	r24, r28
    1a90:	05 96       	adiw	r24, 0x05	; 5
    1a92:	be 01       	movw	r22, r28
    1a94:	6f 5e       	subi	r22, 0xEF	; 239
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	be 01       	movw	r22, r28
    1aa2:	67 5f       	subi	r22, 0xF7	; 247
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1aaa:	89 89       	ldd	r24, Y+17	; 0x11
    1aac:	82 30       	cpi	r24, 0x02	; 2
    1aae:	58 f0       	brcs	.+22     	; 0x1ac6 <__gtsf2+0x58>
    1ab0:	89 85       	ldd	r24, Y+9	; 0x09
    1ab2:	82 30       	cpi	r24, 0x02	; 2
    1ab4:	40 f0       	brcs	.+16     	; 0x1ac6 <__gtsf2+0x58>
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	41 96       	adiw	r24, 0x11	; 17
    1aba:	be 01       	movw	r22, r28
    1abc:	67 5f       	subi	r22, 0xF7	; 247
    1abe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac0:	0e 94 a2 10 	call	0x2144	; 0x2144 <__fpcmp_parts_f>
    1ac4:	01 c0       	rjmp	.+2      	; 0x1ac8 <__gtsf2+0x5a>
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	68 96       	adiw	r28, 0x18	; 24
    1aca:	e2 e0       	ldi	r30, 0x02	; 2
    1acc:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__epilogue_restores__+0x20>

00001ad0 <__gesf2>:
    1ad0:	a8 e1       	ldi	r26, 0x18	; 24
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	ee e6       	ldi	r30, 0x6E	; 110
    1ad6:	fd e0       	ldi	r31, 0x0D	; 13
    1ad8:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__prologue_saves__+0x20>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8d 83       	std	Y+5, r24	; 0x05
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	af 83       	std	Y+7, r26	; 0x07
    1ae6:	b8 87       	std	Y+8, r27	; 0x08
    1ae8:	29 83       	std	Y+1, r18	; 0x01
    1aea:	3a 83       	std	Y+2, r19	; 0x02
    1aec:	4b 83       	std	Y+3, r20	; 0x03
    1aee:	5c 83       	std	Y+4, r21	; 0x04
    1af0:	ce 01       	movw	r24, r28
    1af2:	05 96       	adiw	r24, 0x05	; 5
    1af4:	be 01       	movw	r22, r28
    1af6:	6f 5e       	subi	r22, 0xEF	; 239
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1afe:	ce 01       	movw	r24, r28
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	be 01       	movw	r22, r28
    1b04:	67 5f       	subi	r22, 0xF7	; 247
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1b0c:	89 89       	ldd	r24, Y+17	; 0x11
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	58 f0       	brcs	.+22     	; 0x1b28 <__gesf2+0x58>
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	40 f0       	brcs	.+16     	; 0x1b28 <__gesf2+0x58>
    1b18:	ce 01       	movw	r24, r28
    1b1a:	41 96       	adiw	r24, 0x11	; 17
    1b1c:	be 01       	movw	r22, r28
    1b1e:	67 5f       	subi	r22, 0xF7	; 247
    1b20:	7f 4f       	sbci	r23, 0xFF	; 255
    1b22:	0e 94 a2 10 	call	0x2144	; 0x2144 <__fpcmp_parts_f>
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <__gesf2+0x5a>
    1b28:	8f ef       	ldi	r24, 0xFF	; 255
    1b2a:	68 96       	adiw	r28, 0x18	; 24
    1b2c:	e2 e0       	ldi	r30, 0x02	; 2
    1b2e:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__epilogue_restores__+0x20>

00001b32 <__ltsf2>:
    1b32:	a8 e1       	ldi	r26, 0x18	; 24
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	ef e9       	ldi	r30, 0x9F	; 159
    1b38:	fd e0       	ldi	r31, 0x0D	; 13
    1b3a:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__prologue_saves__+0x20>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8d 83       	std	Y+5, r24	; 0x05
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	af 83       	std	Y+7, r26	; 0x07
    1b48:	b8 87       	std	Y+8, r27	; 0x08
    1b4a:	29 83       	std	Y+1, r18	; 0x01
    1b4c:	3a 83       	std	Y+2, r19	; 0x02
    1b4e:	4b 83       	std	Y+3, r20	; 0x03
    1b50:	5c 83       	std	Y+4, r21	; 0x04
    1b52:	ce 01       	movw	r24, r28
    1b54:	05 96       	adiw	r24, 0x05	; 5
    1b56:	be 01       	movw	r22, r28
    1b58:	6f 5e       	subi	r22, 0xEF	; 239
    1b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5c:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1b60:	ce 01       	movw	r24, r28
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	be 01       	movw	r22, r28
    1b66:	67 5f       	subi	r22, 0xF7	; 247
    1b68:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6a:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1b6e:	89 89       	ldd	r24, Y+17	; 0x11
    1b70:	82 30       	cpi	r24, 0x02	; 2
    1b72:	58 f0       	brcs	.+22     	; 0x1b8a <__ltsf2+0x58>
    1b74:	89 85       	ldd	r24, Y+9	; 0x09
    1b76:	82 30       	cpi	r24, 0x02	; 2
    1b78:	40 f0       	brcs	.+16     	; 0x1b8a <__ltsf2+0x58>
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	41 96       	adiw	r24, 0x11	; 17
    1b7e:	be 01       	movw	r22, r28
    1b80:	67 5f       	subi	r22, 0xF7	; 247
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	0e 94 a2 10 	call	0x2144	; 0x2144 <__fpcmp_parts_f>
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <__ltsf2+0x5a>
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	68 96       	adiw	r28, 0x18	; 24
    1b8e:	e2 e0       	ldi	r30, 0x02	; 2
    1b90:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__epilogue_restores__+0x20>

00001b94 <__floatsisf>:
    1b94:	cf 92       	push	r12
    1b96:	df 92       	push	r13
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	28 97       	sbiw	r28, 0x08	; 8
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	6b 01       	movw	r12, r22
    1bb2:	7c 01       	movw	r14, r24
    1bb4:	83 e0       	ldi	r24, 0x03	; 3
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	d7 01       	movw	r26, r14
    1bba:	c6 01       	movw	r24, r12
    1bbc:	88 27       	eor	r24, r24
    1bbe:	b7 fd       	sbrc	r27, 7
    1bc0:	83 95       	inc	r24
    1bc2:	99 27       	eor	r25, r25
    1bc4:	aa 27       	eor	r26, r26
    1bc6:	bb 27       	eor	r27, r27
    1bc8:	28 2f       	mov	r18, r24
    1bca:	8a 83       	std	Y+2, r24	; 0x02
    1bcc:	c1 14       	cp	r12, r1
    1bce:	d1 04       	cpc	r13, r1
    1bd0:	e1 04       	cpc	r14, r1
    1bd2:	f1 04       	cpc	r15, r1
    1bd4:	19 f4       	brne	.+6      	; 0x1bdc <__floatsisf+0x48>
    1bd6:	82 e0       	ldi	r24, 0x02	; 2
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	35 c0       	rjmp	.+106    	; 0x1c46 <__floatsisf+0xb2>
    1bdc:	8e e1       	ldi	r24, 0x1E	; 30
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9c 83       	std	Y+4, r25	; 0x04
    1be2:	8b 83       	std	Y+3, r24	; 0x03
    1be4:	22 23       	and	r18, r18
    1be6:	89 f0       	breq	.+34     	; 0x1c0a <__floatsisf+0x76>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	c8 16       	cp	r12, r24
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	d8 06       	cpc	r13, r24
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	e8 06       	cpc	r14, r24
    1bf4:	80 e8       	ldi	r24, 0x80	; 128
    1bf6:	f8 06       	cpc	r15, r24
    1bf8:	59 f1       	breq	.+86     	; 0x1c50 <__floatsisf+0xbc>
    1bfa:	f0 94       	com	r15
    1bfc:	e0 94       	com	r14
    1bfe:	d0 94       	com	r13
    1c00:	c0 94       	com	r12
    1c02:	c1 1c       	adc	r12, r1
    1c04:	d1 1c       	adc	r13, r1
    1c06:	e1 1c       	adc	r14, r1
    1c08:	f1 1c       	adc	r15, r1
    1c0a:	cd 82       	std	Y+5, r12	; 0x05
    1c0c:	de 82       	std	Y+6, r13	; 0x06
    1c0e:	ef 82       	std	Y+7, r14	; 0x07
    1c10:	f8 86       	std	Y+8, r15	; 0x08
    1c12:	c7 01       	movw	r24, r14
    1c14:	b6 01       	movw	r22, r12
    1c16:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <__clzsi2>
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	18 16       	cp	r1, r24
    1c1e:	19 06       	cpc	r1, r25
    1c20:	94 f4       	brge	.+36     	; 0x1c46 <__floatsisf+0xb2>
    1c22:	08 2e       	mov	r0, r24
    1c24:	04 c0       	rjmp	.+8      	; 0x1c2e <__floatsisf+0x9a>
    1c26:	cc 0c       	add	r12, r12
    1c28:	dd 1c       	adc	r13, r13
    1c2a:	ee 1c       	adc	r14, r14
    1c2c:	ff 1c       	adc	r15, r15
    1c2e:	0a 94       	dec	r0
    1c30:	d2 f7       	brpl	.-12     	; 0x1c26 <__floatsisf+0x92>
    1c32:	cd 82       	std	Y+5, r12	; 0x05
    1c34:	de 82       	std	Y+6, r13	; 0x06
    1c36:	ef 82       	std	Y+7, r14	; 0x07
    1c38:	f8 86       	std	Y+8, r15	; 0x08
    1c3a:	2e e1       	ldi	r18, 0x1E	; 30
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	28 1b       	sub	r18, r24
    1c40:	39 0b       	sbc	r19, r25
    1c42:	3c 83       	std	Y+4, r19	; 0x04
    1c44:	2b 83       	std	Y+3, r18	; 0x03
    1c46:	ce 01       	movw	r24, r28
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__pack_f>
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <__floatsisf+0xc4>
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	9f ec       	ldi	r25, 0xCF	; 207
    1c58:	38 2f       	mov	r19, r24
    1c5a:	29 2f       	mov	r18, r25
    1c5c:	86 2f       	mov	r24, r22
    1c5e:	97 2f       	mov	r25, r23
    1c60:	a3 2f       	mov	r26, r19
    1c62:	b2 2f       	mov	r27, r18
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	28 96       	adiw	r28, 0x08	; 8
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	ff 90       	pop	r15
    1c7a:	ef 90       	pop	r14
    1c7c:	df 90       	pop	r13
    1c7e:	cf 90       	pop	r12
    1c80:	08 95       	ret

00001c82 <__fixsfsi>:
    1c82:	ac e0       	ldi	r26, 0x0C	; 12
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e7 e4       	ldi	r30, 0x47	; 71
    1c88:	fe e0       	ldi	r31, 0x0E	; 14
    1c8a:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__prologue_saves__+0x1c>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	ab 83       	std	Y+3, r26	; 0x03
    1c98:	bc 83       	std	Y+4, r27	; 0x04
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	be 01       	movw	r22, r28
    1ca0:	6b 5f       	subi	r22, 0xFB	; 251
    1ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca4:	0e 94 39 10 	call	0x2072	; 0x2072 <__unpack_f>
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	82 30       	cpi	r24, 0x02	; 2
    1cac:	69 f1       	breq	.+90     	; 0x1d08 <__fixsfsi+0x86>
    1cae:	82 30       	cpi	r24, 0x02	; 2
    1cb0:	58 f1       	brcs	.+86     	; 0x1d08 <__fixsfsi+0x86>
    1cb2:	84 30       	cpi	r24, 0x04	; 4
    1cb4:	39 f0       	breq	.+14     	; 0x1cc4 <__fixsfsi+0x42>
    1cb6:	2f 81       	ldd	r18, Y+7	; 0x07
    1cb8:	38 85       	ldd	r19, Y+8	; 0x08
    1cba:	37 fd       	sbrc	r19, 7
    1cbc:	25 c0       	rjmp	.+74     	; 0x1d08 <__fixsfsi+0x86>
    1cbe:	2f 31       	cpi	r18, 0x1F	; 31
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	44 f0       	brlt	.+16     	; 0x1cd4 <__fixsfsi+0x52>
    1cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc6:	88 23       	and	r24, r24
    1cc8:	19 f1       	breq	.+70     	; 0x1d10 <__fixsfsi+0x8e>
    1cca:	00 e0       	ldi	r16, 0x00	; 0
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e8       	ldi	r19, 0x80	; 128
    1cd2:	22 c0       	rjmp	.+68     	; 0x1d18 <__fixsfsi+0x96>
    1cd4:	8e e1       	ldi	r24, 0x1E	; 30
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	82 1b       	sub	r24, r18
    1cda:	93 0b       	sbc	r25, r19
    1cdc:	09 85       	ldd	r16, Y+9	; 0x09
    1cde:	1a 85       	ldd	r17, Y+10	; 0x0a
    1ce0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ce2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ce4:	04 c0       	rjmp	.+8      	; 0x1cee <__fixsfsi+0x6c>
    1ce6:	36 95       	lsr	r19
    1ce8:	27 95       	ror	r18
    1cea:	17 95       	ror	r17
    1cec:	07 95       	ror	r16
    1cee:	8a 95       	dec	r24
    1cf0:	d2 f7       	brpl	.-12     	; 0x1ce6 <__fixsfsi+0x64>
    1cf2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf4:	88 23       	and	r24, r24
    1cf6:	81 f0       	breq	.+32     	; 0x1d18 <__fixsfsi+0x96>
    1cf8:	30 95       	com	r19
    1cfa:	20 95       	com	r18
    1cfc:	10 95       	com	r17
    1cfe:	01 95       	neg	r16
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
    1d02:	2f 4f       	sbci	r18, 0xFF	; 255
    1d04:	3f 4f       	sbci	r19, 0xFF	; 255
    1d06:	08 c0       	rjmp	.+16     	; 0x1d18 <__fixsfsi+0x96>
    1d08:	00 e0       	ldi	r16, 0x00	; 0
    1d0a:	10 e0       	ldi	r17, 0x00	; 0
    1d0c:	98 01       	movw	r18, r16
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <__fixsfsi+0x96>
    1d10:	0f ef       	ldi	r16, 0xFF	; 255
    1d12:	1f ef       	ldi	r17, 0xFF	; 255
    1d14:	2f ef       	ldi	r18, 0xFF	; 255
    1d16:	3f e7       	ldi	r19, 0x7F	; 127
    1d18:	b8 01       	movw	r22, r16
    1d1a:	c9 01       	movw	r24, r18
    1d1c:	2c 96       	adiw	r28, 0x0c	; 12
    1d1e:	e4 e0       	ldi	r30, 0x04	; 4
    1d20:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__epilogue_restores__+0x1c>

00001d24 <__floatunsisf>:
    1d24:	a8 e0       	ldi	r26, 0x08	; 8
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e8 e9       	ldi	r30, 0x98	; 152
    1d2a:	fe e0       	ldi	r31, 0x0E	; 14
    1d2c:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__prologue_saves__+0x14>
    1d30:	6b 01       	movw	r12, r22
    1d32:	7c 01       	movw	r14, r24
    1d34:	1a 82       	std	Y+2, r1	; 0x02
    1d36:	61 15       	cp	r22, r1
    1d38:	71 05       	cpc	r23, r1
    1d3a:	81 05       	cpc	r24, r1
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	19 f4       	brne	.+6      	; 0x1d46 <__floatunsisf+0x22>
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	5e c0       	rjmp	.+188    	; 0x1e02 <__floatunsisf+0xde>
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	0e e1       	ldi	r16, 0x1E	; 30
    1d4c:	10 e0       	ldi	r17, 0x00	; 0
    1d4e:	1c 83       	std	Y+4, r17	; 0x04
    1d50:	0b 83       	std	Y+3, r16	; 0x03
    1d52:	cd 82       	std	Y+5, r12	; 0x05
    1d54:	de 82       	std	Y+6, r13	; 0x06
    1d56:	ef 82       	std	Y+7, r14	; 0x07
    1d58:	f8 86       	std	Y+8, r15	; 0x08
    1d5a:	c7 01       	movw	r24, r14
    1d5c:	b6 01       	movw	r22, r12
    1d5e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <__clzsi2>
    1d62:	9c 01       	movw	r18, r24
    1d64:	21 50       	subi	r18, 0x01	; 1
    1d66:	30 40       	sbci	r19, 0x00	; 0
    1d68:	37 ff       	sbrs	r19, 7
    1d6a:	38 c0       	rjmp	.+112    	; 0x1ddc <__floatunsisf+0xb8>
    1d6c:	ee 27       	eor	r30, r30
    1d6e:	ff 27       	eor	r31, r31
    1d70:	e2 1b       	sub	r30, r18
    1d72:	f3 0b       	sbc	r31, r19
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	a0 e0       	ldi	r26, 0x00	; 0
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	0e 2e       	mov	r0, r30
    1d7e:	04 c0       	rjmp	.+8      	; 0x1d88 <__floatunsisf+0x64>
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	aa 1f       	adc	r26, r26
    1d86:	bb 1f       	adc	r27, r27
    1d88:	0a 94       	dec	r0
    1d8a:	d2 f7       	brpl	.-12     	; 0x1d80 <__floatunsisf+0x5c>
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	a1 09       	sbc	r26, r1
    1d90:	b1 09       	sbc	r27, r1
    1d92:	8c 21       	and	r24, r12
    1d94:	9d 21       	and	r25, r13
    1d96:	ae 21       	and	r26, r14
    1d98:	bf 21       	and	r27, r15
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	a1 05       	cpc	r26, r1
    1da6:	b1 05       	cpc	r27, r1
    1da8:	19 f4       	brne	.+6      	; 0x1db0 <__floatunsisf+0x8c>
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	ba 01       	movw	r22, r20
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <__floatunsisf+0x96>
    1db2:	f6 94       	lsr	r15
    1db4:	e7 94       	ror	r14
    1db6:	d7 94       	ror	r13
    1db8:	c7 94       	ror	r12
    1dba:	ea 95       	dec	r30
    1dbc:	d2 f7       	brpl	.-12     	; 0x1db2 <__floatunsisf+0x8e>
    1dbe:	c4 2a       	or	r12, r20
    1dc0:	d5 2a       	or	r13, r21
    1dc2:	e6 2a       	or	r14, r22
    1dc4:	f7 2a       	or	r15, r23
    1dc6:	cd 82       	std	Y+5, r12	; 0x05
    1dc8:	de 82       	std	Y+6, r13	; 0x06
    1dca:	ef 82       	std	Y+7, r14	; 0x07
    1dcc:	f8 86       	std	Y+8, r15	; 0x08
    1dce:	8e e1       	ldi	r24, 0x1E	; 30
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	82 1b       	sub	r24, r18
    1dd4:	93 0b       	sbc	r25, r19
    1dd6:	9c 83       	std	Y+4, r25	; 0x04
    1dd8:	8b 83       	std	Y+3, r24	; 0x03
    1dda:	13 c0       	rjmp	.+38     	; 0x1e02 <__floatunsisf+0xde>
    1ddc:	21 15       	cp	r18, r1
    1dde:	31 05       	cpc	r19, r1
    1de0:	81 f0       	breq	.+32     	; 0x1e02 <__floatunsisf+0xde>
    1de2:	02 2e       	mov	r0, r18
    1de4:	04 c0       	rjmp	.+8      	; 0x1dee <__floatunsisf+0xca>
    1de6:	cc 0c       	add	r12, r12
    1de8:	dd 1c       	adc	r13, r13
    1dea:	ee 1c       	adc	r14, r14
    1dec:	ff 1c       	adc	r15, r15
    1dee:	0a 94       	dec	r0
    1df0:	d2 f7       	brpl	.-12     	; 0x1de6 <__floatunsisf+0xc2>
    1df2:	cd 82       	std	Y+5, r12	; 0x05
    1df4:	de 82       	std	Y+6, r13	; 0x06
    1df6:	ef 82       	std	Y+7, r14	; 0x07
    1df8:	f8 86       	std	Y+8, r15	; 0x08
    1dfa:	02 1b       	sub	r16, r18
    1dfc:	13 0b       	sbc	r17, r19
    1dfe:	1c 83       	std	Y+4, r17	; 0x04
    1e00:	0b 83       	std	Y+3, r16	; 0x03
    1e02:	ce 01       	movw	r24, r28
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__pack_f>
    1e0a:	46 2f       	mov	r20, r22
    1e0c:	57 2f       	mov	r21, r23
    1e0e:	68 2f       	mov	r22, r24
    1e10:	79 2f       	mov	r23, r25
    1e12:	cb 01       	movw	r24, r22
    1e14:	ba 01       	movw	r22, r20
    1e16:	28 96       	adiw	r28, 0x08	; 8
    1e18:	e8 e0       	ldi	r30, 0x08	; 8
    1e1a:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__epilogue_restores__+0x14>

00001e1e <__clzsi2>:
    1e1e:	cf 92       	push	r12
    1e20:	df 92       	push	r13
    1e22:	ef 92       	push	r14
    1e24:	ff 92       	push	r15
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	8b 01       	movw	r16, r22
    1e2c:	9c 01       	movw	r18, r24
    1e2e:	00 30       	cpi	r16, 0x00	; 0
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	18 07       	cpc	r17, r24
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	28 07       	cpc	r18, r24
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	38 07       	cpc	r19, r24
    1e3c:	50 f4       	brcc	.+20     	; 0x1e52 <__clzsi2+0x34>
    1e3e:	0f 3f       	cpi	r16, 0xFF	; 255
    1e40:	11 05       	cpc	r17, r1
    1e42:	21 05       	cpc	r18, r1
    1e44:	31 05       	cpc	r19, r1
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <__clzsi2+0x2c>
    1e48:	88 f4       	brcc	.+34     	; 0x1e6c <__clzsi2+0x4e>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	dc 01       	movw	r26, r24
    1e50:	16 c0       	rjmp	.+44     	; 0x1e7e <__clzsi2+0x60>
    1e52:	00 30       	cpi	r16, 0x00	; 0
    1e54:	e0 e0       	ldi	r30, 0x00	; 0
    1e56:	1e 07       	cpc	r17, r30
    1e58:	e0 e0       	ldi	r30, 0x00	; 0
    1e5a:	2e 07       	cpc	r18, r30
    1e5c:	e1 e0       	ldi	r30, 0x01	; 1
    1e5e:	3e 07       	cpc	r19, r30
    1e60:	50 f4       	brcc	.+20     	; 0x1e76 <__clzsi2+0x58>
    1e62:	80 e1       	ldi	r24, 0x10	; 16
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	09 c0       	rjmp	.+18     	; 0x1e7e <__clzsi2+0x60>
    1e6c:	88 e0       	ldi	r24, 0x08	; 8
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a0 e0       	ldi	r26, 0x00	; 0
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	04 c0       	rjmp	.+8      	; 0x1e7e <__clzsi2+0x60>
    1e76:	88 e1       	ldi	r24, 0x18	; 24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	a0 e0       	ldi	r26, 0x00	; 0
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	40 e2       	ldi	r20, 0x20	; 32
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	48 1b       	sub	r20, r24
    1e88:	59 0b       	sbc	r21, r25
    1e8a:	6a 0b       	sbc	r22, r26
    1e8c:	7b 0b       	sbc	r23, r27
    1e8e:	68 01       	movw	r12, r16
    1e90:	79 01       	movw	r14, r18
    1e92:	04 c0       	rjmp	.+8      	; 0x1e9c <__clzsi2+0x7e>
    1e94:	f6 94       	lsr	r15
    1e96:	e7 94       	ror	r14
    1e98:	d7 94       	ror	r13
    1e9a:	c7 94       	ror	r12
    1e9c:	8a 95       	dec	r24
    1e9e:	d2 f7       	brpl	.-12     	; 0x1e94 <__clzsi2+0x76>
    1ea0:	d7 01       	movw	r26, r14
    1ea2:	c6 01       	movw	r24, r12
    1ea4:	8d 55       	subi	r24, 0x5D	; 93
    1ea6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	80 81       	ld	r24, Z
    1eac:	48 1b       	sub	r20, r24
    1eae:	51 09       	sbc	r21, r1
    1eb0:	61 09       	sbc	r22, r1
    1eb2:	71 09       	sbc	r23, r1
    1eb4:	ca 01       	movw	r24, r20
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	df 90       	pop	r13
    1ec0:	cf 90       	pop	r12
    1ec2:	08 95       	ret

00001ec4 <__pack_f>:
    1ec4:	cf 92       	push	r12
    1ec6:	df 92       	push	r13
    1ec8:	ef 92       	push	r14
    1eca:	ff 92       	push	r15
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	14 96       	adiw	r26, 0x04	; 4
    1ed4:	4d 91       	ld	r20, X+
    1ed6:	5d 91       	ld	r21, X+
    1ed8:	6d 91       	ld	r22, X+
    1eda:	7c 91       	ld	r23, X
    1edc:	17 97       	sbiw	r26, 0x07	; 7
    1ede:	11 96       	adiw	r26, 0x01	; 1
    1ee0:	ec 91       	ld	r30, X
    1ee2:	11 97       	sbiw	r26, 0x01	; 1
    1ee4:	8c 91       	ld	r24, X
    1ee6:	82 30       	cpi	r24, 0x02	; 2
    1ee8:	20 f4       	brcc	.+8      	; 0x1ef2 <__pack_f+0x2e>
    1eea:	60 61       	ori	r22, 0x10	; 16
    1eec:	8f ef       	ldi	r24, 0xFF	; 255
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a5 c0       	rjmp	.+330    	; 0x203c <__pack_f+0x178>
    1ef2:	84 30       	cpi	r24, 0x04	; 4
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <__pack_f+0x34>
    1ef6:	9d c0       	rjmp	.+314    	; 0x2032 <__pack_f+0x16e>
    1ef8:	82 30       	cpi	r24, 0x02	; 2
    1efa:	09 f4       	brne	.+2      	; 0x1efe <__pack_f+0x3a>
    1efc:	94 c0       	rjmp	.+296    	; 0x2026 <__pack_f+0x162>
    1efe:	41 15       	cp	r20, r1
    1f00:	51 05       	cpc	r21, r1
    1f02:	61 05       	cpc	r22, r1
    1f04:	71 05       	cpc	r23, r1
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <__pack_f+0x46>
    1f08:	91 c0       	rjmp	.+290    	; 0x202c <__pack_f+0x168>
    1f0a:	12 96       	adiw	r26, 0x02	; 2
    1f0c:	8d 91       	ld	r24, X+
    1f0e:	9c 91       	ld	r25, X
    1f10:	13 97       	sbiw	r26, 0x03	; 3
    1f12:	2f ef       	ldi	r18, 0xFF	; 255
    1f14:	82 38       	cpi	r24, 0x82	; 130
    1f16:	92 07       	cpc	r25, r18
    1f18:	0c f0       	brlt	.+2      	; 0x1f1c <__pack_f+0x58>
    1f1a:	59 c0       	rjmp	.+178    	; 0x1fce <__pack_f+0x10a>
    1f1c:	22 e8       	ldi	r18, 0x82	; 130
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	28 1b       	sub	r18, r24
    1f22:	39 0b       	sbc	r19, r25
    1f24:	2a 31       	cpi	r18, 0x1A	; 26
    1f26:	31 05       	cpc	r19, r1
    1f28:	64 f5       	brge	.+88     	; 0x1f82 <__pack_f+0xbe>
    1f2a:	6a 01       	movw	r12, r20
    1f2c:	7b 01       	movw	r14, r22
    1f2e:	02 2e       	mov	r0, r18
    1f30:	04 c0       	rjmp	.+8      	; 0x1f3a <__pack_f+0x76>
    1f32:	f6 94       	lsr	r15
    1f34:	e7 94       	ror	r14
    1f36:	d7 94       	ror	r13
    1f38:	c7 94       	ror	r12
    1f3a:	0a 94       	dec	r0
    1f3c:	d2 f7       	brpl	.-12     	; 0x1f32 <__pack_f+0x6e>
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 e0       	ldi	r26, 0x00	; 0
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	04 c0       	rjmp	.+8      	; 0x1f50 <__pack_f+0x8c>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	aa 1f       	adc	r26, r26
    1f4e:	bb 1f       	adc	r27, r27
    1f50:	2a 95       	dec	r18
    1f52:	d2 f7       	brpl	.-12     	; 0x1f48 <__pack_f+0x84>
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	a1 09       	sbc	r26, r1
    1f58:	b1 09       	sbc	r27, r1
    1f5a:	84 23       	and	r24, r20
    1f5c:	95 23       	and	r25, r21
    1f5e:	a6 23       	and	r26, r22
    1f60:	b7 23       	and	r27, r23
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	a1 05       	cpc	r26, r1
    1f6e:	b1 05       	cpc	r27, r1
    1f70:	19 f4       	brne	.+6      	; 0x1f78 <__pack_f+0xb4>
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	ba 01       	movw	r22, r20
    1f78:	4c 29       	or	r20, r12
    1f7a:	5d 29       	or	r21, r13
    1f7c:	6e 29       	or	r22, r14
    1f7e:	7f 29       	or	r23, r15
    1f80:	03 c0       	rjmp	.+6      	; 0x1f88 <__pack_f+0xc4>
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	ba 01       	movw	r22, r20
    1f88:	db 01       	movw	r26, r22
    1f8a:	ca 01       	movw	r24, r20
    1f8c:	8f 77       	andi	r24, 0x7F	; 127
    1f8e:	90 70       	andi	r25, 0x00	; 0
    1f90:	a0 70       	andi	r26, 0x00	; 0
    1f92:	b0 70       	andi	r27, 0x00	; 0
    1f94:	80 34       	cpi	r24, 0x40	; 64
    1f96:	91 05       	cpc	r25, r1
    1f98:	a1 05       	cpc	r26, r1
    1f9a:	b1 05       	cpc	r27, r1
    1f9c:	39 f4       	brne	.+14     	; 0x1fac <__pack_f+0xe8>
    1f9e:	47 ff       	sbrs	r20, 7
    1fa0:	09 c0       	rjmp	.+18     	; 0x1fb4 <__pack_f+0xf0>
    1fa2:	40 5c       	subi	r20, 0xC0	; 192
    1fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa6:	6f 4f       	sbci	r22, 0xFF	; 255
    1fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1faa:	04 c0       	rjmp	.+8      	; 0x1fb4 <__pack_f+0xf0>
    1fac:	41 5c       	subi	r20, 0xC1	; 193
    1fae:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb0:	6f 4f       	sbci	r22, 0xFF	; 255
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	40 30       	cpi	r20, 0x00	; 0
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	52 07       	cpc	r21, r18
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	62 07       	cpc	r22, r18
    1fc2:	20 e4       	ldi	r18, 0x40	; 64
    1fc4:	72 07       	cpc	r23, r18
    1fc6:	38 f5       	brcc	.+78     	; 0x2016 <__pack_f+0x152>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	24 c0       	rjmp	.+72     	; 0x2016 <__pack_f+0x152>
    1fce:	80 38       	cpi	r24, 0x80	; 128
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	7c f5       	brge	.+94     	; 0x2032 <__pack_f+0x16e>
    1fd4:	8a 01       	movw	r16, r20
    1fd6:	9b 01       	movw	r18, r22
    1fd8:	0f 77       	andi	r16, 0x7F	; 127
    1fda:	10 70       	andi	r17, 0x00	; 0
    1fdc:	20 70       	andi	r18, 0x00	; 0
    1fde:	30 70       	andi	r19, 0x00	; 0
    1fe0:	00 34       	cpi	r16, 0x40	; 64
    1fe2:	11 05       	cpc	r17, r1
    1fe4:	21 05       	cpc	r18, r1
    1fe6:	31 05       	cpc	r19, r1
    1fe8:	39 f4       	brne	.+14     	; 0x1ff8 <__pack_f+0x134>
    1fea:	47 ff       	sbrs	r20, 7
    1fec:	09 c0       	rjmp	.+18     	; 0x2000 <__pack_f+0x13c>
    1fee:	40 5c       	subi	r20, 0xC0	; 192
    1ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff2:	6f 4f       	sbci	r22, 0xFF	; 255
    1ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff6:	04 c0       	rjmp	.+8      	; 0x2000 <__pack_f+0x13c>
    1ff8:	41 5c       	subi	r20, 0xC1	; 193
    1ffa:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffc:	6f 4f       	sbci	r22, 0xFF	; 255
    1ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    2000:	77 fd       	sbrc	r23, 7
    2002:	03 c0       	rjmp	.+6      	; 0x200a <__pack_f+0x146>
    2004:	81 58       	subi	r24, 0x81	; 129
    2006:	9f 4f       	sbci	r25, 0xFF	; 255
    2008:	06 c0       	rjmp	.+12     	; 0x2016 <__pack_f+0x152>
    200a:	76 95       	lsr	r23
    200c:	67 95       	ror	r22
    200e:	57 95       	ror	r21
    2010:	47 95       	ror	r20
    2012:	80 58       	subi	r24, 0x80	; 128
    2014:	9f 4f       	sbci	r25, 0xFF	; 255
    2016:	97 e0       	ldi	r25, 0x07	; 7
    2018:	76 95       	lsr	r23
    201a:	67 95       	ror	r22
    201c:	57 95       	ror	r21
    201e:	47 95       	ror	r20
    2020:	9a 95       	dec	r25
    2022:	d1 f7       	brne	.-12     	; 0x2018 <__pack_f+0x154>
    2024:	0b c0       	rjmp	.+22     	; 0x203c <__pack_f+0x178>
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	05 c0       	rjmp	.+10     	; 0x2036 <__pack_f+0x172>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	05 c0       	rjmp	.+10     	; 0x203c <__pack_f+0x178>
    2032:	8f ef       	ldi	r24, 0xFF	; 255
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	ba 01       	movw	r22, r20
    203c:	98 2f       	mov	r25, r24
    203e:	97 95       	ror	r25
    2040:	99 27       	eor	r25, r25
    2042:	97 95       	ror	r25
    2044:	a6 2f       	mov	r26, r22
    2046:	af 77       	andi	r26, 0x7F	; 127
    2048:	e7 95       	ror	r30
    204a:	ee 27       	eor	r30, r30
    204c:	e7 95       	ror	r30
    204e:	86 95       	lsr	r24
    2050:	3a 2f       	mov	r19, r26
    2052:	39 2b       	or	r19, r25
    2054:	28 2f       	mov	r18, r24
    2056:	2e 2b       	or	r18, r30
    2058:	84 2f       	mov	r24, r20
    205a:	95 2f       	mov	r25, r21
    205c:	a3 2f       	mov	r26, r19
    205e:	b2 2f       	mov	r27, r18
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	08 95       	ret

00002072 <__unpack_f>:
    2072:	dc 01       	movw	r26, r24
    2074:	fb 01       	movw	r30, r22
    2076:	4c 91       	ld	r20, X
    2078:	11 96       	adiw	r26, 0x01	; 1
    207a:	5c 91       	ld	r21, X
    207c:	11 97       	sbiw	r26, 0x01	; 1
    207e:	12 96       	adiw	r26, 0x02	; 2
    2080:	8c 91       	ld	r24, X
    2082:	12 97       	sbiw	r26, 0x02	; 2
    2084:	68 2f       	mov	r22, r24
    2086:	6f 77       	andi	r22, 0x7F	; 127
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	98 2f       	mov	r25, r24
    208c:	99 1f       	adc	r25, r25
    208e:	99 27       	eor	r25, r25
    2090:	99 1f       	adc	r25, r25
    2092:	13 96       	adiw	r26, 0x03	; 3
    2094:	2c 91       	ld	r18, X
    2096:	13 97       	sbiw	r26, 0x03	; 3
    2098:	82 2f       	mov	r24, r18
    209a:	88 0f       	add	r24, r24
    209c:	89 2b       	or	r24, r25
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	22 1f       	adc	r18, r18
    20a2:	22 27       	eor	r18, r18
    20a4:	22 1f       	adc	r18, r18
    20a6:	21 83       	std	Z+1, r18	; 0x01
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	39 f5       	brne	.+78     	; 0x20fa <__unpack_f+0x88>
    20ac:	41 15       	cp	r20, r1
    20ae:	51 05       	cpc	r21, r1
    20b0:	61 05       	cpc	r22, r1
    20b2:	71 05       	cpc	r23, r1
    20b4:	11 f4       	brne	.+4      	; 0x20ba <__unpack_f+0x48>
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	29 c0       	rjmp	.+82     	; 0x210c <__unpack_f+0x9a>
    20ba:	82 e8       	ldi	r24, 0x82	; 130
    20bc:	9f ef       	ldi	r25, 0xFF	; 255
    20be:	93 83       	std	Z+3, r25	; 0x03
    20c0:	82 83       	std	Z+2, r24	; 0x02
    20c2:	27 e0       	ldi	r18, 0x07	; 7
    20c4:	44 0f       	add	r20, r20
    20c6:	55 1f       	adc	r21, r21
    20c8:	66 1f       	adc	r22, r22
    20ca:	77 1f       	adc	r23, r23
    20cc:	2a 95       	dec	r18
    20ce:	d1 f7       	brne	.-12     	; 0x20c4 <__unpack_f+0x52>
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	80 83       	st	Z, r24
    20d4:	09 c0       	rjmp	.+18     	; 0x20e8 <__unpack_f+0x76>
    20d6:	44 0f       	add	r20, r20
    20d8:	55 1f       	adc	r21, r21
    20da:	66 1f       	adc	r22, r22
    20dc:	77 1f       	adc	r23, r23
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	93 83       	std	Z+3, r25	; 0x03
    20e6:	82 83       	std	Z+2, r24	; 0x02
    20e8:	40 30       	cpi	r20, 0x00	; 0
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	58 07       	cpc	r21, r24
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	68 07       	cpc	r22, r24
    20f2:	80 e4       	ldi	r24, 0x40	; 64
    20f4:	78 07       	cpc	r23, r24
    20f6:	78 f3       	brcs	.-34     	; 0x20d6 <__unpack_f+0x64>
    20f8:	20 c0       	rjmp	.+64     	; 0x213a <__unpack_f+0xc8>
    20fa:	8f 3f       	cpi	r24, 0xFF	; 255
    20fc:	91 05       	cpc	r25, r1
    20fe:	79 f4       	brne	.+30     	; 0x211e <__unpack_f+0xac>
    2100:	41 15       	cp	r20, r1
    2102:	51 05       	cpc	r21, r1
    2104:	61 05       	cpc	r22, r1
    2106:	71 05       	cpc	r23, r1
    2108:	19 f4       	brne	.+6      	; 0x2110 <__unpack_f+0x9e>
    210a:	84 e0       	ldi	r24, 0x04	; 4
    210c:	80 83       	st	Z, r24
    210e:	08 95       	ret
    2110:	64 ff       	sbrs	r22, 4
    2112:	03 c0       	rjmp	.+6      	; 0x211a <__unpack_f+0xa8>
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	80 83       	st	Z, r24
    2118:	10 c0       	rjmp	.+32     	; 0x213a <__unpack_f+0xc8>
    211a:	10 82       	st	Z, r1
    211c:	0e c0       	rjmp	.+28     	; 0x213a <__unpack_f+0xc8>
    211e:	8f 57       	subi	r24, 0x7F	; 127
    2120:	90 40       	sbci	r25, 0x00	; 0
    2122:	93 83       	std	Z+3, r25	; 0x03
    2124:	82 83       	std	Z+2, r24	; 0x02
    2126:	83 e0       	ldi	r24, 0x03	; 3
    2128:	80 83       	st	Z, r24
    212a:	87 e0       	ldi	r24, 0x07	; 7
    212c:	44 0f       	add	r20, r20
    212e:	55 1f       	adc	r21, r21
    2130:	66 1f       	adc	r22, r22
    2132:	77 1f       	adc	r23, r23
    2134:	8a 95       	dec	r24
    2136:	d1 f7       	brne	.-12     	; 0x212c <__unpack_f+0xba>
    2138:	70 64       	ori	r23, 0x40	; 64
    213a:	44 83       	std	Z+4, r20	; 0x04
    213c:	55 83       	std	Z+5, r21	; 0x05
    213e:	66 83       	std	Z+6, r22	; 0x06
    2140:	77 83       	std	Z+7, r23	; 0x07
    2142:	08 95       	ret

00002144 <__fpcmp_parts_f>:
    2144:	cf 93       	push	r28
    2146:	fc 01       	movw	r30, r24
    2148:	db 01       	movw	r26, r22
    214a:	90 81       	ld	r25, Z
    214c:	92 30       	cpi	r25, 0x02	; 2
    214e:	08 f4       	brcc	.+2      	; 0x2152 <__fpcmp_parts_f+0xe>
    2150:	4c c0       	rjmp	.+152    	; 0x21ea <__fpcmp_parts_f+0xa6>
    2152:	8c 91       	ld	r24, X
    2154:	82 30       	cpi	r24, 0x02	; 2
    2156:	08 f4       	brcc	.+2      	; 0x215a <__fpcmp_parts_f+0x16>
    2158:	48 c0       	rjmp	.+144    	; 0x21ea <__fpcmp_parts_f+0xa6>
    215a:	94 30       	cpi	r25, 0x04	; 4
    215c:	69 f4       	brne	.+26     	; 0x2178 <__fpcmp_parts_f+0x34>
    215e:	21 81       	ldd	r18, Z+1	; 0x01
    2160:	84 30       	cpi	r24, 0x04	; 4
    2162:	39 f4       	brne	.+14     	; 0x2172 <__fpcmp_parts_f+0x2e>
    2164:	11 96       	adiw	r26, 0x01	; 1
    2166:	8c 91       	ld	r24, X
    2168:	11 97       	sbiw	r26, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	82 1b       	sub	r24, r18
    216e:	91 09       	sbc	r25, r1
    2170:	44 c0       	rjmp	.+136    	; 0x21fa <__fpcmp_parts_f+0xb6>
    2172:	22 23       	and	r18, r18
    2174:	d1 f1       	breq	.+116    	; 0x21ea <__fpcmp_parts_f+0xa6>
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <__fpcmp_parts_f+0xb2>
    2178:	84 30       	cpi	r24, 0x04	; 4
    217a:	21 f0       	breq	.+8      	; 0x2184 <__fpcmp_parts_f+0x40>
    217c:	92 30       	cpi	r25, 0x02	; 2
    217e:	41 f4       	brne	.+16     	; 0x2190 <__fpcmp_parts_f+0x4c>
    2180:	82 30       	cpi	r24, 0x02	; 2
    2182:	b1 f1       	breq	.+108    	; 0x21f0 <__fpcmp_parts_f+0xac>
    2184:	11 96       	adiw	r26, 0x01	; 1
    2186:	8c 91       	ld	r24, X
    2188:	11 97       	sbiw	r26, 0x01	; 1
    218a:	88 23       	and	r24, r24
    218c:	a1 f1       	breq	.+104    	; 0x21f6 <__fpcmp_parts_f+0xb2>
    218e:	2d c0       	rjmp	.+90     	; 0x21ea <__fpcmp_parts_f+0xa6>
    2190:	c1 81       	ldd	r28, Z+1	; 0x01
    2192:	82 30       	cpi	r24, 0x02	; 2
    2194:	01 f1       	breq	.+64     	; 0x21d6 <__fpcmp_parts_f+0x92>
    2196:	11 96       	adiw	r26, 0x01	; 1
    2198:	8c 91       	ld	r24, X
    219a:	11 97       	sbiw	r26, 0x01	; 1
    219c:	c8 17       	cp	r28, r24
    219e:	d9 f4       	brne	.+54     	; 0x21d6 <__fpcmp_parts_f+0x92>
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	12 96       	adiw	r26, 0x02	; 2
    21a6:	2d 91       	ld	r18, X+
    21a8:	3c 91       	ld	r19, X
    21aa:	13 97       	sbiw	r26, 0x03	; 3
    21ac:	28 17       	cp	r18, r24
    21ae:	39 07       	cpc	r19, r25
    21b0:	94 f0       	brlt	.+36     	; 0x21d6 <__fpcmp_parts_f+0x92>
    21b2:	82 17       	cp	r24, r18
    21b4:	93 07       	cpc	r25, r19
    21b6:	bc f0       	brlt	.+46     	; 0x21e6 <__fpcmp_parts_f+0xa2>
    21b8:	44 81       	ldd	r20, Z+4	; 0x04
    21ba:	55 81       	ldd	r21, Z+5	; 0x05
    21bc:	66 81       	ldd	r22, Z+6	; 0x06
    21be:	77 81       	ldd	r23, Z+7	; 0x07
    21c0:	14 96       	adiw	r26, 0x04	; 4
    21c2:	8d 91       	ld	r24, X+
    21c4:	9d 91       	ld	r25, X+
    21c6:	0d 90       	ld	r0, X+
    21c8:	bc 91       	ld	r27, X
    21ca:	a0 2d       	mov	r26, r0
    21cc:	84 17       	cp	r24, r20
    21ce:	95 07       	cpc	r25, r21
    21d0:	a6 07       	cpc	r26, r22
    21d2:	b7 07       	cpc	r27, r23
    21d4:	18 f4       	brcc	.+6      	; 0x21dc <__fpcmp_parts_f+0x98>
    21d6:	cc 23       	and	r28, r28
    21d8:	41 f0       	breq	.+16     	; 0x21ea <__fpcmp_parts_f+0xa6>
    21da:	0d c0       	rjmp	.+26     	; 0x21f6 <__fpcmp_parts_f+0xb2>
    21dc:	48 17       	cp	r20, r24
    21de:	59 07       	cpc	r21, r25
    21e0:	6a 07       	cpc	r22, r26
    21e2:	7b 07       	cpc	r23, r27
    21e4:	28 f4       	brcc	.+10     	; 0x21f0 <__fpcmp_parts_f+0xac>
    21e6:	cc 23       	and	r28, r28
    21e8:	31 f0       	breq	.+12     	; 0x21f6 <__fpcmp_parts_f+0xb2>
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	05 c0       	rjmp	.+10     	; 0x21fa <__fpcmp_parts_f+0xb6>
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <__fpcmp_parts_f+0xb6>
    21f6:	8f ef       	ldi	r24, 0xFF	; 255
    21f8:	9f ef       	ldi	r25, 0xFF	; 255
    21fa:	cf 91       	pop	r28
    21fc:	08 95       	ret

000021fe <main>:
  /* Restore FPU context here (if necessary) */
  /* Enable interrupts here */
}

int main(void)
{
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	00 d0       	rcall	.+0      	; 0x2204 <main+0x6>
    2204:	00 d0       	rcall	.+0      	; 0x2206 <main+0x8>
    2206:	00 d0       	rcall	.+0      	; 0x2208 <main+0xa>
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
   unsigned int tempTime = 0;
   char temp[6];
   
   unsigned int firstMove = 0;

	can_init(b250k   );   // CAN 보레이트를 원하는 값으로 세팅한다.
    220c:	83 e0       	ldi	r24, 0x03	; 3
    220e:	0e 94 6b 00 	call	0xd6	; 0xd6 <can_init>

   unsigned char *button;
   can_init(5);       // 초기화
    2212:	85 e0       	ldi	r24, 0x05	; 5
    2214:	0e 94 6b 00 	call	0xd6	; 0xd6 <can_init>
   can_init_8Mhz(5);
    2218:	85 e0       	ldi	r24, 0x05	; 5
    221a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <can_init_8Mhz>
   can_rx_set(1, 0x01, EXT, 8, 0x00, 0x05  );       // CAN 수신기 초기화 
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	70 e0       	ldi	r23, 0x00	; 0
    2228:	21 e0       	ldi	r18, 0x01	; 1
    222a:	08 e0       	ldi	r16, 0x08	; 8
    222c:	cc 24       	eor	r12, r12
    222e:	dd 24       	eor	r13, r13
    2230:	76 01       	movw	r14, r12
    2232:	e5 e0       	ldi	r30, 0x05	; 5
    2234:	ae 2e       	mov	r10, r30
    2236:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <can_rx_set>

   ADMUX = 0x00;                                 // single-ended ADC3
    223a:	10 92 7c 00 	sts	0x007C, r1
   ADCSRA = 0x86;                                // ADC enable, 125kHz
    223e:	86 e8       	ldi	r24, 0x86	; 134
    2240:	80 93 7a 00 	sts	0x007A, r24



   initPort();      // 입출력 포트 초기화
    2244:	0e 94 38 08 	call	0x1070	; 0x1070 <initPort>

    LCD_init();     // LCD 초기화
    2248:	0e 94 05 09 	call	0x120a	; 0x120a <LCD_init>

   initMotor();   // 스텝모터 제어를 위한 타이머/카운터 초기화 
    224c:	0e 94 41 08 	call	0x1082	; 0x1082 <initMotor>

   sei();         // 사용이유에 대해서 보고서에 첨부하기바람.
    2250:	78 94       	sei

   LCD_cmd(0x01);   // LCD 화면 지우기 
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_cmd>
 
 // 디버그용 코드 
    speed = 3;
	//gyro_x = 40;
	distance_check = 0;
    2258:	10 92 4d 03 	sts	0x034D, r1
    225c:	10 92 4c 03 	sts	0x034C, r1
   if (msg3.data[0] == 0) LCD_Write(0,0, "WAIT");//모드 출력
   if (msg3.data[0] == 1) LCD_Write(0,0, "SPUP");//모드 출력
   if (msg3.data[0] == 2) LCD_Write(0,0, "SPDN");//모드 출력
   if (msg3.data[0] == 4) LCD_Write(0,0, "INIT");//모드 출력

   sprintf(temp,"%d", gyro_x );
    2260:	8e 01       	movw	r16, r28
    2262:	0f 5f       	subi	r16, 0xFF	; 255
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	fc e1       	ldi	r31, 0x1C	; 28
    2268:	ef 2e       	mov	r14, r31
    226a:	f1 e0       	ldi	r31, 0x01	; 1
    226c:	ff 2e       	mov	r15, r31
	

 

  
	gyro_x = Viking();
    226e:	0e 94 41 07 	call	0xe82	; 0xe82 <Viking>
    2272:	90 93 4b 03 	sts	0x034B, r25
    2276:	80 93 4a 03 	sts	0x034A, r24

   can_rx(1, &msg1);
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	69 e0       	ldi	r22, 0x09	; 9
    227e:	73 e0       	ldi	r23, 0x03	; 3
    2280:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <can_rx>

   rt_OneStep();
    2284:	0e 94 79 08 	call	0x10f2	; 0x10f2 <rt_OneStep>
  

   if (msg3.data[0] == 0) LCD_Write(0,0, "WAIT");//모드 출력
    2288:	80 91 26 01 	lds	r24, 0x0126
    228c:	88 23       	and	r24, r24
    228e:	29 f4       	brne	.+10     	; 0x229a <main+0x9c>
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	48 e0       	ldi	r20, 0x08	; 8
    2294:	51 e0       	ldi	r21, 0x01	; 1
    2296:	0e 94 3f 09 	call	0x127e	; 0x127e <LCD_Write>
   if (msg3.data[0] == 1) LCD_Write(0,0, "SPUP");//모드 출력
    229a:	80 91 26 01 	lds	r24, 0x0126
    229e:	81 30       	cpi	r24, 0x01	; 1
    22a0:	31 f4       	brne	.+12     	; 0x22ae <main+0xb0>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	60 e0       	ldi	r22, 0x00	; 0
    22a6:	4d e0       	ldi	r20, 0x0D	; 13
    22a8:	51 e0       	ldi	r21, 0x01	; 1
    22aa:	0e 94 3f 09 	call	0x127e	; 0x127e <LCD_Write>
   if (msg3.data[0] == 2) LCD_Write(0,0, "SPDN");//모드 출력
    22ae:	80 91 26 01 	lds	r24, 0x0126
    22b2:	82 30       	cpi	r24, 0x02	; 2
    22b4:	31 f4       	brne	.+12     	; 0x22c2 <main+0xc4>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	42 e1       	ldi	r20, 0x12	; 18
    22bc:	51 e0       	ldi	r21, 0x01	; 1
    22be:	0e 94 3f 09 	call	0x127e	; 0x127e <LCD_Write>
   if (msg3.data[0] == 4) LCD_Write(0,0, "INIT");//모드 출력
    22c2:	80 91 26 01 	lds	r24, 0x0126
    22c6:	84 30       	cpi	r24, 0x04	; 4
    22c8:	31 f4       	brne	.+12     	; 0x22d6 <main+0xd8>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	47 e1       	ldi	r20, 0x17	; 23
    22d0:	51 e0       	ldi	r21, 0x01	; 1
    22d2:	0e 94 3f 09 	call	0x127e	; 0x127e <LCD_Write>

   sprintf(temp,"%d", gyro_x );
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <main+0xda>
    22d8:	00 d0       	rcall	.+0      	; 0x22da <main+0xdc>
    22da:	00 d0       	rcall	.+0      	; 0x22dc <main+0xde>
    22dc:	ed b7       	in	r30, 0x3d	; 61
    22de:	fe b7       	in	r31, 0x3e	; 62
    22e0:	31 96       	adiw	r30, 0x01	; 1
    22e2:	ad b7       	in	r26, 0x3d	; 61
    22e4:	be b7       	in	r27, 0x3e	; 62
    22e6:	12 96       	adiw	r26, 0x02	; 2
    22e8:	1c 93       	st	X, r17
    22ea:	0e 93       	st	-X, r16
    22ec:	11 97       	sbiw	r26, 0x01	; 1
    22ee:	f3 82       	std	Z+3, r15	; 0x03
    22f0:	e2 82       	std	Z+2, r14	; 0x02
    22f2:	80 91 4a 03 	lds	r24, 0x034A
    22f6:	90 91 4b 03 	lds	r25, 0x034B
    22fa:	95 83       	std	Z+5, r25	; 0x05
    22fc:	84 83       	std	Z+4, r24	; 0x04
    22fe:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <sprintf>
	LCD_Write(10,1, temp);
    2302:	8d b7       	in	r24, 0x3d	; 61
    2304:	9e b7       	in	r25, 0x3e	; 62
    2306:	06 96       	adiw	r24, 0x06	; 6
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	9e bf       	out	0x3e, r25	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	8d bf       	out	0x3d, r24	; 61
    2312:	8a e0       	ldi	r24, 0x0A	; 10
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	a8 01       	movw	r20, r16
    2318:	0e 94 3f 09 	call	0x127e	; 0x127e <LCD_Write>

    sprintf(temp,"%d",distance_check);
    231c:	00 d0       	rcall	.+0      	; 0x231e <main+0x120>
    231e:	00 d0       	rcall	.+0      	; 0x2320 <main+0x122>
    2320:	00 d0       	rcall	.+0      	; 0x2322 <main+0x124>
    2322:	ed b7       	in	r30, 0x3d	; 61
    2324:	fe b7       	in	r31, 0x3e	; 62
    2326:	31 96       	adiw	r30, 0x01	; 1
    2328:	ad b7       	in	r26, 0x3d	; 61
    232a:	be b7       	in	r27, 0x3e	; 62
    232c:	12 96       	adiw	r26, 0x02	; 2
    232e:	1c 93       	st	X, r17
    2330:	0e 93       	st	-X, r16
    2332:	11 97       	sbiw	r26, 0x01	; 1
    2334:	f3 82       	std	Z+3, r15	; 0x03
    2336:	e2 82       	std	Z+2, r14	; 0x02
    2338:	80 91 4c 03 	lds	r24, 0x034C
    233c:	90 91 4d 03 	lds	r25, 0x034D
    2340:	95 83       	std	Z+5, r25	; 0x05
    2342:	84 83       	std	Z+4, r24	; 0x04
    2344:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <sprintf>
    LCD_Write(0,1, temp);
    2348:	8d b7       	in	r24, 0x3d	; 61
    234a:	9e b7       	in	r25, 0x3e	; 62
    234c:	06 96       	adiw	r24, 0x06	; 6
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	9e bf       	out	0x3e, r25	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	8d bf       	out	0x3d, r24	; 61
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	61 e0       	ldi	r22, 0x01	; 1
    235c:	a8 01       	movw	r20, r16
    235e:	0e 94 3f 09 	call	0x127e	; 0x127e <LCD_Write>
    


  }
    2362:	85 cf       	rjmp	.-246    	; 0x226e <main+0x70>

00002364 <__prologue_saves__>:
    2364:	2f 92       	push	r2
    2366:	3f 92       	push	r3
    2368:	4f 92       	push	r4
    236a:	5f 92       	push	r5
    236c:	6f 92       	push	r6
    236e:	7f 92       	push	r7
    2370:	8f 92       	push	r8
    2372:	9f 92       	push	r9
    2374:	af 92       	push	r10
    2376:	bf 92       	push	r11
    2378:	cf 92       	push	r12
    237a:	df 92       	push	r13
    237c:	ef 92       	push	r14
    237e:	ff 92       	push	r15
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	ca 1b       	sub	r28, r26
    238e:	db 0b       	sbc	r29, r27
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	09 94       	ijmp

0000239c <__epilogue_restores__>:
    239c:	2a 88       	ldd	r2, Y+18	; 0x12
    239e:	39 88       	ldd	r3, Y+17	; 0x11
    23a0:	48 88       	ldd	r4, Y+16	; 0x10
    23a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    23a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    23a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    23a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    23aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    23ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    23ae:	b9 84       	ldd	r11, Y+9	; 0x09
    23b0:	c8 84       	ldd	r12, Y+8	; 0x08
    23b2:	df 80       	ldd	r13, Y+7	; 0x07
    23b4:	ee 80       	ldd	r14, Y+6	; 0x06
    23b6:	fd 80       	ldd	r15, Y+5	; 0x05
    23b8:	0c 81       	ldd	r16, Y+4	; 0x04
    23ba:	1b 81       	ldd	r17, Y+3	; 0x03
    23bc:	aa 81       	ldd	r26, Y+2	; 0x02
    23be:	b9 81       	ldd	r27, Y+1	; 0x01
    23c0:	ce 0f       	add	r28, r30
    23c2:	d1 1d       	adc	r29, r1
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	ed 01       	movw	r28, r26
    23d0:	08 95       	ret

000023d2 <sprintf>:
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	2e 97       	sbiw	r28, 0x0e	; 14
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	0d 89       	ldd	r16, Y+21	; 0x15
    23ec:	1e 89       	ldd	r17, Y+22	; 0x16
    23ee:	86 e0       	ldi	r24, 0x06	; 6
    23f0:	8c 83       	std	Y+4, r24	; 0x04
    23f2:	1a 83       	std	Y+2, r17	; 0x02
    23f4:	09 83       	std	Y+1, r16	; 0x01
    23f6:	8f ef       	ldi	r24, 0xFF	; 255
    23f8:	9f e7       	ldi	r25, 0x7F	; 127
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
    23fe:	ae 01       	movw	r20, r28
    2400:	47 5e       	subi	r20, 0xE7	; 231
    2402:	5f 4f       	sbci	r21, 0xFF	; 255
    2404:	ce 01       	movw	r24, r28
    2406:	01 96       	adiw	r24, 0x01	; 1
    2408:	6f 89       	ldd	r22, Y+23	; 0x17
    240a:	78 8d       	ldd	r23, Y+24	; 0x18
    240c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vfprintf>
    2410:	ef 81       	ldd	r30, Y+7	; 0x07
    2412:	f8 85       	ldd	r31, Y+8	; 0x08
    2414:	e0 0f       	add	r30, r16
    2416:	f1 1f       	adc	r31, r17
    2418:	10 82       	st	Z, r1
    241a:	2e 96       	adiw	r28, 0x0e	; 14
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	08 95       	ret

00002430 <floor>:
    2430:	3b d0       	rcall	.+118    	; 0x24a8 <__fp_trunc>
    2432:	80 f0       	brcs	.+32     	; 0x2454 <floor+0x24>
    2434:	9f 37       	cpi	r25, 0x7F	; 127
    2436:	40 f4       	brcc	.+16     	; 0x2448 <floor+0x18>
    2438:	91 11       	cpse	r25, r1
    243a:	0e f0       	brts	.+2      	; 0x243e <floor+0xe>
    243c:	4d c0       	rjmp	.+154    	; 0x24d8 <__fp_szero>
    243e:	60 e0       	ldi	r22, 0x00	; 0
    2440:	70 e0       	ldi	r23, 0x00	; 0
    2442:	80 e8       	ldi	r24, 0x80	; 128
    2444:	9f eb       	ldi	r25, 0xBF	; 191
    2446:	08 95       	ret
    2448:	26 f4       	brtc	.+8      	; 0x2452 <floor+0x22>
    244a:	1b 16       	cp	r1, r27
    244c:	61 1d       	adc	r22, r1
    244e:	71 1d       	adc	r23, r1
    2450:	81 1d       	adc	r24, r1
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <__fp_mintl>
    2454:	1b c0       	rjmp	.+54     	; 0x248c <__fp_mpack>

00002456 <__fp_mintl>:
    2456:	88 23       	and	r24, r24
    2458:	71 f4       	brne	.+28     	; 0x2476 <__fp_mintl+0x20>
    245a:	77 23       	and	r23, r23
    245c:	21 f0       	breq	.+8      	; 0x2466 <__fp_mintl+0x10>
    245e:	98 50       	subi	r25, 0x08	; 8
    2460:	87 2b       	or	r24, r23
    2462:	76 2f       	mov	r23, r22
    2464:	07 c0       	rjmp	.+14     	; 0x2474 <__fp_mintl+0x1e>
    2466:	66 23       	and	r22, r22
    2468:	11 f4       	brne	.+4      	; 0x246e <__fp_mintl+0x18>
    246a:	99 27       	eor	r25, r25
    246c:	0d c0       	rjmp	.+26     	; 0x2488 <__fp_mintl+0x32>
    246e:	90 51       	subi	r25, 0x10	; 16
    2470:	86 2b       	or	r24, r22
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	2a f0       	brmi	.+10     	; 0x2482 <__fp_mintl+0x2c>
    2478:	9a 95       	dec	r25
    247a:	66 0f       	add	r22, r22
    247c:	77 1f       	adc	r23, r23
    247e:	88 1f       	adc	r24, r24
    2480:	da f7       	brpl	.-10     	; 0x2478 <__fp_mintl+0x22>
    2482:	88 0f       	add	r24, r24
    2484:	96 95       	lsr	r25
    2486:	87 95       	ror	r24
    2488:	97 f9       	bld	r25, 7
    248a:	08 95       	ret

0000248c <__fp_mpack>:
    248c:	9f 3f       	cpi	r25, 0xFF	; 255
    248e:	31 f0       	breq	.+12     	; 0x249c <__fp_mpack_finite+0xc>

00002490 <__fp_mpack_finite>:
    2490:	91 50       	subi	r25, 0x01	; 1
    2492:	20 f4       	brcc	.+8      	; 0x249c <__fp_mpack_finite+0xc>
    2494:	87 95       	ror	r24
    2496:	77 95       	ror	r23
    2498:	67 95       	ror	r22
    249a:	b7 95       	ror	r27
    249c:	88 0f       	add	r24, r24
    249e:	91 1d       	adc	r25, r1
    24a0:	96 95       	lsr	r25
    24a2:	87 95       	ror	r24
    24a4:	97 f9       	bld	r25, 7
    24a6:	08 95       	ret

000024a8 <__fp_trunc>:
    24a8:	cc d2       	rcall	.+1432   	; 0x2a42 <__fp_splitA>
    24aa:	a0 f0       	brcs	.+40     	; 0x24d4 <__fp_trunc+0x2c>
    24ac:	be e7       	ldi	r27, 0x7E	; 126
    24ae:	b9 17       	cp	r27, r25
    24b0:	88 f4       	brcc	.+34     	; 0x24d4 <__fp_trunc+0x2c>
    24b2:	bb 27       	eor	r27, r27
    24b4:	9f 38       	cpi	r25, 0x8F	; 143
    24b6:	60 f4       	brcc	.+24     	; 0x24d0 <__fp_trunc+0x28>
    24b8:	16 16       	cp	r1, r22
    24ba:	b1 1d       	adc	r27, r1
    24bc:	67 2f       	mov	r22, r23
    24be:	78 2f       	mov	r23, r24
    24c0:	88 27       	eor	r24, r24
    24c2:	98 5f       	subi	r25, 0xF8	; 248
    24c4:	f7 cf       	rjmp	.-18     	; 0x24b4 <__fp_trunc+0xc>
    24c6:	86 95       	lsr	r24
    24c8:	77 95       	ror	r23
    24ca:	67 95       	ror	r22
    24cc:	b1 1d       	adc	r27, r1
    24ce:	93 95       	inc	r25
    24d0:	96 39       	cpi	r25, 0x96	; 150
    24d2:	c8 f3       	brcs	.-14     	; 0x24c6 <__fp_trunc+0x1e>
    24d4:	08 95       	ret

000024d6 <__fp_zero>:
    24d6:	e8 94       	clt

000024d8 <__fp_szero>:
    24d8:	bb 27       	eor	r27, r27
    24da:	66 27       	eor	r22, r22
    24dc:	77 27       	eor	r23, r23
    24de:	cb 01       	movw	r24, r22
    24e0:	97 f9       	bld	r25, 7
    24e2:	08 95       	ret

000024e4 <vfprintf>:
    24e4:	2f 92       	push	r2
    24e6:	3f 92       	push	r3
    24e8:	4f 92       	push	r4
    24ea:	5f 92       	push	r5
    24ec:	6f 92       	push	r6
    24ee:	7f 92       	push	r7
    24f0:	8f 92       	push	r8
    24f2:	9f 92       	push	r9
    24f4:	af 92       	push	r10
    24f6:	bf 92       	push	r11
    24f8:	cf 92       	push	r12
    24fa:	df 92       	push	r13
    24fc:	ef 92       	push	r14
    24fe:	ff 92       	push	r15
    2500:	0f 93       	push	r16
    2502:	1f 93       	push	r17
    2504:	cf 93       	push	r28
    2506:	df 93       	push	r29
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	2d 97       	sbiw	r28, 0x0d	; 13
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	3c 01       	movw	r6, r24
    251a:	7d 87       	std	Y+13, r23	; 0x0d
    251c:	6c 87       	std	Y+12, r22	; 0x0c
    251e:	5a 01       	movw	r10, r20
    2520:	fc 01       	movw	r30, r24
    2522:	17 82       	std	Z+7, r1	; 0x07
    2524:	16 82       	std	Z+6, r1	; 0x06
    2526:	83 81       	ldd	r24, Z+3	; 0x03
    2528:	81 ff       	sbrs	r24, 1
    252a:	c8 c1       	rjmp	.+912    	; 0x28bc <vfprintf+0x3d8>
    252c:	2e 01       	movw	r4, r28
    252e:	08 94       	sec
    2530:	41 1c       	adc	r4, r1
    2532:	51 1c       	adc	r5, r1
    2534:	f3 01       	movw	r30, r6
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	ec 85       	ldd	r30, Y+12	; 0x0c
    253a:	fd 85       	ldd	r31, Y+13	; 0x0d
    253c:	93 fd       	sbrc	r25, 3
    253e:	85 91       	lpm	r24, Z+
    2540:	93 ff       	sbrs	r25, 3
    2542:	81 91       	ld	r24, Z+
    2544:	fd 87       	std	Y+13, r31	; 0x0d
    2546:	ec 87       	std	Y+12, r30	; 0x0c
    2548:	88 23       	and	r24, r24
    254a:	09 f4       	brne	.+2      	; 0x254e <vfprintf+0x6a>
    254c:	b3 c1       	rjmp	.+870    	; 0x28b4 <vfprintf+0x3d0>
    254e:	85 32       	cpi	r24, 0x25	; 37
    2550:	41 f4       	brne	.+16     	; 0x2562 <vfprintf+0x7e>
    2552:	93 fd       	sbrc	r25, 3
    2554:	85 91       	lpm	r24, Z+
    2556:	93 ff       	sbrs	r25, 3
    2558:	81 91       	ld	r24, Z+
    255a:	fd 87       	std	Y+13, r31	; 0x0d
    255c:	ec 87       	std	Y+12, r30	; 0x0c
    255e:	85 32       	cpi	r24, 0x25	; 37
    2560:	29 f4       	brne	.+10     	; 0x256c <vfprintf+0x88>
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	b3 01       	movw	r22, r6
    2566:	0e 94 8f 14 	call	0x291e	; 0x291e <fputc>
    256a:	e4 cf       	rjmp	.-56     	; 0x2534 <vfprintf+0x50>
    256c:	ff 24       	eor	r15, r15
    256e:	ee 24       	eor	r14, r14
    2570:	10 e0       	ldi	r17, 0x00	; 0
    2572:	10 32       	cpi	r17, 0x20	; 32
    2574:	b0 f4       	brcc	.+44     	; 0x25a2 <vfprintf+0xbe>
    2576:	8b 32       	cpi	r24, 0x2B	; 43
    2578:	69 f0       	breq	.+26     	; 0x2594 <vfprintf+0xb0>
    257a:	8c 32       	cpi	r24, 0x2C	; 44
    257c:	28 f4       	brcc	.+10     	; 0x2588 <vfprintf+0xa4>
    257e:	80 32       	cpi	r24, 0x20	; 32
    2580:	51 f0       	breq	.+20     	; 0x2596 <vfprintf+0xb2>
    2582:	83 32       	cpi	r24, 0x23	; 35
    2584:	71 f4       	brne	.+28     	; 0x25a2 <vfprintf+0xbe>
    2586:	0b c0       	rjmp	.+22     	; 0x259e <vfprintf+0xba>
    2588:	8d 32       	cpi	r24, 0x2D	; 45
    258a:	39 f0       	breq	.+14     	; 0x259a <vfprintf+0xb6>
    258c:	80 33       	cpi	r24, 0x30	; 48
    258e:	49 f4       	brne	.+18     	; 0x25a2 <vfprintf+0xbe>
    2590:	11 60       	ori	r17, 0x01	; 1
    2592:	2c c0       	rjmp	.+88     	; 0x25ec <vfprintf+0x108>
    2594:	12 60       	ori	r17, 0x02	; 2
    2596:	14 60       	ori	r17, 0x04	; 4
    2598:	29 c0       	rjmp	.+82     	; 0x25ec <vfprintf+0x108>
    259a:	18 60       	ori	r17, 0x08	; 8
    259c:	27 c0       	rjmp	.+78     	; 0x25ec <vfprintf+0x108>
    259e:	10 61       	ori	r17, 0x10	; 16
    25a0:	25 c0       	rjmp	.+74     	; 0x25ec <vfprintf+0x108>
    25a2:	17 fd       	sbrc	r17, 7
    25a4:	2e c0       	rjmp	.+92     	; 0x2602 <vfprintf+0x11e>
    25a6:	28 2f       	mov	r18, r24
    25a8:	20 53       	subi	r18, 0x30	; 48
    25aa:	2a 30       	cpi	r18, 0x0A	; 10
    25ac:	98 f4       	brcc	.+38     	; 0x25d4 <vfprintf+0xf0>
    25ae:	16 ff       	sbrs	r17, 6
    25b0:	08 c0       	rjmp	.+16     	; 0x25c2 <vfprintf+0xde>
    25b2:	8f 2d       	mov	r24, r15
    25b4:	88 0f       	add	r24, r24
    25b6:	f8 2e       	mov	r15, r24
    25b8:	ff 0c       	add	r15, r15
    25ba:	ff 0c       	add	r15, r15
    25bc:	f8 0e       	add	r15, r24
    25be:	f2 0e       	add	r15, r18
    25c0:	15 c0       	rjmp	.+42     	; 0x25ec <vfprintf+0x108>
    25c2:	8e 2d       	mov	r24, r14
    25c4:	88 0f       	add	r24, r24
    25c6:	e8 2e       	mov	r14, r24
    25c8:	ee 0c       	add	r14, r14
    25ca:	ee 0c       	add	r14, r14
    25cc:	e8 0e       	add	r14, r24
    25ce:	e2 0e       	add	r14, r18
    25d0:	10 62       	ori	r17, 0x20	; 32
    25d2:	0c c0       	rjmp	.+24     	; 0x25ec <vfprintf+0x108>
    25d4:	8e 32       	cpi	r24, 0x2E	; 46
    25d6:	21 f4       	brne	.+8      	; 0x25e0 <vfprintf+0xfc>
    25d8:	16 fd       	sbrc	r17, 6
    25da:	6c c1       	rjmp	.+728    	; 0x28b4 <vfprintf+0x3d0>
    25dc:	10 64       	ori	r17, 0x40	; 64
    25de:	06 c0       	rjmp	.+12     	; 0x25ec <vfprintf+0x108>
    25e0:	8c 36       	cpi	r24, 0x6C	; 108
    25e2:	11 f4       	brne	.+4      	; 0x25e8 <vfprintf+0x104>
    25e4:	10 68       	ori	r17, 0x80	; 128
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <vfprintf+0x108>
    25e8:	88 36       	cpi	r24, 0x68	; 104
    25ea:	59 f4       	brne	.+22     	; 0x2602 <vfprintf+0x11e>
    25ec:	ec 85       	ldd	r30, Y+12	; 0x0c
    25ee:	fd 85       	ldd	r31, Y+13	; 0x0d
    25f0:	93 fd       	sbrc	r25, 3
    25f2:	85 91       	lpm	r24, Z+
    25f4:	93 ff       	sbrs	r25, 3
    25f6:	81 91       	ld	r24, Z+
    25f8:	fd 87       	std	Y+13, r31	; 0x0d
    25fa:	ec 87       	std	Y+12, r30	; 0x0c
    25fc:	88 23       	and	r24, r24
    25fe:	09 f0       	breq	.+2      	; 0x2602 <vfprintf+0x11e>
    2600:	b8 cf       	rjmp	.-144    	; 0x2572 <vfprintf+0x8e>
    2602:	98 2f       	mov	r25, r24
    2604:	95 54       	subi	r25, 0x45	; 69
    2606:	93 30       	cpi	r25, 0x03	; 3
    2608:	18 f0       	brcs	.+6      	; 0x2610 <vfprintf+0x12c>
    260a:	90 52       	subi	r25, 0x20	; 32
    260c:	93 30       	cpi	r25, 0x03	; 3
    260e:	38 f4       	brcc	.+14     	; 0x261e <vfprintf+0x13a>
    2610:	24 e0       	ldi	r18, 0x04	; 4
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	a2 0e       	add	r10, r18
    2616:	b3 1e       	adc	r11, r19
    2618:	3f e3       	ldi	r19, 0x3F	; 63
    261a:	39 83       	std	Y+1, r19	; 0x01
    261c:	0f c0       	rjmp	.+30     	; 0x263c <vfprintf+0x158>
    261e:	83 36       	cpi	r24, 0x63	; 99
    2620:	31 f0       	breq	.+12     	; 0x262e <vfprintf+0x14a>
    2622:	83 37       	cpi	r24, 0x73	; 115
    2624:	81 f0       	breq	.+32     	; 0x2646 <vfprintf+0x162>
    2626:	83 35       	cpi	r24, 0x53	; 83
    2628:	09 f0       	breq	.+2      	; 0x262c <vfprintf+0x148>
    262a:	5a c0       	rjmp	.+180    	; 0x26e0 <vfprintf+0x1fc>
    262c:	22 c0       	rjmp	.+68     	; 0x2672 <vfprintf+0x18e>
    262e:	f5 01       	movw	r30, r10
    2630:	80 81       	ld	r24, Z
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	22 e0       	ldi	r18, 0x02	; 2
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	a2 0e       	add	r10, r18
    263a:	b3 1e       	adc	r11, r19
    263c:	21 e0       	ldi	r18, 0x01	; 1
    263e:	c2 2e       	mov	r12, r18
    2640:	d1 2c       	mov	r13, r1
    2642:	42 01       	movw	r8, r4
    2644:	14 c0       	rjmp	.+40     	; 0x266e <vfprintf+0x18a>
    2646:	92 e0       	ldi	r25, 0x02	; 2
    2648:	29 2e       	mov	r2, r25
    264a:	31 2c       	mov	r3, r1
    264c:	2a 0c       	add	r2, r10
    264e:	3b 1c       	adc	r3, r11
    2650:	f5 01       	movw	r30, r10
    2652:	80 80       	ld	r8, Z
    2654:	91 80       	ldd	r9, Z+1	; 0x01
    2656:	16 ff       	sbrs	r17, 6
    2658:	03 c0       	rjmp	.+6      	; 0x2660 <vfprintf+0x17c>
    265a:	6f 2d       	mov	r22, r15
    265c:	70 e0       	ldi	r23, 0x00	; 0
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <vfprintf+0x180>
    2660:	6f ef       	ldi	r22, 0xFF	; 255
    2662:	7f ef       	ldi	r23, 0xFF	; 255
    2664:	c4 01       	movw	r24, r8
    2666:	0e 94 84 14 	call	0x2908	; 0x2908 <strnlen>
    266a:	6c 01       	movw	r12, r24
    266c:	51 01       	movw	r10, r2
    266e:	1f 77       	andi	r17, 0x7F	; 127
    2670:	15 c0       	rjmp	.+42     	; 0x269c <vfprintf+0x1b8>
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	28 2e       	mov	r2, r24
    2676:	31 2c       	mov	r3, r1
    2678:	2a 0c       	add	r2, r10
    267a:	3b 1c       	adc	r3, r11
    267c:	f5 01       	movw	r30, r10
    267e:	80 80       	ld	r8, Z
    2680:	91 80       	ldd	r9, Z+1	; 0x01
    2682:	16 ff       	sbrs	r17, 6
    2684:	03 c0       	rjmp	.+6      	; 0x268c <vfprintf+0x1a8>
    2686:	6f 2d       	mov	r22, r15
    2688:	70 e0       	ldi	r23, 0x00	; 0
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <vfprintf+0x1ac>
    268c:	6f ef       	ldi	r22, 0xFF	; 255
    268e:	7f ef       	ldi	r23, 0xFF	; 255
    2690:	c4 01       	movw	r24, r8
    2692:	0e 94 79 14 	call	0x28f2	; 0x28f2 <strnlen_P>
    2696:	6c 01       	movw	r12, r24
    2698:	10 68       	ori	r17, 0x80	; 128
    269a:	51 01       	movw	r10, r2
    269c:	13 fd       	sbrc	r17, 3
    269e:	1c c0       	rjmp	.+56     	; 0x26d8 <vfprintf+0x1f4>
    26a0:	06 c0       	rjmp	.+12     	; 0x26ae <vfprintf+0x1ca>
    26a2:	80 e2       	ldi	r24, 0x20	; 32
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	b3 01       	movw	r22, r6
    26a8:	0e 94 8f 14 	call	0x291e	; 0x291e <fputc>
    26ac:	ea 94       	dec	r14
    26ae:	8e 2d       	mov	r24, r14
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	c8 16       	cp	r12, r24
    26b4:	d9 06       	cpc	r13, r25
    26b6:	a8 f3       	brcs	.-22     	; 0x26a2 <vfprintf+0x1be>
    26b8:	0f c0       	rjmp	.+30     	; 0x26d8 <vfprintf+0x1f4>
    26ba:	f4 01       	movw	r30, r8
    26bc:	17 fd       	sbrc	r17, 7
    26be:	85 91       	lpm	r24, Z+
    26c0:	17 ff       	sbrs	r17, 7
    26c2:	81 91       	ld	r24, Z+
    26c4:	4f 01       	movw	r8, r30
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	b3 01       	movw	r22, r6
    26ca:	0e 94 8f 14 	call	0x291e	; 0x291e <fputc>
    26ce:	e1 10       	cpse	r14, r1
    26d0:	ea 94       	dec	r14
    26d2:	08 94       	sec
    26d4:	c1 08       	sbc	r12, r1
    26d6:	d1 08       	sbc	r13, r1
    26d8:	c1 14       	cp	r12, r1
    26da:	d1 04       	cpc	r13, r1
    26dc:	71 f7       	brne	.-36     	; 0x26ba <vfprintf+0x1d6>
    26de:	e7 c0       	rjmp	.+462    	; 0x28ae <vfprintf+0x3ca>
    26e0:	84 36       	cpi	r24, 0x64	; 100
    26e2:	11 f0       	breq	.+4      	; 0x26e8 <vfprintf+0x204>
    26e4:	89 36       	cpi	r24, 0x69	; 105
    26e6:	51 f5       	brne	.+84     	; 0x273c <vfprintf+0x258>
    26e8:	f5 01       	movw	r30, r10
    26ea:	17 ff       	sbrs	r17, 7
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <vfprintf+0x218>
    26ee:	80 81       	ld	r24, Z
    26f0:	91 81       	ldd	r25, Z+1	; 0x01
    26f2:	a2 81       	ldd	r26, Z+2	; 0x02
    26f4:	b3 81       	ldd	r27, Z+3	; 0x03
    26f6:	24 e0       	ldi	r18, 0x04	; 4
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	08 c0       	rjmp	.+16     	; 0x270c <vfprintf+0x228>
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	aa 27       	eor	r26, r26
    2702:	97 fd       	sbrc	r25, 7
    2704:	a0 95       	com	r26
    2706:	ba 2f       	mov	r27, r26
    2708:	22 e0       	ldi	r18, 0x02	; 2
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	a2 0e       	add	r10, r18
    270e:	b3 1e       	adc	r11, r19
    2710:	01 2f       	mov	r16, r17
    2712:	0f 76       	andi	r16, 0x6F	; 111
    2714:	b7 ff       	sbrs	r27, 7
    2716:	08 c0       	rjmp	.+16     	; 0x2728 <vfprintf+0x244>
    2718:	b0 95       	com	r27
    271a:	a0 95       	com	r26
    271c:	90 95       	com	r25
    271e:	81 95       	neg	r24
    2720:	9f 4f       	sbci	r25, 0xFF	; 255
    2722:	af 4f       	sbci	r26, 0xFF	; 255
    2724:	bf 4f       	sbci	r27, 0xFF	; 255
    2726:	00 68       	ori	r16, 0x80	; 128
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	a2 01       	movw	r20, r4
    272e:	2a e0       	ldi	r18, 0x0A	; 10
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	0e 94 bb 14 	call	0x2976	; 0x2976 <__ultoa_invert>
    2736:	d8 2e       	mov	r13, r24
    2738:	d4 18       	sub	r13, r4
    273a:	3f c0       	rjmp	.+126    	; 0x27ba <vfprintf+0x2d6>
    273c:	85 37       	cpi	r24, 0x75	; 117
    273e:	21 f4       	brne	.+8      	; 0x2748 <vfprintf+0x264>
    2740:	1f 7e       	andi	r17, 0xEF	; 239
    2742:	2a e0       	ldi	r18, 0x0A	; 10
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	20 c0       	rjmp	.+64     	; 0x2788 <vfprintf+0x2a4>
    2748:	19 7f       	andi	r17, 0xF9	; 249
    274a:	8f 36       	cpi	r24, 0x6F	; 111
    274c:	a9 f0       	breq	.+42     	; 0x2778 <vfprintf+0x294>
    274e:	80 37       	cpi	r24, 0x70	; 112
    2750:	20 f4       	brcc	.+8      	; 0x275a <vfprintf+0x276>
    2752:	88 35       	cpi	r24, 0x58	; 88
    2754:	09 f0       	breq	.+2      	; 0x2758 <vfprintf+0x274>
    2756:	ae c0       	rjmp	.+348    	; 0x28b4 <vfprintf+0x3d0>
    2758:	0b c0       	rjmp	.+22     	; 0x2770 <vfprintf+0x28c>
    275a:	80 37       	cpi	r24, 0x70	; 112
    275c:	21 f0       	breq	.+8      	; 0x2766 <vfprintf+0x282>
    275e:	88 37       	cpi	r24, 0x78	; 120
    2760:	09 f0       	breq	.+2      	; 0x2764 <vfprintf+0x280>
    2762:	a8 c0       	rjmp	.+336    	; 0x28b4 <vfprintf+0x3d0>
    2764:	01 c0       	rjmp	.+2      	; 0x2768 <vfprintf+0x284>
    2766:	10 61       	ori	r17, 0x10	; 16
    2768:	14 ff       	sbrs	r17, 4
    276a:	09 c0       	rjmp	.+18     	; 0x277e <vfprintf+0x29a>
    276c:	14 60       	ori	r17, 0x04	; 4
    276e:	07 c0       	rjmp	.+14     	; 0x277e <vfprintf+0x29a>
    2770:	14 ff       	sbrs	r17, 4
    2772:	08 c0       	rjmp	.+16     	; 0x2784 <vfprintf+0x2a0>
    2774:	16 60       	ori	r17, 0x06	; 6
    2776:	06 c0       	rjmp	.+12     	; 0x2784 <vfprintf+0x2a0>
    2778:	28 e0       	ldi	r18, 0x08	; 8
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	05 c0       	rjmp	.+10     	; 0x2788 <vfprintf+0x2a4>
    277e:	20 e1       	ldi	r18, 0x10	; 16
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <vfprintf+0x2a4>
    2784:	20 e1       	ldi	r18, 0x10	; 16
    2786:	32 e0       	ldi	r19, 0x02	; 2
    2788:	f5 01       	movw	r30, r10
    278a:	17 ff       	sbrs	r17, 7
    278c:	07 c0       	rjmp	.+14     	; 0x279c <vfprintf+0x2b8>
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	44 e0       	ldi	r20, 0x04	; 4
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	06 c0       	rjmp	.+12     	; 0x27a8 <vfprintf+0x2c4>
    279c:	60 81       	ld	r22, Z
    279e:	71 81       	ldd	r23, Z+1	; 0x01
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	42 e0       	ldi	r20, 0x02	; 2
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	a4 0e       	add	r10, r20
    27aa:	b5 1e       	adc	r11, r21
    27ac:	a2 01       	movw	r20, r4
    27ae:	0e 94 bb 14 	call	0x2976	; 0x2976 <__ultoa_invert>
    27b2:	d8 2e       	mov	r13, r24
    27b4:	d4 18       	sub	r13, r4
    27b6:	01 2f       	mov	r16, r17
    27b8:	0f 77       	andi	r16, 0x7F	; 127
    27ba:	06 ff       	sbrs	r16, 6
    27bc:	09 c0       	rjmp	.+18     	; 0x27d0 <vfprintf+0x2ec>
    27be:	0e 7f       	andi	r16, 0xFE	; 254
    27c0:	df 14       	cp	r13, r15
    27c2:	30 f4       	brcc	.+12     	; 0x27d0 <vfprintf+0x2ec>
    27c4:	04 ff       	sbrs	r16, 4
    27c6:	06 c0       	rjmp	.+12     	; 0x27d4 <vfprintf+0x2f0>
    27c8:	02 fd       	sbrc	r16, 2
    27ca:	04 c0       	rjmp	.+8      	; 0x27d4 <vfprintf+0x2f0>
    27cc:	0f 7e       	andi	r16, 0xEF	; 239
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <vfprintf+0x2f0>
    27d0:	1d 2d       	mov	r17, r13
    27d2:	01 c0       	rjmp	.+2      	; 0x27d6 <vfprintf+0x2f2>
    27d4:	1f 2d       	mov	r17, r15
    27d6:	80 2f       	mov	r24, r16
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	04 ff       	sbrs	r16, 4
    27dc:	0c c0       	rjmp	.+24     	; 0x27f6 <vfprintf+0x312>
    27de:	fe 01       	movw	r30, r28
    27e0:	ed 0d       	add	r30, r13
    27e2:	f1 1d       	adc	r31, r1
    27e4:	20 81       	ld	r18, Z
    27e6:	20 33       	cpi	r18, 0x30	; 48
    27e8:	11 f4       	brne	.+4      	; 0x27ee <vfprintf+0x30a>
    27ea:	09 7e       	andi	r16, 0xE9	; 233
    27ec:	09 c0       	rjmp	.+18     	; 0x2800 <vfprintf+0x31c>
    27ee:	02 ff       	sbrs	r16, 2
    27f0:	06 c0       	rjmp	.+12     	; 0x27fe <vfprintf+0x31a>
    27f2:	1e 5f       	subi	r17, 0xFE	; 254
    27f4:	05 c0       	rjmp	.+10     	; 0x2800 <vfprintf+0x31c>
    27f6:	86 78       	andi	r24, 0x86	; 134
    27f8:	90 70       	andi	r25, 0x00	; 0
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	09 f0       	breq	.+2      	; 0x2800 <vfprintf+0x31c>
    27fe:	1f 5f       	subi	r17, 0xFF	; 255
    2800:	80 2e       	mov	r8, r16
    2802:	99 24       	eor	r9, r9
    2804:	03 fd       	sbrc	r16, 3
    2806:	12 c0       	rjmp	.+36     	; 0x282c <vfprintf+0x348>
    2808:	00 ff       	sbrs	r16, 0
    280a:	0d c0       	rjmp	.+26     	; 0x2826 <vfprintf+0x342>
    280c:	fd 2c       	mov	r15, r13
    280e:	1e 15       	cp	r17, r14
    2810:	50 f4       	brcc	.+20     	; 0x2826 <vfprintf+0x342>
    2812:	fe 0c       	add	r15, r14
    2814:	f1 1a       	sub	r15, r17
    2816:	1e 2d       	mov	r17, r14
    2818:	06 c0       	rjmp	.+12     	; 0x2826 <vfprintf+0x342>
    281a:	80 e2       	ldi	r24, 0x20	; 32
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	b3 01       	movw	r22, r6
    2820:	0e 94 8f 14 	call	0x291e	; 0x291e <fputc>
    2824:	1f 5f       	subi	r17, 0xFF	; 255
    2826:	1e 15       	cp	r17, r14
    2828:	c0 f3       	brcs	.-16     	; 0x281a <vfprintf+0x336>
    282a:	04 c0       	rjmp	.+8      	; 0x2834 <vfprintf+0x350>
    282c:	1e 15       	cp	r17, r14
    282e:	10 f4       	brcc	.+4      	; 0x2834 <vfprintf+0x350>
    2830:	e1 1a       	sub	r14, r17
    2832:	01 c0       	rjmp	.+2      	; 0x2836 <vfprintf+0x352>
    2834:	ee 24       	eor	r14, r14
    2836:	84 fe       	sbrs	r8, 4
    2838:	0f c0       	rjmp	.+30     	; 0x2858 <vfprintf+0x374>
    283a:	80 e3       	ldi	r24, 0x30	; 48
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	b3 01       	movw	r22, r6
    2840:	0e 94 8f 14 	call	0x291e	; 0x291e <fputc>
    2844:	82 fe       	sbrs	r8, 2
    2846:	1f c0       	rjmp	.+62     	; 0x2886 <vfprintf+0x3a2>
    2848:	81 fe       	sbrs	r8, 1
    284a:	03 c0       	rjmp	.+6      	; 0x2852 <vfprintf+0x36e>
    284c:	88 e5       	ldi	r24, 0x58	; 88
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	10 c0       	rjmp	.+32     	; 0x2872 <vfprintf+0x38e>
    2852:	88 e7       	ldi	r24, 0x78	; 120
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	0d c0       	rjmp	.+26     	; 0x2872 <vfprintf+0x38e>
    2858:	c4 01       	movw	r24, r8
    285a:	86 78       	andi	r24, 0x86	; 134
    285c:	90 70       	andi	r25, 0x00	; 0
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	91 f0       	breq	.+36     	; 0x2886 <vfprintf+0x3a2>
    2862:	81 fc       	sbrc	r8, 1
    2864:	02 c0       	rjmp	.+4      	; 0x286a <vfprintf+0x386>
    2866:	80 e2       	ldi	r24, 0x20	; 32
    2868:	01 c0       	rjmp	.+2      	; 0x286c <vfprintf+0x388>
    286a:	8b e2       	ldi	r24, 0x2B	; 43
    286c:	07 fd       	sbrc	r16, 7
    286e:	8d e2       	ldi	r24, 0x2D	; 45
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	b3 01       	movw	r22, r6
    2874:	0e 94 8f 14 	call	0x291e	; 0x291e <fputc>
    2878:	06 c0       	rjmp	.+12     	; 0x2886 <vfprintf+0x3a2>
    287a:	80 e3       	ldi	r24, 0x30	; 48
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	b3 01       	movw	r22, r6
    2880:	0e 94 8f 14 	call	0x291e	; 0x291e <fputc>
    2884:	fa 94       	dec	r15
    2886:	df 14       	cp	r13, r15
    2888:	c0 f3       	brcs	.-16     	; 0x287a <vfprintf+0x396>
    288a:	da 94       	dec	r13
    288c:	f2 01       	movw	r30, r4
    288e:	ed 0d       	add	r30, r13
    2890:	f1 1d       	adc	r31, r1
    2892:	80 81       	ld	r24, Z
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	b3 01       	movw	r22, r6
    2898:	0e 94 8f 14 	call	0x291e	; 0x291e <fputc>
    289c:	dd 20       	and	r13, r13
    289e:	a9 f7       	brne	.-22     	; 0x288a <vfprintf+0x3a6>
    28a0:	06 c0       	rjmp	.+12     	; 0x28ae <vfprintf+0x3ca>
    28a2:	80 e2       	ldi	r24, 0x20	; 32
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	b3 01       	movw	r22, r6
    28a8:	0e 94 8f 14 	call	0x291e	; 0x291e <fputc>
    28ac:	ea 94       	dec	r14
    28ae:	ee 20       	and	r14, r14
    28b0:	c1 f7       	brne	.-16     	; 0x28a2 <vfprintf+0x3be>
    28b2:	40 ce       	rjmp	.-896    	; 0x2534 <vfprintf+0x50>
    28b4:	f3 01       	movw	r30, r6
    28b6:	86 81       	ldd	r24, Z+6	; 0x06
    28b8:	97 81       	ldd	r25, Z+7	; 0x07
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <vfprintf+0x3dc>
    28bc:	8f ef       	ldi	r24, 0xFF	; 255
    28be:	9f ef       	ldi	r25, 0xFF	; 255
    28c0:	2d 96       	adiw	r28, 0x0d	; 13
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	1f 91       	pop	r17
    28d2:	0f 91       	pop	r16
    28d4:	ff 90       	pop	r15
    28d6:	ef 90       	pop	r14
    28d8:	df 90       	pop	r13
    28da:	cf 90       	pop	r12
    28dc:	bf 90       	pop	r11
    28de:	af 90       	pop	r10
    28e0:	9f 90       	pop	r9
    28e2:	8f 90       	pop	r8
    28e4:	7f 90       	pop	r7
    28e6:	6f 90       	pop	r6
    28e8:	5f 90       	pop	r5
    28ea:	4f 90       	pop	r4
    28ec:	3f 90       	pop	r3
    28ee:	2f 90       	pop	r2
    28f0:	08 95       	ret

000028f2 <strnlen_P>:
    28f2:	fc 01       	movw	r30, r24
    28f4:	05 90       	lpm	r0, Z+
    28f6:	61 50       	subi	r22, 0x01	; 1
    28f8:	70 40       	sbci	r23, 0x00	; 0
    28fa:	01 10       	cpse	r0, r1
    28fc:	d8 f7       	brcc	.-10     	; 0x28f4 <strnlen_P+0x2>
    28fe:	80 95       	com	r24
    2900:	90 95       	com	r25
    2902:	8e 0f       	add	r24, r30
    2904:	9f 1f       	adc	r25, r31
    2906:	08 95       	ret

00002908 <strnlen>:
    2908:	fc 01       	movw	r30, r24
    290a:	61 50       	subi	r22, 0x01	; 1
    290c:	70 40       	sbci	r23, 0x00	; 0
    290e:	01 90       	ld	r0, Z+
    2910:	01 10       	cpse	r0, r1
    2912:	d8 f7       	brcc	.-10     	; 0x290a <strnlen+0x2>
    2914:	80 95       	com	r24
    2916:	90 95       	com	r25
    2918:	8e 0f       	add	r24, r30
    291a:	9f 1f       	adc	r25, r31
    291c:	08 95       	ret

0000291e <fputc>:
    291e:	0f 93       	push	r16
    2920:	1f 93       	push	r17
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	8c 01       	movw	r16, r24
    2928:	eb 01       	movw	r28, r22
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	81 ff       	sbrs	r24, 1
    292e:	1b c0       	rjmp	.+54     	; 0x2966 <fputc+0x48>
    2930:	82 ff       	sbrs	r24, 2
    2932:	0d c0       	rjmp	.+26     	; 0x294e <fputc+0x30>
    2934:	2e 81       	ldd	r18, Y+6	; 0x06
    2936:	3f 81       	ldd	r19, Y+7	; 0x07
    2938:	8c 81       	ldd	r24, Y+4	; 0x04
    293a:	9d 81       	ldd	r25, Y+5	; 0x05
    293c:	28 17       	cp	r18, r24
    293e:	39 07       	cpc	r19, r25
    2940:	64 f4       	brge	.+24     	; 0x295a <fputc+0x3c>
    2942:	e8 81       	ld	r30, Y
    2944:	f9 81       	ldd	r31, Y+1	; 0x01
    2946:	01 93       	st	Z+, r16
    2948:	f9 83       	std	Y+1, r31	; 0x01
    294a:	e8 83       	st	Y, r30
    294c:	06 c0       	rjmp	.+12     	; 0x295a <fputc+0x3c>
    294e:	e8 85       	ldd	r30, Y+8	; 0x08
    2950:	f9 85       	ldd	r31, Y+9	; 0x09
    2952:	80 2f       	mov	r24, r16
    2954:	09 95       	icall
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	31 f4       	brne	.+12     	; 0x2966 <fputc+0x48>
    295a:	8e 81       	ldd	r24, Y+6	; 0x06
    295c:	9f 81       	ldd	r25, Y+7	; 0x07
    295e:	01 96       	adiw	r24, 0x01	; 1
    2960:	9f 83       	std	Y+7, r25	; 0x07
    2962:	8e 83       	std	Y+6, r24	; 0x06
    2964:	02 c0       	rjmp	.+4      	; 0x296a <fputc+0x4c>
    2966:	0f ef       	ldi	r16, 0xFF	; 255
    2968:	1f ef       	ldi	r17, 0xFF	; 255
    296a:	c8 01       	movw	r24, r16
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	1f 91       	pop	r17
    2972:	0f 91       	pop	r16
    2974:	08 95       	ret

00002976 <__ultoa_invert>:
    2976:	fa 01       	movw	r30, r20
    2978:	aa 27       	eor	r26, r26
    297a:	28 30       	cpi	r18, 0x08	; 8
    297c:	51 f1       	breq	.+84     	; 0x29d2 <__ultoa_invert+0x5c>
    297e:	20 31       	cpi	r18, 0x10	; 16
    2980:	81 f1       	breq	.+96     	; 0x29e2 <__ultoa_invert+0x6c>
    2982:	e8 94       	clt
    2984:	6f 93       	push	r22
    2986:	6e 7f       	andi	r22, 0xFE	; 254
    2988:	6e 5f       	subi	r22, 0xFE	; 254
    298a:	7f 4f       	sbci	r23, 0xFF	; 255
    298c:	8f 4f       	sbci	r24, 0xFF	; 255
    298e:	9f 4f       	sbci	r25, 0xFF	; 255
    2990:	af 4f       	sbci	r26, 0xFF	; 255
    2992:	b1 e0       	ldi	r27, 0x01	; 1
    2994:	3e d0       	rcall	.+124    	; 0x2a12 <__ultoa_invert+0x9c>
    2996:	b4 e0       	ldi	r27, 0x04	; 4
    2998:	3c d0       	rcall	.+120    	; 0x2a12 <__ultoa_invert+0x9c>
    299a:	67 0f       	add	r22, r23
    299c:	78 1f       	adc	r23, r24
    299e:	89 1f       	adc	r24, r25
    29a0:	9a 1f       	adc	r25, r26
    29a2:	a1 1d       	adc	r26, r1
    29a4:	68 0f       	add	r22, r24
    29a6:	79 1f       	adc	r23, r25
    29a8:	8a 1f       	adc	r24, r26
    29aa:	91 1d       	adc	r25, r1
    29ac:	a1 1d       	adc	r26, r1
    29ae:	6a 0f       	add	r22, r26
    29b0:	71 1d       	adc	r23, r1
    29b2:	81 1d       	adc	r24, r1
    29b4:	91 1d       	adc	r25, r1
    29b6:	a1 1d       	adc	r26, r1
    29b8:	20 d0       	rcall	.+64     	; 0x29fa <__ultoa_invert+0x84>
    29ba:	09 f4       	brne	.+2      	; 0x29be <__ultoa_invert+0x48>
    29bc:	68 94       	set
    29be:	3f 91       	pop	r19
    29c0:	2a e0       	ldi	r18, 0x0A	; 10
    29c2:	26 9f       	mul	r18, r22
    29c4:	11 24       	eor	r1, r1
    29c6:	30 19       	sub	r19, r0
    29c8:	30 5d       	subi	r19, 0xD0	; 208
    29ca:	31 93       	st	Z+, r19
    29cc:	de f6       	brtc	.-74     	; 0x2984 <__ultoa_invert+0xe>
    29ce:	cf 01       	movw	r24, r30
    29d0:	08 95       	ret
    29d2:	46 2f       	mov	r20, r22
    29d4:	47 70       	andi	r20, 0x07	; 7
    29d6:	40 5d       	subi	r20, 0xD0	; 208
    29d8:	41 93       	st	Z+, r20
    29da:	b3 e0       	ldi	r27, 0x03	; 3
    29dc:	0f d0       	rcall	.+30     	; 0x29fc <__ultoa_invert+0x86>
    29de:	c9 f7       	brne	.-14     	; 0x29d2 <__ultoa_invert+0x5c>
    29e0:	f6 cf       	rjmp	.-20     	; 0x29ce <__ultoa_invert+0x58>
    29e2:	46 2f       	mov	r20, r22
    29e4:	4f 70       	andi	r20, 0x0F	; 15
    29e6:	40 5d       	subi	r20, 0xD0	; 208
    29e8:	4a 33       	cpi	r20, 0x3A	; 58
    29ea:	18 f0       	brcs	.+6      	; 0x29f2 <__ultoa_invert+0x7c>
    29ec:	49 5d       	subi	r20, 0xD9	; 217
    29ee:	31 fd       	sbrc	r19, 1
    29f0:	40 52       	subi	r20, 0x20	; 32
    29f2:	41 93       	st	Z+, r20
    29f4:	02 d0       	rcall	.+4      	; 0x29fa <__ultoa_invert+0x84>
    29f6:	a9 f7       	brne	.-22     	; 0x29e2 <__ultoa_invert+0x6c>
    29f8:	ea cf       	rjmp	.-44     	; 0x29ce <__ultoa_invert+0x58>
    29fa:	b4 e0       	ldi	r27, 0x04	; 4
    29fc:	a6 95       	lsr	r26
    29fe:	97 95       	ror	r25
    2a00:	87 95       	ror	r24
    2a02:	77 95       	ror	r23
    2a04:	67 95       	ror	r22
    2a06:	ba 95       	dec	r27
    2a08:	c9 f7       	brne	.-14     	; 0x29fc <__ultoa_invert+0x86>
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	61 05       	cpc	r22, r1
    2a0e:	71 05       	cpc	r23, r1
    2a10:	08 95       	ret
    2a12:	9b 01       	movw	r18, r22
    2a14:	ac 01       	movw	r20, r24
    2a16:	0a 2e       	mov	r0, r26
    2a18:	06 94       	lsr	r0
    2a1a:	57 95       	ror	r21
    2a1c:	47 95       	ror	r20
    2a1e:	37 95       	ror	r19
    2a20:	27 95       	ror	r18
    2a22:	ba 95       	dec	r27
    2a24:	c9 f7       	brne	.-14     	; 0x2a18 <__ultoa_invert+0xa2>
    2a26:	62 0f       	add	r22, r18
    2a28:	73 1f       	adc	r23, r19
    2a2a:	84 1f       	adc	r24, r20
    2a2c:	95 1f       	adc	r25, r21
    2a2e:	a0 1d       	adc	r26, r0
    2a30:	08 95       	ret

00002a32 <__fp_split3>:
    2a32:	57 fd       	sbrc	r21, 7
    2a34:	90 58       	subi	r25, 0x80	; 128
    2a36:	44 0f       	add	r20, r20
    2a38:	55 1f       	adc	r21, r21
    2a3a:	59 f0       	breq	.+22     	; 0x2a52 <__fp_splitA+0x10>
    2a3c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a3e:	71 f0       	breq	.+28     	; 0x2a5c <__fp_splitA+0x1a>
    2a40:	47 95       	ror	r20

00002a42 <__fp_splitA>:
    2a42:	88 0f       	add	r24, r24
    2a44:	97 fb       	bst	r25, 7
    2a46:	99 1f       	adc	r25, r25
    2a48:	61 f0       	breq	.+24     	; 0x2a62 <__fp_splitA+0x20>
    2a4a:	9f 3f       	cpi	r25, 0xFF	; 255
    2a4c:	79 f0       	breq	.+30     	; 0x2a6c <__fp_splitA+0x2a>
    2a4e:	87 95       	ror	r24
    2a50:	08 95       	ret
    2a52:	12 16       	cp	r1, r18
    2a54:	13 06       	cpc	r1, r19
    2a56:	14 06       	cpc	r1, r20
    2a58:	55 1f       	adc	r21, r21
    2a5a:	f2 cf       	rjmp	.-28     	; 0x2a40 <__fp_split3+0xe>
    2a5c:	46 95       	lsr	r20
    2a5e:	f1 df       	rcall	.-30     	; 0x2a42 <__fp_splitA>
    2a60:	08 c0       	rjmp	.+16     	; 0x2a72 <__fp_splitA+0x30>
    2a62:	16 16       	cp	r1, r22
    2a64:	17 06       	cpc	r1, r23
    2a66:	18 06       	cpc	r1, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	f1 cf       	rjmp	.-30     	; 0x2a4e <__fp_splitA+0xc>
    2a6c:	86 95       	lsr	r24
    2a6e:	71 05       	cpc	r23, r1
    2a70:	61 05       	cpc	r22, r1
    2a72:	08 94       	sec
    2a74:	08 95       	ret

00002a76 <_exit>:
    2a76:	f8 94       	cli

00002a78 <__stop_program>:
    2a78:	ff cf       	rjmp	.-2      	; 0x2a78 <__stop_program>
