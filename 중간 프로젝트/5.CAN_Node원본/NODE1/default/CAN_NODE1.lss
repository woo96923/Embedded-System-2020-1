
CAN_NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000e78  00000f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  0080016c  0080016c  00000f78  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000168  00000000  00000000  000016d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fd1  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000048c  00000000  00000000  00002809  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ed  00000000  00000000  00002c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00003584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000309  00000000  00000000  00003804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000beb  00000000  00000000  00003b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000046f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_25>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e8 e7       	ldi	r30, 0x78	; 120
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ac 36       	cpi	r26, 0x6C	; 108
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	ac e6       	ldi	r26, 0x6C	; 108
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	ae 39       	cpi	r26, 0x9E	; 158
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <main>
  ce:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <initAdc>:
// PF0: ADC0 조이스틱 y축 
// PF1: ADC1 조이스틱 x축
//=========================================================

void initAdc(void){
   ADMUX =  0x40;  // 기준전압; 외부 캐퍼시터 가진 AVcc(AREF 핀)
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	80 93 7c 00 	sts	0x007C, r24
               // AD변환 데이터 정렬; 오른쪽 정렬 
               // AD변환 채널 선택; PortF 0 핀    

   DDRF  = 0xf0;   // PortF[3..0] 입력으로 설정, PortF[7..4] 출력으로 설정 
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	80 bb       	out	0x10, r24	; 16
   DIDR0 = 0x0f;   // 디지털 입력 불가 PortF[3..0]
  e0:	8f e0       	ldi	r24, 0x0F	; 15
  e2:	80 93 7e 00 	sts	0x007E, r24

   ADCSRA= 0xc8;     // ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블 
  e6:	88 ec       	ldi	r24, 0xC8	; 200
  e8:	80 93 7a 00 	sts	0x007A, r24
               // ADC 클럭 설정; XTAL의1/2(8MHz)
}
  ec:	08 95       	ret

000000ee <__vector_25>:

SIGNAL(ADC_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  ADdata = ADC;
  fc:	80 91 78 00 	lds	r24, 0x0078
 100:	90 91 79 00 	lds	r25, 0x0079
 104:	90 93 92 01 	sts	0x0192, r25
 108:	80 93 91 01 	sts	0x0191, r24
  ADCSRA = 0xc8;
 10c:	88 ec       	ldi	r24, 0xC8	; 200
 10e:	80 93 7a 00 	sts	0x007A, r24
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <ADcLCD>:

void ADcLCD(void)
{
   if(ADCFlag == 0)
 120:	80 91 95 01 	lds	r24, 0x0195
 124:	88 23       	and	r24, r24
 126:	f1 f4       	brne	.+60     	; 0x164 <ADcLCD+0x44>
   { 
      volume_y= ADdata; // 가변저항 PortF0
 128:	20 91 91 01 	lds	r18, 0x0191
 12c:	30 91 92 01 	lds	r19, 0x0192
 130:	30 93 90 01 	sts	0x0190, r19
 134:	20 93 8f 01 	sts	0x018F, r18
      voltage_y= volume_y*50/1023;
 138:	42 e3       	ldi	r20, 0x32	; 50
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	24 9f       	mul	r18, r20
 13e:	c0 01       	movw	r24, r0
 140:	25 9f       	mul	r18, r21
 142:	90 0d       	add	r25, r0
 144:	34 9f       	mul	r19, r20
 146:	90 0d       	add	r25, r0
 148:	11 24       	eor	r1, r1
 14a:	6f ef       	ldi	r22, 0xFF	; 255
 14c:	73 e0       	ldi	r23, 0x03	; 3
 14e:	0e 94 d6 06 	call	0xdac	; 0xdac <__udivmodhi4>
 152:	70 93 9d 01 	sts	0x019D, r23
 156:	60 93 9c 01 	sts	0x019C, r22
      ADCFlag=1; 
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 95 01 	sts	0x0195, r24
      ADMUX = 0x40;   // PortF1 아날로그 입력 선택 
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	1e c0       	rjmp	.+60     	; 0x1a0 <ADcLCD+0x80>
   } 
   else if(ADCFlag == 1)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	f9 f4       	brne	.+62     	; 0x1a6 <ADcLCD+0x86>
   { 
      volume_x= ADdata; // 온도센서 PortF1
 168:	20 91 91 01 	lds	r18, 0x0191
 16c:	30 91 92 01 	lds	r19, 0x0192
 170:	30 93 9b 01 	sts	0x019B, r19
 174:	20 93 9a 01 	sts	0x019A, r18
      voltage_x= volume_x*50/1023;
 178:	42 e3       	ldi	r20, 0x32	; 50
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	24 9f       	mul	r18, r20
 17e:	c0 01       	movw	r24, r0
 180:	25 9f       	mul	r18, r21
 182:	90 0d       	add	r25, r0
 184:	34 9f       	mul	r19, r20
 186:	90 0d       	add	r25, r0
 188:	11 24       	eor	r1, r1
 18a:	6f ef       	ldi	r22, 0xFF	; 255
 18c:	73 e0       	ldi	r23, 0x03	; 3
 18e:	0e 94 d6 06 	call	0xdac	; 0xdac <__udivmodhi4>
 192:	70 93 97 01 	sts	0x0197, r23
 196:	60 93 96 01 	sts	0x0196, r22
      ADCFlag=0; 
 19a:	10 92 95 01 	sts	0x0195, r1
      ADMUX = 0x41;   // PortF2 아날로그 입력 선택 
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	80 93 7c 00 	sts	0x007C, r24
 1a4:	08 95       	ret
   }
   else ADCFlag=0;
 1a6:	10 92 95 01 	sts	0x0195, r1
 1aa:	08 95       	ret

000001ac <initPort>:
}

void initPort(void)
{
   DDRC  = 0xff;   // LCD 데이터 및 명령 
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	87 b9       	out	0x07, r24	; 7
   PORTC = 0x00;
 1b0:	18 b8       	out	0x08, r1	; 8
   DDRG  = 0xff;   // LCD 제어 출력 (RS, RW, E)
 1b2:	83 bb       	out	0x13, r24	; 19
   DDRF  = 0x00;   // 아날로그 입력 
 1b4:	10 ba       	out	0x10, r1	; 16
   DDRD = 0x00;      //switch 입력 설정
 1b6:	1a b8       	out	0x0a, r1	; 10
   DDRE  = 0x00;
 1b8:	1d b8       	out	0x0d, r1	; 13
}
 1ba:	08 95       	ret

000001bc <ButtonInput>:
   unsigned char up;
   unsigned char down;
   unsigned char* Button_Info;
      
   // 마스크를 이용해 포트D 입력에서 0번핀 입력 추출 
   in = PIND & BUTTON0_MASK;
 1bc:	99 b1       	in	r25, 0x09	; 9

   if(in>0) up=0;   // S2버튼 안 눌러짐 
   else up=1;      // S2버튼 눌러짐

   // 마스크를 이용해 포트D 입력에서 1번핀 입력 추출 
   in = PIND & BUTTON1_MASK;
 1be:	29 b1       	in	r18, 0x09	; 9

   if(in>0) down=0;   // S3버튼 안 눌러짐   
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	21 fd       	sbrc	r18, 1
 1c4:	80 e0       	ldi	r24, 0x00	; 0
   else down=1;      // S3버튼 눌러짐

   if(up==1 && down==0) Button_Info= "LEFT";   // S2버튼 누른 경우
 1c6:	90 fd       	sbrc	r25, 0
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <ButtonInput+0x14>
 1ca:	88 23       	and	r24, r24
 1cc:	31 f4       	brne	.+12     	; 0x1da <ButtonInput+0x1e>
 1ce:	08 c0       	rjmp	.+16     	; 0x1e0 <ButtonInput+0x24>
   else if(up==0 && down==1) Button_Info = "RIGHT";   // S3버튼 누른 경우
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	49 f0       	breq	.+18     	; 0x1e6 <ButtonInput+0x2a>
   else if (up == 1 && down == 1) Button_Info = "BOTH";
   else Button_Info = "NTH";
 1d4:	80 e1       	ldi	r24, 0x10	; 16
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	08 95       	ret
   if(in>0) down=0;   // S3버튼 안 눌러짐   
   else down=1;      // S3버튼 눌러짐

   if(up==1 && down==0) Button_Info= "LEFT";   // S2버튼 누른 경우
   else if(up==0 && down==1) Button_Info = "RIGHT";   // S3버튼 누른 경우
   else if (up == 1 && down == 1) Button_Info = "BOTH";
 1da:	8b e0       	ldi	r24, 0x0B	; 11
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	08 95       	ret
   in = PIND & BUTTON1_MASK;

   if(in>0) down=0;   // S3버튼 안 눌러짐   
   else down=1;      // S3버튼 눌러짐

   if(up==1 && down==0) Button_Info= "LEFT";   // S2버튼 누른 경우
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	08 95       	ret
   else if(up==0 && down==1) Button_Info = "RIGHT";   // S3버튼 누른 경우
 1e6:	85 e0       	ldi	r24, 0x05	; 5
 1e8:	91 e0       	ldi	r25, 0x01	; 1
   else if (up == 1 && down == 1) Button_Info = "BOTH";
   else Button_Info = "NTH";
   return Button_Info;
}
 1ea:	08 95       	ret

000001ec <E_Pulse>:
 1ec:	a2 9a       	sbi	0x14, 2	; 20
 1ee:	84 e6       	ldi	r24, 0x64	; 100
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 cd 04 	call	0x99a	; 0x99a <us_delay>
 1f6:	a2 98       	cbi	0x14, 2	; 20
 1f8:	08 95       	ret

000001fa <LCD_init>:
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <ms_delay>
 202:	88 e3       	ldi	r24, 0x38	; 56
 204:	88 b9       	out	0x08, r24	; 8
 206:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 20a:	88 e2       	ldi	r24, 0x28	; 40
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 cd 04 	call	0x99a	; 0x99a <us_delay>
 212:	8c e0       	ldi	r24, 0x0C	; 12
 214:	88 b9       	out	0x08, r24	; 8
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 cd 04 	call	0x99a	; 0x99a <us_delay>
 21e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	88 b9       	out	0x08, r24	; 8
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <ms_delay>
 22e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	88 b9       	out	0x08, r24	; 8
 236:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 23a:	08 95       	ret

0000023c <LCD_cmd>:
 23c:	a0 98       	cbi	0x14, 0	; 20
 23e:	a1 98       	cbi	0x14, 1	; 20
 240:	88 b9       	out	0x08, r24	; 8
 242:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 246:	08 95       	ret

00000248 <Write_Char>:
 248:	a0 9a       	sbi	0x14, 0	; 20
 24a:	a1 98       	cbi	0x14, 1	; 20
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 252:	08 95       	ret

00000254 <LCD_Disp>:
 254:	a0 98       	cbi	0x14, 0	; 20
 256:	a1 98       	cbi	0x14, 1	; 20
 258:	66 23       	and	r22, r22
 25a:	11 f4       	brne	.+4      	; 0x260 <LCD_Disp+0xc>
 25c:	80 58       	subi	r24, 0x80	; 128
 25e:	03 c0       	rjmp	.+6      	; 0x266 <LCD_Disp+0x12>
 260:	61 30       	cpi	r22, 0x01	; 1
 262:	11 f4       	brne	.+4      	; 0x268 <LCD_Disp+0x14>
 264:	80 54       	subi	r24, 0x40	; 64
 266:	88 b9       	out	0x08, r24	; 8
 268:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 26c:	08 95       	ret

0000026e <LCD_Write>:
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	00 d0       	rcall	.+0      	; 0x278 <LCD_Write+0xa>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	49 83       	std	Y+1, r20	; 0x01
 27e:	5a 83       	std	Y+2, r21	; 0x02
 280:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_Disp>
 284:	49 81       	ldd	r20, Y+1	; 0x01
 286:	04 2f       	mov	r16, r20
 288:	5a 81       	ldd	r21, Y+2	; 0x02
 28a:	15 2f       	mov	r17, r21
 28c:	02 c0       	rjmp	.+4      	; 0x292 <LCD_Write+0x24>
 28e:	0e 94 24 01 	call	0x248	; 0x248 <Write_Char>
 292:	f8 01       	movw	r30, r16
 294:	81 91       	ld	r24, Z+
 296:	8f 01       	movw	r16, r30
 298:	88 23       	and	r24, r24
 29a:	c9 f7       	brne	.-14     	; 0x28e <LCD_Write+0x20>
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <LCD_Write_char>:
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	0f 92       	push	r0
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	49 83       	std	Y+1, r20	; 0x01
 2b6:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_Disp>
 2ba:	49 81       	ldd	r20, Y+1	; 0x01
 2bc:	84 2f       	mov	r24, r20
 2be:	0e 94 24 01 	call	0x248	; 0x248 <Write_Char>
 2c2:	0f 90       	pop	r0
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <can_init>:
 2ca:	90 91 d8 00 	lds	r25, 0x00D8
 2ce:	91 60       	ori	r25, 0x01	; 1
 2d0:	90 93 d8 00 	sts	0x00D8, r25
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	89 f0       	breq	.+34     	; 0x2fa <can_init+0x30>
 2d8:	84 30       	cpi	r24, 0x04	; 4
 2da:	28 f4       	brcc	.+10     	; 0x2e6 <can_init+0x1c>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	51 f0       	breq	.+20     	; 0x2f4 <can_init+0x2a>
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	d1 f4       	brne	.+52     	; 0x318 <can_init+0x4e>
 2e4:	11 c0       	rjmp	.+34     	; 0x308 <can_init+0x3e>
 2e6:	85 30       	cpi	r24, 0x05	; 5
 2e8:	61 f0       	breq	.+24     	; 0x302 <can_init+0x38>
 2ea:	85 30       	cpi	r24, 0x05	; 5
 2ec:	40 f0       	brcs	.+16     	; 0x2fe <can_init+0x34>
 2ee:	86 30       	cpi	r24, 0x06	; 6
 2f0:	99 f4       	brne	.+38     	; 0x318 <can_init+0x4e>
 2f2:	09 c0       	rjmp	.+18     	; 0x306 <can_init+0x3c>
 2f4:	10 92 e2 00 	sts	0x00E2, r1
 2f8:	09 c0       	rjmp	.+18     	; 0x30c <can_init+0x42>
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <can_init+0x3e>
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	03 c0       	rjmp	.+6      	; 0x308 <can_init+0x3e>
 302:	8e e0       	ldi	r24, 0x0E	; 14
 304:	01 c0       	rjmp	.+2      	; 0x308 <can_init+0x3e>
 306:	82 e1       	ldi	r24, 0x12	; 18
 308:	80 93 e2 00 	sts	0x00E2, r24
 30c:	8c e0       	ldi	r24, 0x0C	; 12
 30e:	80 93 e3 00 	sts	0x00E3, r24
 312:	87 e3       	ldi	r24, 0x37	; 55
 314:	80 93 e4 00 	sts	0x00E4, r24
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	98 2f       	mov	r25, r24
 31c:	92 95       	swap	r25
 31e:	90 7f       	andi	r25, 0xF0	; 240
 320:	90 93 ed 00 	sts	0x00ED, r25
 324:	10 92 ef 00 	sts	0x00EF, r1
 328:	10 92 ee 00 	sts	0x00EE, r1
 32c:	10 92 f3 00 	sts	0x00F3, r1
 330:	10 92 f2 00 	sts	0x00F2, r1
 334:	10 92 f1 00 	sts	0x00F1, r1
 338:	10 92 f0 00 	sts	0x00F0, r1
 33c:	10 92 f7 00 	sts	0x00F7, r1
 340:	10 92 f6 00 	sts	0x00F6, r1
 344:	10 92 f5 00 	sts	0x00F5, r1
 348:	10 92 f4 00 	sts	0x00F4, r1
 34c:	10 92 fa 00 	sts	0x00FA, r1
 350:	10 92 fa 00 	sts	0x00FA, r1
 354:	10 92 fa 00 	sts	0x00FA, r1
 358:	10 92 fa 00 	sts	0x00FA, r1
 35c:	10 92 fa 00 	sts	0x00FA, r1
 360:	10 92 fa 00 	sts	0x00FA, r1
 364:	10 92 fa 00 	sts	0x00FA, r1
 368:	10 92 fa 00 	sts	0x00FA, r1
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	8f 30       	cpi	r24, 0x0F	; 15
 370:	a1 f6       	brne	.-88     	; 0x31a <can_init+0x50>
 372:	10 92 db 00 	sts	0x00DB, r1
 376:	10 92 df 00 	sts	0x00DF, r1
 37a:	10 92 de 00 	sts	0x00DE, r1
 37e:	10 92 e1 00 	sts	0x00E1, r1
 382:	10 92 e0 00 	sts	0x00E0, r1
 386:	80 91 d8 00 	lds	r24, 0x00D8
 38a:	82 60       	ori	r24, 0x02	; 2
 38c:	80 93 d8 00 	sts	0x00D8, r24
 390:	80 91 d9 00 	lds	r24, 0x00D9
 394:	82 ff       	sbrs	r24, 2
 396:	fc cf       	rjmp	.-8      	; 0x390 <can_init+0xc6>
 398:	08 95       	ret

0000039a <can_init_8Mhz>:
 39a:	90 91 d8 00 	lds	r25, 0x00D8
 39e:	91 60       	ori	r25, 0x01	; 1
 3a0:	90 93 d8 00 	sts	0x00D8, r25
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	c1 f0       	breq	.+48     	; 0x3d8 <can_init_8Mhz+0x3e>
 3a8:	84 30       	cpi	r24, 0x04	; 4
 3aa:	28 f4       	brcc	.+10     	; 0x3b6 <can_init_8Mhz+0x1c>
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	51 f0       	breq	.+20     	; 0x3c4 <can_init_8Mhz+0x2a>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	39 f5       	brne	.+78     	; 0x402 <can_init_8Mhz+0x68>
 3b4:	0e c0       	rjmp	.+28     	; 0x3d2 <can_init_8Mhz+0x38>
 3b6:	85 30       	cpi	r24, 0x05	; 5
 3b8:	c9 f0       	breq	.+50     	; 0x3ec <can_init_8Mhz+0x52>
 3ba:	85 30       	cpi	r24, 0x05	; 5
 3bc:	78 f0       	brcs	.+30     	; 0x3dc <can_init_8Mhz+0x42>
 3be:	86 30       	cpi	r24, 0x06	; 6
 3c0:	01 f5       	brne	.+64     	; 0x402 <can_init_8Mhz+0x68>
 3c2:	16 c0       	rjmp	.+44     	; 0x3f0 <can_init_8Mhz+0x56>
 3c4:	10 92 e2 00 	sts	0x00E2, r1
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	80 93 e3 00 	sts	0x00E3, r24
 3ce:	83 e1       	ldi	r24, 0x13	; 19
 3d0:	16 c0       	rjmp	.+44     	; 0x3fe <can_init_8Mhz+0x64>
 3d2:	10 92 e2 00 	sts	0x00E2, r1
 3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <can_init_8Mhz+0x5c>
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	0b c0       	rjmp	.+22     	; 0x3f2 <can_init_8Mhz+0x58>
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	80 93 e2 00 	sts	0x00E2, r24
 3e2:	8e e0       	ldi	r24, 0x0E	; 14
 3e4:	80 93 e3 00 	sts	0x00E3, r24
 3e8:	8b e4       	ldi	r24, 0x4B	; 75
 3ea:	09 c0       	rjmp	.+18     	; 0x3fe <can_init_8Mhz+0x64>
 3ec:	86 e0       	ldi	r24, 0x06	; 6
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <can_init_8Mhz+0x58>
 3f0:	88 e0       	ldi	r24, 0x08	; 8
 3f2:	80 93 e2 00 	sts	0x00E2, r24
 3f6:	8c e0       	ldi	r24, 0x0C	; 12
 3f8:	80 93 e3 00 	sts	0x00E3, r24
 3fc:	87 e3       	ldi	r24, 0x37	; 55
 3fe:	80 93 e4 00 	sts	0x00E4, r24
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	98 2f       	mov	r25, r24
 406:	92 95       	swap	r25
 408:	90 7f       	andi	r25, 0xF0	; 240
 40a:	90 93 ed 00 	sts	0x00ED, r25
 40e:	10 92 ef 00 	sts	0x00EF, r1
 412:	10 92 ee 00 	sts	0x00EE, r1
 416:	10 92 f3 00 	sts	0x00F3, r1
 41a:	10 92 f2 00 	sts	0x00F2, r1
 41e:	10 92 f1 00 	sts	0x00F1, r1
 422:	10 92 f0 00 	sts	0x00F0, r1
 426:	10 92 f7 00 	sts	0x00F7, r1
 42a:	10 92 f6 00 	sts	0x00F6, r1
 42e:	10 92 f5 00 	sts	0x00F5, r1
 432:	10 92 f4 00 	sts	0x00F4, r1
 436:	10 92 fa 00 	sts	0x00FA, r1
 43a:	10 92 fa 00 	sts	0x00FA, r1
 43e:	10 92 fa 00 	sts	0x00FA, r1
 442:	10 92 fa 00 	sts	0x00FA, r1
 446:	10 92 fa 00 	sts	0x00FA, r1
 44a:	10 92 fa 00 	sts	0x00FA, r1
 44e:	10 92 fa 00 	sts	0x00FA, r1
 452:	10 92 fa 00 	sts	0x00FA, r1
 456:	8f 5f       	subi	r24, 0xFF	; 255
 458:	8f 30       	cpi	r24, 0x0F	; 15
 45a:	a1 f6       	brne	.-88     	; 0x404 <can_init_8Mhz+0x6a>
 45c:	10 92 db 00 	sts	0x00DB, r1
 460:	10 92 df 00 	sts	0x00DF, r1
 464:	10 92 de 00 	sts	0x00DE, r1
 468:	10 92 e1 00 	sts	0x00E1, r1
 46c:	10 92 e0 00 	sts	0x00E0, r1
 470:	80 e2       	ldi	r24, 0x20	; 32
 472:	80 93 d8 00 	sts	0x00D8, r24
 476:	80 91 d8 00 	lds	r24, 0x00D8
 47a:	82 60       	ori	r24, 0x02	; 2
 47c:	80 93 d8 00 	sts	0x00D8, r24
 480:	80 91 d9 00 	lds	r24, 0x00D9
 484:	82 ff       	sbrs	r24, 2
 486:	fc cf       	rjmp	.-8      	; 0x480 <can_init_8Mhz+0xe6>
 488:	08 95       	ret

0000048a <can_tx>:
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	fb 01       	movw	r30, r22
 490:	00 81       	ld	r16, Z
 492:	11 81       	ldd	r17, Z+1	; 0x01
 494:	22 81       	ldd	r18, Z+2	; 0x02
 496:	33 81       	ldd	r19, Z+3	; 0x03
 498:	82 95       	swap	r24
 49a:	80 7f       	andi	r24, 0xF0	; 240
 49c:	80 93 ed 00 	sts	0x00ED, r24
 4a0:	10 92 ee 00 	sts	0x00EE, r1
 4a4:	10 92 ef 00 	sts	0x00EF, r1
 4a8:	85 81       	ldd	r24, Z+5	; 0x05
 4aa:	88 23       	and	r24, r24
 4ac:	a1 f4       	brne	.+40     	; 0x4d6 <can_tx+0x4c>
 4ae:	d9 01       	movw	r26, r18
 4b0:	c8 01       	movw	r24, r16
 4b2:	53 e0       	ldi	r21, 0x03	; 3
 4b4:	b6 95       	lsr	r27
 4b6:	a7 95       	ror	r26
 4b8:	97 95       	ror	r25
 4ba:	87 95       	ror	r24
 4bc:	5a 95       	dec	r21
 4be:	d1 f7       	brne	.-12     	; 0x4b4 <can_tx+0x2a>
 4c0:	80 93 f3 00 	sts	0x00F3, r24
 4c4:	02 95       	swap	r16
 4c6:	00 0f       	add	r16, r16
 4c8:	00 7e       	andi	r16, 0xE0	; 224
 4ca:	00 93 f2 00 	sts	0x00F2, r16
 4ce:	80 91 ef 00 	lds	r24, 0x00EF
 4d2:	8f 7e       	andi	r24, 0xEF	; 239
 4d4:	29 c0       	rjmp	.+82     	; 0x528 <can_tx+0x9e>
 4d6:	d9 01       	movw	r26, r18
 4d8:	c8 01       	movw	r24, r16
 4da:	55 e1       	ldi	r21, 0x15	; 21
 4dc:	b6 95       	lsr	r27
 4de:	a7 95       	ror	r26
 4e0:	97 95       	ror	r25
 4e2:	87 95       	ror	r24
 4e4:	5a 95       	dec	r21
 4e6:	d1 f7       	brne	.-12     	; 0x4dc <can_tx+0x52>
 4e8:	80 93 f3 00 	sts	0x00F3, r24
 4ec:	d9 01       	movw	r26, r18
 4ee:	c8 01       	movw	r24, r16
 4f0:	6d e0       	ldi	r22, 0x0D	; 13
 4f2:	b6 95       	lsr	r27
 4f4:	a7 95       	ror	r26
 4f6:	97 95       	ror	r25
 4f8:	87 95       	ror	r24
 4fa:	6a 95       	dec	r22
 4fc:	d1 f7       	brne	.-12     	; 0x4f2 <can_tx+0x68>
 4fe:	80 93 f2 00 	sts	0x00F2, r24
 502:	d9 01       	movw	r26, r18
 504:	c8 01       	movw	r24, r16
 506:	75 e0       	ldi	r23, 0x05	; 5
 508:	b6 95       	lsr	r27
 50a:	a7 95       	ror	r26
 50c:	97 95       	ror	r25
 50e:	87 95       	ror	r24
 510:	7a 95       	dec	r23
 512:	d1 f7       	brne	.-12     	; 0x508 <can_tx+0x7e>
 514:	80 93 f1 00 	sts	0x00F1, r24
 518:	00 0f       	add	r16, r16
 51a:	00 0f       	add	r16, r16
 51c:	00 0f       	add	r16, r16
 51e:	00 93 f0 00 	sts	0x00F0, r16
 522:	80 91 ef 00 	lds	r24, 0x00EF
 526:	80 61       	ori	r24, 0x10	; 16
 528:	80 93 ef 00 	sts	0x00EF, r24
 52c:	80 91 ef 00 	lds	r24, 0x00EF
 530:	96 81       	ldd	r25, Z+6	; 0x06
 532:	89 2b       	or	r24, r25
 534:	80 93 ef 00 	sts	0x00EF, r24
 538:	80 91 f0 00 	lds	r24, 0x00F0
 53c:	44 70       	andi	r20, 0x04	; 4
 53e:	48 2b       	or	r20, r24
 540:	40 93 f0 00 	sts	0x00F0, r20
 544:	80 91 f0 00 	lds	r24, 0x00F0
 548:	8d 7f       	andi	r24, 0xFD	; 253
 54a:	80 93 f0 00 	sts	0x00F0, r24
 54e:	80 91 f0 00 	lds	r24, 0x00F0
 552:	8e 7f       	andi	r24, 0xFE	; 254
 554:	80 93 f0 00 	sts	0x00F0, r24
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	09 c0       	rjmp	.+18     	; 0x56e <can_tx+0xe4>
 55c:	df 01       	movw	r26, r30
 55e:	a8 0f       	add	r26, r24
 560:	b1 1d       	adc	r27, r1
 562:	17 96       	adiw	r26, 0x07	; 7
 564:	9c 91       	ld	r25, X
 566:	17 97       	sbiw	r26, 0x07	; 7
 568:	90 93 fa 00 	sts	0x00FA, r25
 56c:	8f 5f       	subi	r24, 0xFF	; 255
 56e:	96 81       	ldd	r25, Z+6	; 0x06
 570:	89 17       	cp	r24, r25
 572:	a0 f3       	brcs	.-24     	; 0x55c <can_tx+0xd2>
 574:	80 91 ef 00 	lds	r24, 0x00EF
 578:	80 64       	ori	r24, 0x40	; 64
 57a:	80 93 ef 00 	sts	0x00EF, r24
 57e:	80 91 ee 00 	lds	r24, 0x00EE
 582:	86 ff       	sbrs	r24, 6
 584:	fc cf       	rjmp	.-8      	; 0x57e <can_tx+0xf4>
 586:	80 91 ee 00 	lds	r24, 0x00EE
 58a:	8f 7b       	andi	r24, 0xBF	; 191
 58c:	80 93 ee 00 	sts	0x00EE, r24
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
 596:	08 95       	ret

00000598 <can_rx>:
 598:	cf 92       	push	r12
 59a:	df 92       	push	r13
 59c:	ef 92       	push	r14
 59e:	ff 92       	push	r15
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	fb 01       	movw	r30, r22
 5a6:	82 95       	swap	r24
 5a8:	80 7f       	andi	r24, 0xF0	; 240
 5aa:	80 93 ed 00 	sts	0x00ED, r24
 5ae:	80 91 ee 00 	lds	r24, 0x00EE
 5b2:	85 ff       	sbrs	r24, 5
 5b4:	fc cf       	rjmp	.-8      	; 0x5ae <can_rx+0x16>
 5b6:	80 91 ef 00 	lds	r24, 0x00EF
 5ba:	84 fd       	sbrc	r24, 4
 5bc:	1b c0       	rjmp	.+54     	; 0x5f4 <can_rx+0x5c>
 5be:	15 82       	std	Z+5, r1	; 0x05
 5c0:	80 91 f3 00 	lds	r24, 0x00F3
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	a0 e0       	ldi	r26, 0x00	; 0
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	ba 2f       	mov	r27, r26
 5cc:	a9 2f       	mov	r26, r25
 5ce:	98 2f       	mov	r25, r24
 5d0:	88 27       	eor	r24, r24
 5d2:	40 91 f2 00 	lds	r20, 0x00F2
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	84 2b       	or	r24, r20
 5de:	95 2b       	or	r25, r21
 5e0:	a6 2b       	or	r26, r22
 5e2:	b7 2b       	or	r27, r23
 5e4:	35 e0       	ldi	r19, 0x05	; 5
 5e6:	b6 95       	lsr	r27
 5e8:	a7 95       	ror	r26
 5ea:	97 95       	ror	r25
 5ec:	87 95       	ror	r24
 5ee:	3a 95       	dec	r19
 5f0:	d1 f7       	brne	.-12     	; 0x5e6 <can_rx+0x4e>
 5f2:	35 c0       	rjmp	.+106    	; 0x65e <can_rx+0xc6>
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	85 83       	std	Z+5, r24	; 0x05
 5f8:	80 91 f3 00 	lds	r24, 0x00F3
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	a0 e0       	ldi	r26, 0x00	; 0
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	b8 2f       	mov	r27, r24
 604:	aa 27       	eor	r26, r26
 606:	99 27       	eor	r25, r25
 608:	88 27       	eor	r24, r24
 60a:	c0 90 f2 00 	lds	r12, 0x00F2
 60e:	40 91 f1 00 	lds	r20, 0x00F1
 612:	00 91 f0 00 	lds	r16, 0x00F0
 616:	dd 24       	eor	r13, r13
 618:	ee 24       	eor	r14, r14
 61a:	ff 24       	eor	r15, r15
 61c:	76 01       	movw	r14, r12
 61e:	dd 24       	eor	r13, r13
 620:	cc 24       	eor	r12, r12
 622:	8c 29       	or	r24, r12
 624:	9d 29       	or	r25, r13
 626:	ae 29       	or	r26, r14
 628:	bf 29       	or	r27, r15
 62a:	10 e0       	ldi	r17, 0x00	; 0
 62c:	20 e0       	ldi	r18, 0x00	; 0
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	80 2b       	or	r24, r16
 632:	91 2b       	or	r25, r17
 634:	a2 2b       	or	r26, r18
 636:	b3 2b       	or	r27, r19
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	76 2f       	mov	r23, r22
 640:	65 2f       	mov	r22, r21
 642:	54 2f       	mov	r21, r20
 644:	44 27       	eor	r20, r20
 646:	84 2b       	or	r24, r20
 648:	95 2b       	or	r25, r21
 64a:	a6 2b       	or	r26, r22
 64c:	b7 2b       	or	r27, r23
 64e:	68 94       	set
 650:	12 f8       	bld	r1, 2
 652:	b6 95       	lsr	r27
 654:	a7 95       	ror	r26
 656:	97 95       	ror	r25
 658:	87 95       	ror	r24
 65a:	16 94       	lsr	r1
 65c:	d1 f7       	brne	.-12     	; 0x652 <can_rx+0xba>
 65e:	80 83       	st	Z, r24
 660:	91 83       	std	Z+1, r25	; 0x01
 662:	a2 83       	std	Z+2, r26	; 0x02
 664:	b3 83       	std	Z+3, r27	; 0x03
 666:	80 91 f0 00 	lds	r24, 0x00F0
 66a:	84 70       	andi	r24, 0x04	; 4
 66c:	84 83       	std	Z+4, r24	; 0x04
 66e:	80 91 ef 00 	lds	r24, 0x00EF
 672:	8f 70       	andi	r24, 0x0F	; 15
 674:	86 83       	std	Z+6, r24	; 0x06
 676:	40 e0       	ldi	r20, 0x00	; 0
 678:	09 c0       	rjmp	.+18     	; 0x68c <can_rx+0xf4>
 67a:	80 91 fa 00 	lds	r24, 0x00FA
 67e:	2e 0f       	add	r18, r30
 680:	3f 1f       	adc	r19, r31
 682:	d9 01       	movw	r26, r18
 684:	17 96       	adiw	r26, 0x07	; 7
 686:	8c 93       	st	X, r24
 688:	17 97       	sbiw	r26, 0x07	; 7
 68a:	4f 5f       	subi	r20, 0xFF	; 255
 68c:	24 2f       	mov	r18, r20
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	80 91 ef 00 	lds	r24, 0x00EF
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	8f 70       	andi	r24, 0x0F	; 15
 698:	90 70       	andi	r25, 0x00	; 0
 69a:	28 17       	cp	r18, r24
 69c:	39 07       	cpc	r19, r25
 69e:	6c f3       	brlt	.-38     	; 0x67a <can_rx+0xe2>
 6a0:	10 92 ee 00 	sts	0x00EE, r1
 6a4:	80 91 ef 00 	lds	r24, 0x00EF
 6a8:	80 68       	ori	r24, 0x80	; 128
 6aa:	80 93 ef 00 	sts	0x00EF, r24
 6ae:	80 91 ee 00 	lds	r24, 0x00EE
 6b2:	8f 7d       	andi	r24, 0xDF	; 223
 6b4:	80 93 ee 00 	sts	0x00EE, r24
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	1f 91       	pop	r17
 6bc:	0f 91       	pop	r16
 6be:	ff 90       	pop	r15
 6c0:	ef 90       	pop	r14
 6c2:	df 90       	pop	r13
 6c4:	cf 90       	pop	r12
 6c6:	08 95       	ret

000006c8 <can_rx_set>:
 6c8:	af 92       	push	r10
 6ca:	cf 92       	push	r12
 6cc:	df 92       	push	r13
 6ce:	ef 92       	push	r14
 6d0:	ff 92       	push	r15
 6d2:	0f 93       	push	r16
 6d4:	82 95       	swap	r24
 6d6:	80 7f       	andi	r24, 0xF0	; 240
 6d8:	80 93 ed 00 	sts	0x00ED, r24
 6dc:	10 92 ee 00 	sts	0x00EE, r1
 6e0:	db 01       	movw	r26, r22
 6e2:	ca 01       	movw	r24, r20
 6e4:	22 23       	and	r18, r18
 6e6:	29 f5       	brne	.+74     	; 0x732 <can_rx_set+0x6a>
 6e8:	f3 e0       	ldi	r31, 0x03	; 3
 6ea:	b6 95       	lsr	r27
 6ec:	a7 95       	ror	r26
 6ee:	97 95       	ror	r25
 6f0:	87 95       	ror	r24
 6f2:	fa 95       	dec	r31
 6f4:	d1 f7       	brne	.-12     	; 0x6ea <can_rx_set+0x22>
 6f6:	80 93 f3 00 	sts	0x00F3, r24
 6fa:	42 95       	swap	r20
 6fc:	44 0f       	add	r20, r20
 6fe:	40 7e       	andi	r20, 0xE0	; 224
 700:	40 93 f2 00 	sts	0x00F2, r20
 704:	d7 01       	movw	r26, r14
 706:	c6 01       	movw	r24, r12
 708:	23 e0       	ldi	r18, 0x03	; 3
 70a:	b6 95       	lsr	r27
 70c:	a7 95       	ror	r26
 70e:	97 95       	ror	r25
 710:	87 95       	ror	r24
 712:	2a 95       	dec	r18
 714:	d1 f7       	brne	.-12     	; 0x70a <can_rx_set+0x42>
 716:	80 93 f7 00 	sts	0x00F7, r24
 71a:	c2 94       	swap	r12
 71c:	cc 0c       	add	r12, r12
 71e:	30 ee       	ldi	r19, 0xE0	; 224
 720:	c3 22       	and	r12, r19
 722:	c0 92 f6 00 	sts	0x00F6, r12
 726:	10 92 f4 00 	sts	0x00F4, r1
 72a:	80 91 ef 00 	lds	r24, 0x00EF
 72e:	8f 7e       	andi	r24, 0xEF	; 239
 730:	4d c0       	rjmp	.+154    	; 0x7cc <can_rx_set+0x104>
 732:	e5 e1       	ldi	r30, 0x15	; 21
 734:	b6 95       	lsr	r27
 736:	a7 95       	ror	r26
 738:	97 95       	ror	r25
 73a:	87 95       	ror	r24
 73c:	ea 95       	dec	r30
 73e:	d1 f7       	brne	.-12     	; 0x734 <can_rx_set+0x6c>
 740:	80 93 f3 00 	sts	0x00F3, r24
 744:	db 01       	movw	r26, r22
 746:	ca 01       	movw	r24, r20
 748:	fd e0       	ldi	r31, 0x0D	; 13
 74a:	b6 95       	lsr	r27
 74c:	a7 95       	ror	r26
 74e:	97 95       	ror	r25
 750:	87 95       	ror	r24
 752:	fa 95       	dec	r31
 754:	d1 f7       	brne	.-12     	; 0x74a <can_rx_set+0x82>
 756:	80 93 f2 00 	sts	0x00F2, r24
 75a:	db 01       	movw	r26, r22
 75c:	ca 01       	movw	r24, r20
 75e:	25 e0       	ldi	r18, 0x05	; 5
 760:	b6 95       	lsr	r27
 762:	a7 95       	ror	r26
 764:	97 95       	ror	r25
 766:	87 95       	ror	r24
 768:	2a 95       	dec	r18
 76a:	d1 f7       	brne	.-12     	; 0x760 <can_rx_set+0x98>
 76c:	80 93 f1 00 	sts	0x00F1, r24
 770:	44 0f       	add	r20, r20
 772:	44 0f       	add	r20, r20
 774:	44 0f       	add	r20, r20
 776:	40 93 f0 00 	sts	0x00F0, r20
 77a:	d7 01       	movw	r26, r14
 77c:	c6 01       	movw	r24, r12
 77e:	35 e1       	ldi	r19, 0x15	; 21
 780:	b6 95       	lsr	r27
 782:	a7 95       	ror	r26
 784:	97 95       	ror	r25
 786:	87 95       	ror	r24
 788:	3a 95       	dec	r19
 78a:	d1 f7       	brne	.-12     	; 0x780 <can_rx_set+0xb8>
 78c:	80 93 f7 00 	sts	0x00F7, r24
 790:	d7 01       	movw	r26, r14
 792:	c6 01       	movw	r24, r12
 794:	4d e0       	ldi	r20, 0x0D	; 13
 796:	b6 95       	lsr	r27
 798:	a7 95       	ror	r26
 79a:	97 95       	ror	r25
 79c:	87 95       	ror	r24
 79e:	4a 95       	dec	r20
 7a0:	d1 f7       	brne	.-12     	; 0x796 <can_rx_set+0xce>
 7a2:	80 93 f6 00 	sts	0x00F6, r24
 7a6:	d7 01       	movw	r26, r14
 7a8:	c6 01       	movw	r24, r12
 7aa:	e5 e0       	ldi	r30, 0x05	; 5
 7ac:	b6 95       	lsr	r27
 7ae:	a7 95       	ror	r26
 7b0:	97 95       	ror	r25
 7b2:	87 95       	ror	r24
 7b4:	ea 95       	dec	r30
 7b6:	d1 f7       	brne	.-12     	; 0x7ac <can_rx_set+0xe4>
 7b8:	80 93 f5 00 	sts	0x00F5, r24
 7bc:	cc 0c       	add	r12, r12
 7be:	cc 0c       	add	r12, r12
 7c0:	cc 0c       	add	r12, r12
 7c2:	c0 92 f4 00 	sts	0x00F4, r12
 7c6:	80 91 ef 00 	lds	r24, 0x00EF
 7ca:	80 61       	ori	r24, 0x10	; 16
 7cc:	80 93 ef 00 	sts	0x00EF, r24
 7d0:	80 91 ef 00 	lds	r24, 0x00EF
 7d4:	0f 70       	andi	r16, 0x0F	; 15
 7d6:	08 2b       	or	r16, r24
 7d8:	00 93 ef 00 	sts	0x00EF, r16
 7dc:	90 91 f4 00 	lds	r25, 0x00F4
 7e0:	8a 2d       	mov	r24, r10
 7e2:	87 70       	andi	r24, 0x07	; 7
 7e4:	89 2b       	or	r24, r25
 7e6:	80 93 f4 00 	sts	0x00F4, r24
 7ea:	80 91 f4 00 	lds	r24, 0x00F4
 7ee:	8e 7f       	andi	r24, 0xFE	; 254
 7f0:	80 93 f4 00 	sts	0x00F4, r24
 7f4:	80 91 ef 00 	lds	r24, 0x00EF
 7f8:	80 68       	ori	r24, 0x80	; 128
 7fa:	80 93 ef 00 	sts	0x00EF, r24
 7fe:	0f 91       	pop	r16
 800:	ff 90       	pop	r15
 802:	ef 90       	pop	r14
 804:	df 90       	pop	r13
 806:	cf 90       	pop	r12
 808:	af 90       	pop	r10
 80a:	08 95       	ret

0000080c <can_int_rx_set>:
 80c:	af 92       	push	r10
 80e:	cf 92       	push	r12
 810:	df 92       	push	r13
 812:	ef 92       	push	r14
 814:	ff 92       	push	r15
 816:	0f 93       	push	r16
 818:	38 2f       	mov	r19, r24
 81a:	82 95       	swap	r24
 81c:	80 7f       	andi	r24, 0xF0	; 240
 81e:	80 93 ed 00 	sts	0x00ED, r24
 822:	10 92 ee 00 	sts	0x00EE, r1
 826:	80 91 ef 00 	lds	r24, 0x00EF
 82a:	21 ff       	sbrs	r18, 1
 82c:	02 c0       	rjmp	.+4      	; 0x832 <can_int_rx_set+0x26>
 82e:	80 62       	ori	r24, 0x20	; 32
 830:	01 c0       	rjmp	.+2      	; 0x834 <can_int_rx_set+0x28>
 832:	8f 7d       	andi	r24, 0xDF	; 223
 834:	80 93 ef 00 	sts	0x00EF, r24
 838:	db 01       	movw	r26, r22
 83a:	ca 01       	movw	r24, r20
 83c:	20 fd       	sbrc	r18, 0
 83e:	25 c0       	rjmp	.+74     	; 0x88a <can_int_rx_set+0x7e>
 840:	23 e0       	ldi	r18, 0x03	; 3
 842:	b6 95       	lsr	r27
 844:	a7 95       	ror	r26
 846:	97 95       	ror	r25
 848:	87 95       	ror	r24
 84a:	2a 95       	dec	r18
 84c:	d1 f7       	brne	.-12     	; 0x842 <can_int_rx_set+0x36>
 84e:	80 93 f3 00 	sts	0x00F3, r24
 852:	42 95       	swap	r20
 854:	44 0f       	add	r20, r20
 856:	40 7e       	andi	r20, 0xE0	; 224
 858:	40 93 f2 00 	sts	0x00F2, r20
 85c:	d7 01       	movw	r26, r14
 85e:	c6 01       	movw	r24, r12
 860:	43 e0       	ldi	r20, 0x03	; 3
 862:	b6 95       	lsr	r27
 864:	a7 95       	ror	r26
 866:	97 95       	ror	r25
 868:	87 95       	ror	r24
 86a:	4a 95       	dec	r20
 86c:	d1 f7       	brne	.-12     	; 0x862 <can_int_rx_set+0x56>
 86e:	80 93 f7 00 	sts	0x00F7, r24
 872:	c2 94       	swap	r12
 874:	cc 0c       	add	r12, r12
 876:	50 ee       	ldi	r21, 0xE0	; 224
 878:	c5 22       	and	r12, r21
 87a:	c0 92 f6 00 	sts	0x00F6, r12
 87e:	10 92 f4 00 	sts	0x00F4, r1
 882:	80 91 ef 00 	lds	r24, 0x00EF
 886:	8f 7e       	andi	r24, 0xEF	; 239
 888:	4d c0       	rjmp	.+154    	; 0x924 <can_int_rx_set+0x118>
 88a:	e5 e1       	ldi	r30, 0x15	; 21
 88c:	b6 95       	lsr	r27
 88e:	a7 95       	ror	r26
 890:	97 95       	ror	r25
 892:	87 95       	ror	r24
 894:	ea 95       	dec	r30
 896:	d1 f7       	brne	.-12     	; 0x88c <can_int_rx_set+0x80>
 898:	80 93 f3 00 	sts	0x00F3, r24
 89c:	db 01       	movw	r26, r22
 89e:	ca 01       	movw	r24, r20
 8a0:	fd e0       	ldi	r31, 0x0D	; 13
 8a2:	b6 95       	lsr	r27
 8a4:	a7 95       	ror	r26
 8a6:	97 95       	ror	r25
 8a8:	87 95       	ror	r24
 8aa:	fa 95       	dec	r31
 8ac:	d1 f7       	brne	.-12     	; 0x8a2 <can_int_rx_set+0x96>
 8ae:	80 93 f2 00 	sts	0x00F2, r24
 8b2:	db 01       	movw	r26, r22
 8b4:	ca 01       	movw	r24, r20
 8b6:	25 e0       	ldi	r18, 0x05	; 5
 8b8:	b6 95       	lsr	r27
 8ba:	a7 95       	ror	r26
 8bc:	97 95       	ror	r25
 8be:	87 95       	ror	r24
 8c0:	2a 95       	dec	r18
 8c2:	d1 f7       	brne	.-12     	; 0x8b8 <can_int_rx_set+0xac>
 8c4:	80 93 f1 00 	sts	0x00F1, r24
 8c8:	44 0f       	add	r20, r20
 8ca:	44 0f       	add	r20, r20
 8cc:	44 0f       	add	r20, r20
 8ce:	40 93 f0 00 	sts	0x00F0, r20
 8d2:	d7 01       	movw	r26, r14
 8d4:	c6 01       	movw	r24, r12
 8d6:	45 e1       	ldi	r20, 0x15	; 21
 8d8:	b6 95       	lsr	r27
 8da:	a7 95       	ror	r26
 8dc:	97 95       	ror	r25
 8de:	87 95       	ror	r24
 8e0:	4a 95       	dec	r20
 8e2:	d1 f7       	brne	.-12     	; 0x8d8 <can_int_rx_set+0xcc>
 8e4:	80 93 f7 00 	sts	0x00F7, r24
 8e8:	d7 01       	movw	r26, r14
 8ea:	c6 01       	movw	r24, r12
 8ec:	ed e0       	ldi	r30, 0x0D	; 13
 8ee:	b6 95       	lsr	r27
 8f0:	a7 95       	ror	r26
 8f2:	97 95       	ror	r25
 8f4:	87 95       	ror	r24
 8f6:	ea 95       	dec	r30
 8f8:	d1 f7       	brne	.-12     	; 0x8ee <can_int_rx_set+0xe2>
 8fa:	80 93 f6 00 	sts	0x00F6, r24
 8fe:	d7 01       	movw	r26, r14
 900:	c6 01       	movw	r24, r12
 902:	f5 e0       	ldi	r31, 0x05	; 5
 904:	b6 95       	lsr	r27
 906:	a7 95       	ror	r26
 908:	97 95       	ror	r25
 90a:	87 95       	ror	r24
 90c:	fa 95       	dec	r31
 90e:	d1 f7       	brne	.-12     	; 0x904 <can_int_rx_set+0xf8>
 910:	80 93 f5 00 	sts	0x00F5, r24
 914:	cc 0c       	add	r12, r12
 916:	cc 0c       	add	r12, r12
 918:	cc 0c       	add	r12, r12
 91a:	c0 92 f4 00 	sts	0x00F4, r12
 91e:	80 91 ef 00 	lds	r24, 0x00EF
 922:	80 61       	ori	r24, 0x10	; 16
 924:	80 93 ef 00 	sts	0x00EF, r24
 928:	80 91 ef 00 	lds	r24, 0x00EF
 92c:	0f 70       	andi	r16, 0x0F	; 15
 92e:	08 2b       	or	r16, r24
 930:	00 93 ef 00 	sts	0x00EF, r16
 934:	90 91 f4 00 	lds	r25, 0x00F4
 938:	8a 2d       	mov	r24, r10
 93a:	87 70       	andi	r24, 0x07	; 7
 93c:	89 2b       	or	r24, r25
 93e:	80 93 f4 00 	sts	0x00F4, r24
 942:	80 91 db 00 	lds	r24, 0x00DB
 946:	80 6a       	ori	r24, 0xA0	; 160
 948:	80 93 db 00 	sts	0x00DB, r24
 94c:	38 30       	cpi	r19, 0x08	; 8
 94e:	50 f4       	brcc	.+20     	; 0x964 <can_int_rx_set+0x158>
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	02 c0       	rjmp	.+4      	; 0x95a <can_int_rx_set+0x14e>
 956:	88 0f       	add	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	3a 95       	dec	r19
 95c:	e2 f7       	brpl	.-8      	; 0x956 <can_int_rx_set+0x14a>
 95e:	80 93 de 00 	sts	0x00DE, r24
 962:	0d c0       	rjmp	.+26     	; 0x97e <can_int_rx_set+0x172>
 964:	23 2f       	mov	r18, r19
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	28 50       	subi	r18, 0x08	; 8
 96a:	30 40       	sbci	r19, 0x00	; 0
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	02 c0       	rjmp	.+4      	; 0x976 <can_int_rx_set+0x16a>
 972:	88 0f       	add	r24, r24
 974:	99 1f       	adc	r25, r25
 976:	2a 95       	dec	r18
 978:	e2 f7       	brpl	.-8      	; 0x972 <can_int_rx_set+0x166>
 97a:	80 93 df 00 	sts	0x00DF, r24
 97e:	80 91 ef 00 	lds	r24, 0x00EF
 982:	80 68       	ori	r24, 0x80	; 128
 984:	80 93 ef 00 	sts	0x00EF, r24
 988:	78 94       	sei
 98a:	0f 91       	pop	r16
 98c:	ff 90       	pop	r15
 98e:	ef 90       	pop	r14
 990:	df 90       	pop	r13
 992:	cf 90       	pop	r12
 994:	af 90       	pop	r10
 996:	08 95       	ret

00000998 <delay>:
 998:	08 95       	ret

0000099a <us_delay>:
 99a:	20 e0       	ldi	r18, 0x00	; 0
 99c:	30 e0       	ldi	r19, 0x00	; 0
 99e:	08 c0       	rjmp	.+16     	; 0x9b0 <us_delay+0x16>
 9a0:	0f 92       	push	r0
 9a2:	0f 90       	pop	r0
 9a4:	0f 92       	push	r0
 9a6:	0f 90       	pop	r0
 9a8:	0f 92       	push	r0
 9aa:	0f 90       	pop	r0
 9ac:	2f 5f       	subi	r18, 0xFF	; 255
 9ae:	3f 4f       	sbci	r19, 0xFF	; 255
 9b0:	28 17       	cp	r18, r24
 9b2:	39 07       	cpc	r19, r25
 9b4:	a9 f7       	brne	.-22     	; 0x9a0 <us_delay+0x6>
 9b6:	08 95       	ret

000009b8 <ms_delay>:
 9b8:	0f 93       	push	r16
 9ba:	1f 93       	push	r17
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	8c 01       	movw	r16, r24
 9c2:	c0 e0       	ldi	r28, 0x00	; 0
 9c4:	d0 e0       	ldi	r29, 0x00	; 0
 9c6:	05 c0       	rjmp	.+10     	; 0x9d2 <ms_delay+0x1a>
 9c8:	88 ee       	ldi	r24, 0xE8	; 232
 9ca:	93 e0       	ldi	r25, 0x03	; 3
 9cc:	0e 94 cd 04 	call	0x99a	; 0x99a <us_delay>
 9d0:	21 96       	adiw	r28, 0x01	; 1
 9d2:	c0 17       	cp	r28, r16
 9d4:	d1 07       	cpc	r29, r17
 9d6:	c1 f7       	brne	.-16     	; 0x9c8 <ms_delay+0x10>
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	1f 91       	pop	r17
 9de:	0f 91       	pop	r16
 9e0:	08 95       	ret

000009e2 <main>:

int main(void)
{
 9e2:	cf 93       	push	r28
 9e4:	df 93       	push	r29
 9e6:	cd b7       	in	r28, 0x3d	; 61
 9e8:	de b7       	in	r29, 0x3e	; 62
 9ea:	2a 97       	sbiw	r28, 0x0a	; 10
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	f8 94       	cli
 9f0:	de bf       	out	0x3e, r29	; 62
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	cd bf       	out	0x3d, r28	; 61
   initPort();      // 입출력 포트 초기화
 9f6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <initPort>
    LCD_init();     // LCD 초기화
 9fa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_init>
   can_init(b250k   );   // CAN 보레이트를 원하는 값으로 세팅한다.
 9fe:	83 e0       	ldi	r24, 0x03	; 3
 a00:	0e 94 65 01 	call	0x2ca	; 0x2ca <can_init>
   initAdc();      // AD 변환 초기화
 a04:	0e 94 6b 00 	call	0xd6	; 0xd6 <initAdc>
   sei();         // INT 인에이블 
 a08:	78 94       	sei
   current_mode = 0;
 a0a:	10 92 94 01 	sts	0x0194, r1
 a0e:	10 92 93 01 	sts	0x0193, r1
   current_speed = 1;
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	90 93 99 01 	sts	0x0199, r25
 a1a:	80 93 98 01 	sts	0x0198, r24
   int change_y = 0;
   int change_x = 0;
   int twink = 0;
   unsigned int out=0;
   int t = 0;
   char num[8] = "00000000";
 a1e:	de 01       	movw	r26, r28
 a20:	11 96       	adiw	r26, 0x01	; 1
 a22:	e0 e2       	ldi	r30, 0x20	; 32
 a24:	f1 e0       	ldi	r31, 0x01	; 1
 a26:	88 e0       	ldi	r24, 0x08	; 8
 a28:	01 90       	ld	r0, Z+
 a2a:	0d 92       	st	X+, r0
 a2c:	81 50       	subi	r24, 0x01	; 1
 a2e:	e1 f7       	brne	.-8      	; 0xa28 <main+0x46>
   int back_distance;
   char dist[4] = "0000";  
   can_rx_set( 3, 0x03, EXT, 8, 0x00, 0x05  );    //only 0x03 message recieve from MCU3
 a30:	83 e0       	ldi	r24, 0x03	; 3
 a32:	43 e0       	ldi	r20, 0x03	; 3
 a34:	50 e0       	ldi	r21, 0x00	; 0
 a36:	60 e0       	ldi	r22, 0x00	; 0
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	21 e0       	ldi	r18, 0x01	; 1
 a3c:	08 e0       	ldi	r16, 0x08	; 8
 a3e:	cc 24       	eor	r12, r12
 a40:	dd 24       	eor	r13, r13
 a42:	76 01       	movw	r14, r12
 a44:	e5 e0       	ldi	r30, 0x05	; 5
 a46:	ae 2e       	mov	r10, r30
 a48:	0e 94 64 03 	call	0x6c8	; 0x6c8 <can_rx_set>
   can_init(b250k   );   // CAN 보레이트를 원하는 값으로 세팅한다.
   initAdc();      // AD 변환 초기화
   sei();         // INT 인에이블 
   current_mode = 0;
   current_speed = 1;
   int menu_flag = 0;
 a4c:	22 24       	eor	r2, r2
 a4e:	33 24       	eor	r3, r3
      num[4] = '0' + current_speed%10000/1000;
      num[3] = '0' + current_speed%100000/10000;
      num[2] = '0' + current_speed%1000000/100000;
      num[1] = '0' + current_speed%10000000/1000000;
      num[0] = '0' + current_speed%100000000/10000000;
      LCD_Write(0, 1, num);
 a50:	3a 86       	std	Y+10, r3	; 0x0a
 a52:	29 86       	std	Y+9, r2	; 0x09
     /* x : voltage_x , y : voltage_y
     /* current_mode : 0. parking 1. reverse 2. neutral 3. driving
                   default : 0. parking
     /* 
      ********************************************/
     ADcLCD();
 a54:	0e 94 90 00 	call	0x120	; 0x120 <ADcLCD>
	  
     //can_rx(3, &msg3);
     change_y = 0;
     change_x = 0;
      //Print Current Mode & Speed to LCD
     if( (current_mode == 0 ) || (current_mode == 2) ){
 a58:	80 91 93 01 	lds	r24, 0x0193
 a5c:	90 91 94 01 	lds	r25, 0x0194
 a60:	ac 01       	movw	r20, r24
 a62:	33 e0       	ldi	r19, 0x03	; 3
 a64:	44 0f       	add	r20, r20
 a66:	55 1f       	adc	r21, r21
 a68:	3a 95       	dec	r19
 a6a:	e1 f7       	brne	.-8      	; 0xa64 <main+0x82>
       LCD_Write(0, 0, mode[current_mode] );
 a6c:	48 0f       	add	r20, r24
 a6e:	59 1f       	adc	r21, r25
 a70:	47 5d       	subi	r20, 0xD7	; 215
 a72:	5e 4f       	sbci	r21, 0xFE	; 254
	  
     //can_rx(3, &msg3);
     change_y = 0;
     change_x = 0;
      //Print Current Mode & Speed to LCD
     if( (current_mode == 0 ) || (current_mode == 2) ){
 a74:	00 97       	sbiw	r24, 0x00	; 0
 a76:	19 f0       	breq	.+6      	; 0xa7e <main+0x9c>
 a78:	82 30       	cpi	r24, 0x02	; 2
 a7a:	91 05       	cpc	r25, r1
 a7c:	79 f4       	brne	.+30     	; 0xa9c <main+0xba>
       LCD_Write(0, 0, mode[current_mode] );
 a7e:	80 e0       	ldi	r24, 0x00	; 0
 a80:	60 e0       	ldi	r22, 0x00	; 0
 a82:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write>
      LCD_Write(0, 1, "           ");    
 a86:	80 e0       	ldi	r24, 0x00	; 0
 a88:	61 e0       	ldi	r22, 0x01	; 1
 a8a:	44 e1       	ldi	r20, 0x14	; 20
 a8c:	51 e0       	ldi	r21, 0x01	; 1
 a8e:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write>
      current_speed = 0;
 a92:	10 92 99 01 	sts	0x0199, r1
 a96:	10 92 98 01 	sts	0x0198, r1
 a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <main+0xc2>
     }
     else{
        LCD_Write(0, 0, mode[current_mode] );
 a9c:	80 e0       	ldi	r24, 0x00	; 0
 a9e:	60 e0       	ldi	r22, 0x00	; 0
 aa0:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write>
      
     }

     
     if( voltage_y > 40 ) menu_flag = 1;
 aa4:	80 91 9c 01 	lds	r24, 0x019C
 aa8:	90 91 9d 01 	lds	r25, 0x019D
 aac:	89 32       	cpi	r24, 0x29	; 41
 aae:	91 05       	cpc	r25, r1
 ab0:	a0 f5       	brcc	.+104    	; 0xb1a <main+0x138>
     else {
      if(menu_flag == 1) {
 ab2:	29 85       	ldd	r18, Y+9	; 0x09
 ab4:	3a 85       	ldd	r19, Y+10	; 0x0a
 ab6:	21 30       	cpi	r18, 0x01	; 1
 ab8:	31 05       	cpc	r19, r1
 aba:	a9 f4       	brne	.+42     	; 0xae6 <main+0x104>
         change_y = 1;
         change_y = 1;
         menu_flag = 0;
         current_mode = current_mode + 1;
 abc:	20 91 93 01 	lds	r18, 0x0193
 ac0:	30 91 94 01 	lds	r19, 0x0194
 ac4:	2f 5f       	subi	r18, 0xFF	; 255
 ac6:	3f 4f       	sbci	r19, 0xFF	; 255
 ac8:	30 93 94 01 	sts	0x0194, r19
 acc:	20 93 93 01 	sts	0x0193, r18
         if( current_mode >= 3) current_mode = 3;
 ad0:	23 30       	cpi	r18, 0x03	; 3
 ad2:	31 05       	cpc	r19, r1
 ad4:	34 f0       	brlt	.+12     	; 0xae2 <main+0x100>
 ad6:	23 e0       	ldi	r18, 0x03	; 3
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	30 93 94 01 	sts	0x0194, r19
 ade:	20 93 93 01 	sts	0x0193, r18
     if( voltage_y > 40 ) menu_flag = 1;
     else {
      if(menu_flag == 1) {
         change_y = 1;
         change_y = 1;
         menu_flag = 0;
 ae2:	1a 86       	std	Y+10, r1	; 0x0a
 ae4:	19 86       	std	Y+9, r1	; 0x09
         current_mode = current_mode + 1;
         if( current_mode >= 3) current_mode = 3;
      }
     }
     
     if ( voltage_y < 10 ) menu_flag = -1;
 ae6:	8a 30       	cpi	r24, 0x0A	; 10
 ae8:	91 05       	cpc	r25, r1
 aea:	e0 f0       	brcs	.+56     	; 0xb24 <main+0x142>
     else {
      if(menu_flag == -1) {
 aec:	89 85       	ldd	r24, Y+9	; 0x09
 aee:	9a 85       	ldd	r25, Y+10	; 0x0a
 af0:	2f ef       	ldi	r18, 0xFF	; 255
 af2:	8f 3f       	cpi	r24, 0xFF	; 255
 af4:	92 07       	cpc	r25, r18
 af6:	e9 f4       	brne	.+58     	; 0xb32 <main+0x150>
         change_y = 1;
         menu_flag = 0;
         current_mode = current_mode - 1;
 af8:	80 91 93 01 	lds	r24, 0x0193
 afc:	90 91 94 01 	lds	r25, 0x0194
 b00:	01 97       	sbiw	r24, 0x01	; 1
 b02:	90 93 94 01 	sts	0x0194, r25
 b06:	80 93 93 01 	sts	0x0193, r24
         if( current_mode <= 0) current_mode = 0;
 b0a:	18 16       	cp	r1, r24
 b0c:	19 06       	cpc	r1, r25
 b0e:	7c f0       	brlt	.+30     	; 0xb2e <main+0x14c>
 b10:	10 92 94 01 	sts	0x0194, r1
 b14:	10 92 93 01 	sts	0x0193, r1
 b18:	0a c0       	rjmp	.+20     	; 0xb2e <main+0x14c>
        LCD_Write(0, 0, mode[current_mode] );
      
     }

     
     if( voltage_y > 40 ) menu_flag = 1;
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	9a 87       	std	Y+10, r25	; 0x0a
 b20:	89 87       	std	Y+9, r24	; 0x09
 b22:	07 c0       	rjmp	.+14     	; 0xb32 <main+0x150>
         current_mode = current_mode + 1;
         if( current_mode >= 3) current_mode = 3;
      }
     }
     
     if ( voltage_y < 10 ) menu_flag = -1;
 b24:	2f ef       	ldi	r18, 0xFF	; 255
 b26:	3f ef       	ldi	r19, 0xFF	; 255
 b28:	3a 87       	std	Y+10, r19	; 0x0a
 b2a:	29 87       	std	Y+9, r18	; 0x09
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <main+0x150>
     else {
      if(menu_flag == -1) {
         change_y = 1;
         menu_flag = 0;
 b2e:	1a 86       	std	Y+10, r1	; 0x0a
 b30:	19 86       	std	Y+9, r1	; 0x09
      }

     }
      
     //when driving mode, speed control
     if( (current_mode == 3) || (current_mode == 1) ){
 b32:	80 91 93 01 	lds	r24, 0x0193
 b36:	90 91 94 01 	lds	r25, 0x0194
 b3a:	83 30       	cpi	r24, 0x03	; 3
 b3c:	91 05       	cpc	r25, r1
 b3e:	21 f0       	breq	.+8      	; 0xb48 <main+0x166>
 b40:	81 30       	cpi	r24, 0x01	; 1
 b42:	91 05       	cpc	r25, r1
 b44:	09 f0       	breq	.+2      	; 0xb48 <main+0x166>
 b46:	c0 c0       	rjmp	.+384    	; 0xcc8 <main+0x2e6>

      num[7] = '0' + current_speed%10;
 b48:	c0 90 98 01 	lds	r12, 0x0198
 b4c:	d0 90 99 01 	lds	r13, 0x0199
 b50:	c6 01       	movw	r24, r12
 b52:	6a e0       	ldi	r22, 0x0A	; 10
 b54:	70 e0       	ldi	r23, 0x00	; 0
 b56:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divmodhi4>
 b5a:	80 5d       	subi	r24, 0xD0	; 208
 b5c:	88 87       	std	Y+8, r24	; 0x08
      num[6] = '0' + current_speed%100/10;
 b5e:	c6 01       	movw	r24, r12
 b60:	64 e6       	ldi	r22, 0x64	; 100
 b62:	70 e0       	ldi	r23, 0x00	; 0
 b64:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divmodhi4>
 b68:	6a e0       	ldi	r22, 0x0A	; 10
 b6a:	70 e0       	ldi	r23, 0x00	; 0
 b6c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divmodhi4>
 b70:	60 5d       	subi	r22, 0xD0	; 208
 b72:	6f 83       	std	Y+7, r22	; 0x07
      num[5] = '0' + current_speed%1000/100;
 b74:	c6 01       	movw	r24, r12
 b76:	68 ee       	ldi	r22, 0xE8	; 232
 b78:	73 e0       	ldi	r23, 0x03	; 3
 b7a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divmodhi4>
 b7e:	64 e6       	ldi	r22, 0x64	; 100
 b80:	70 e0       	ldi	r23, 0x00	; 0
 b82:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divmodhi4>
 b86:	60 5d       	subi	r22, 0xD0	; 208
 b88:	6e 83       	std	Y+6, r22	; 0x06
      num[4] = '0' + current_speed%10000/1000;
 b8a:	c6 01       	movw	r24, r12
 b8c:	60 e1       	ldi	r22, 0x10	; 16
 b8e:	77 e2       	ldi	r23, 0x27	; 39
 b90:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divmodhi4>
 b94:	68 ee       	ldi	r22, 0xE8	; 232
 b96:	73 e0       	ldi	r23, 0x03	; 3
 b98:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divmodhi4>
 b9c:	60 5d       	subi	r22, 0xD0	; 208
 b9e:	6d 83       	std	Y+5, r22	; 0x05
      num[3] = '0' + current_speed%100000/10000;
 ba0:	ee 24       	eor	r14, r14
 ba2:	d7 fc       	sbrc	r13, 7
 ba4:	e0 94       	com	r14
 ba6:	fe 2c       	mov	r15, r14
 ba8:	c7 01       	movw	r24, r14
 baa:	b6 01       	movw	r22, r12
 bac:	20 ea       	ldi	r18, 0xA0	; 160
 bae:	36 e8       	ldi	r19, 0x86	; 134
 bb0:	41 e0       	ldi	r20, 0x01	; 1
 bb2:	50 e0       	ldi	r21, 0x00	; 0
 bb4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodsi4>
 bb8:	20 e1       	ldi	r18, 0x10	; 16
 bba:	37 e2       	ldi	r19, 0x27	; 39
 bbc:	40 e0       	ldi	r20, 0x00	; 0
 bbe:	50 e0       	ldi	r21, 0x00	; 0
 bc0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodsi4>
 bc4:	20 5d       	subi	r18, 0xD0	; 208
 bc6:	2c 83       	std	Y+4, r18	; 0x04
      num[2] = '0' + current_speed%1000000/100000;
 bc8:	90 e4       	ldi	r25, 0x40	; 64
 bca:	89 2e       	mov	r8, r25
 bcc:	92 e4       	ldi	r25, 0x42	; 66
 bce:	99 2e       	mov	r9, r25
 bd0:	9f e0       	ldi	r25, 0x0F	; 15
 bd2:	a9 2e       	mov	r10, r25
 bd4:	b1 2c       	mov	r11, r1
 bd6:	c7 01       	movw	r24, r14
 bd8:	b6 01       	movw	r22, r12
 bda:	a5 01       	movw	r20, r10
 bdc:	94 01       	movw	r18, r8
 bde:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodsi4>
 be2:	20 ea       	ldi	r18, 0xA0	; 160
 be4:	36 e8       	ldi	r19, 0x86	; 134
 be6:	41 e0       	ldi	r20, 0x01	; 1
 be8:	50 e0       	ldi	r21, 0x00	; 0
 bea:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodsi4>
 bee:	20 5d       	subi	r18, 0xD0	; 208
 bf0:	2b 83       	std	Y+3, r18	; 0x03
      num[1] = '0' + current_speed%10000000/1000000;
 bf2:	20 e8       	ldi	r18, 0x80	; 128
 bf4:	42 2e       	mov	r4, r18
 bf6:	26 e9       	ldi	r18, 0x96	; 150
 bf8:	52 2e       	mov	r5, r18
 bfa:	28 e9       	ldi	r18, 0x98	; 152
 bfc:	62 2e       	mov	r6, r18
 bfe:	71 2c       	mov	r7, r1
 c00:	c7 01       	movw	r24, r14
 c02:	b6 01       	movw	r22, r12
 c04:	a3 01       	movw	r20, r6
 c06:	92 01       	movw	r18, r4
 c08:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodsi4>
 c0c:	a5 01       	movw	r20, r10
 c0e:	94 01       	movw	r18, r8
 c10:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodsi4>
 c14:	20 5d       	subi	r18, 0xD0	; 208
 c16:	2a 83       	std	Y+2, r18	; 0x02
      num[0] = '0' + current_speed%100000000/10000000;
 c18:	c7 01       	movw	r24, r14
 c1a:	b6 01       	movw	r22, r12
 c1c:	20 e0       	ldi	r18, 0x00	; 0
 c1e:	31 ee       	ldi	r19, 0xE1	; 225
 c20:	45 ef       	ldi	r20, 0xF5	; 245
 c22:	55 e0       	ldi	r21, 0x05	; 5
 c24:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodsi4>
 c28:	a3 01       	movw	r20, r6
 c2a:	92 01       	movw	r18, r4
 c2c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__divmodsi4>
 c30:	20 5d       	subi	r18, 0xD0	; 208
 c32:	29 83       	std	Y+1, r18	; 0x01
      LCD_Write(0, 1, num);
 c34:	80 e0       	ldi	r24, 0x00	; 0
 c36:	61 e0       	ldi	r22, 0x01	; 1
 c38:	ae 01       	movw	r20, r28
 c3a:	4f 5f       	subi	r20, 0xFF	; 255
 c3c:	5f 4f       	sbci	r21, 0xFF	; 255
 c3e:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write>

      if(voltage_x > 40) speed_flag = 1;
 c42:	80 91 96 01 	lds	r24, 0x0196
 c46:	90 91 97 01 	lds	r25, 0x0197
 c4a:	89 32       	cpi	r24, 0x29	; 41
 c4c:	91 05       	cpc	r25, r1
 c4e:	90 f5       	brcc	.+100    	; 0xcb4 <main+0x2d2>
      else {
         if(speed_flag == 1) {
 c50:	31 e0       	ldi	r19, 0x01	; 1
 c52:	23 16       	cp	r2, r19
 c54:	31 04       	cpc	r3, r1
 c56:	a9 f4       	brne	.+42     	; 0xc82 <main+0x2a0>
            change_x = 1;
            speed_flag = 0;
            current_speed = current_speed + 1;
 c58:	20 91 98 01 	lds	r18, 0x0198
 c5c:	30 91 99 01 	lds	r19, 0x0199
 c60:	2f 5f       	subi	r18, 0xFF	; 255
 c62:	3f 4f       	sbci	r19, 0xFF	; 255
 c64:	30 93 99 01 	sts	0x0199, r19
 c68:	20 93 98 01 	sts	0x0198, r18
            if ( current_speed >= 5) current_speed = 5;
 c6c:	25 30       	cpi	r18, 0x05	; 5
 c6e:	31 05       	cpc	r19, r1
 c70:	34 f0       	brlt	.+12     	; 0xc7e <main+0x29c>
 c72:	25 e0       	ldi	r18, 0x05	; 5
 c74:	30 e0       	ldi	r19, 0x00	; 0
 c76:	30 93 99 01 	sts	0x0199, r19
 c7a:	20 93 98 01 	sts	0x0198, r18

      if(voltage_x > 40) speed_flag = 1;
      else {
         if(speed_flag == 1) {
            change_x = 1;
            speed_flag = 0;
 c7e:	22 24       	eor	r2, r2
 c80:	33 24       	eor	r3, r3
            current_speed = current_speed + 1;
            if ( current_speed >= 5) current_speed = 5;
         }
      }

      if(voltage_x < 10) speed_flag = -1;
 c82:	8a 30       	cpi	r24, 0x0A	; 10
 c84:	91 05       	cpc	r25, r1
 c86:	d0 f0       	brcs	.+52     	; 0xcbc <main+0x2da>
      else {
         if(speed_flag == -1) {
 c88:	8f ef       	ldi	r24, 0xFF	; 255
 c8a:	28 16       	cp	r2, r24
 c8c:	8f ef       	ldi	r24, 0xFF	; 255
 c8e:	38 06       	cpc	r3, r24
 c90:	d9 f4       	brne	.+54     	; 0xcc8 <main+0x2e6>
            change_x = 1;
            speed_flag = 0;
            current_speed = current_speed - 1;
 c92:	80 91 98 01 	lds	r24, 0x0198
 c96:	90 91 99 01 	lds	r25, 0x0199
 c9a:	01 97       	sbiw	r24, 0x01	; 1
 c9c:	90 93 99 01 	sts	0x0199, r25
 ca0:	80 93 98 01 	sts	0x0198, r24
            if ( current_speed <= 0) current_speed = 0;
 ca4:	18 16       	cp	r1, r24
 ca6:	19 06       	cpc	r1, r25
 ca8:	6c f0       	brlt	.+26     	; 0xcc4 <main+0x2e2>
 caa:	10 92 99 01 	sts	0x0199, r1
 cae:	10 92 98 01 	sts	0x0198, r1
 cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <main+0x2e2>
      num[2] = '0' + current_speed%1000000/100000;
      num[1] = '0' + current_speed%10000000/1000000;
      num[0] = '0' + current_speed%100000000/10000000;
      LCD_Write(0, 1, num);

      if(voltage_x > 40) speed_flag = 1;
 cb4:	81 e0       	ldi	r24, 0x01	; 1
 cb6:	28 2e       	mov	r2, r24
 cb8:	31 2c       	mov	r3, r1
 cba:	06 c0       	rjmp	.+12     	; 0xcc8 <main+0x2e6>
            current_speed = current_speed + 1;
            if ( current_speed >= 5) current_speed = 5;
         }
      }

      if(voltage_x < 10) speed_flag = -1;
 cbc:	22 24       	eor	r2, r2
 cbe:	2a 94       	dec	r2
 cc0:	32 2c       	mov	r3, r2
 cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <main+0x2e6>
      else {
         if(speed_flag == -1) {
            change_x = 1;
            speed_flag = 0;
 cc4:	22 24       	eor	r2, r2
 cc6:	33 24       	eor	r3, r3
            if ( current_speed <= 0) current_speed = 0;
         }
      }
     }

     out = ButtonInput();
 cc8:	0e 94 de 00 	call	0x1bc	; 0x1bc <ButtonInput>
      if (out == "LEFT") {
 ccc:	21 e0       	ldi	r18, 0x01	; 1
 cce:	80 30       	cpi	r24, 0x00	; 0
 cd0:	92 07       	cpc	r25, r18
 cd2:	59 f0       	breq	.+22     	; 0xcea <main+0x308>
         twink = 1;   
         t = 1;
      }
      else if(out == "RIGHT") {
 cd4:	31 e0       	ldi	r19, 0x01	; 1
 cd6:	85 30       	cpi	r24, 0x05	; 5
 cd8:	93 07       	cpc	r25, r19
 cda:	51 f0       	breq	.+20     	; 0xcf0 <main+0x30e>
         twink = 1;
         t = 2;
      }
      else if(out == "BOTH") {
 cdc:	21 e0       	ldi	r18, 0x01	; 1
 cde:	8b 30       	cpi	r24, 0x0B	; 11
 ce0:	92 07       	cpc	r25, r18
 ce2:	49 f4       	brne	.+18     	; 0xcf6 <main+0x314>
         twink = 1;
         t = 3;
 ce4:	23 e0       	ldi	r18, 0x03	; 3
 ce6:	30 e0       	ldi	r19, 0x00	; 0
 ce8:	08 c0       	rjmp	.+16     	; 0xcfa <main+0x318>
     }

     out = ButtonInput();
      if (out == "LEFT") {
         twink = 1;   
         t = 1;
 cea:	21 e0       	ldi	r18, 0x01	; 1
 cec:	30 e0       	ldi	r19, 0x00	; 0
 cee:	05 c0       	rjmp	.+10     	; 0xcfa <main+0x318>
      }
      else if(out == "RIGHT") {
         twink = 1;
         t = 2;
 cf0:	22 e0       	ldi	r18, 0x02	; 2
 cf2:	30 e0       	ldi	r19, 0x00	; 0
 cf4:	02 c0       	rjmp	.+4      	; 0xcfa <main+0x318>
         twink = 1;
         t = 3;
      }
      else {
         twink = 0;
         t = 0;
 cf6:	20 e0       	ldi	r18, 0x00	; 0
 cf8:	30 e0       	ldi	r19, 0x00	; 0
      }
	 msg1.data[0] = current_mode;
 cfa:	40 91 93 01 	lds	r20, 0x0193
 cfe:	90 91 94 01 	lds	r25, 0x0194
 d02:	40 93 63 01 	sts	0x0163, r20
     msg1.data[1] = '\0'; 
 d06:	10 92 64 01 	sts	0x0164, r1
     msg1.data[2] = current_speed; 
 d0a:	f0 91 98 01 	lds	r31, 0x0198
 d0e:	f0 93 65 01 	sts	0x0165, r31
     msg1.data[3] = '\0'; 
 d12:	10 92 66 01 	sts	0x0166, r1
     msg1.data[4] = current_mode%10 + '0'; 
 d16:	84 2f       	mov	r24, r20
 d18:	6a e0       	ldi	r22, 0x0A	; 10
 d1a:	70 e0       	ldi	r23, 0x00	; 0
 d1c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divmodhi4>
 d20:	e8 2f       	mov	r30, r24
 d22:	e0 5d       	subi	r30, 0xD0	; 208
 d24:	e0 93 67 01 	sts	0x0167, r30
     msg1.data[5] = '\0'; 
 d28:	10 92 68 01 	sts	0x0168, r1
     msg1.data[6] = t%10 + '0';
 d2c:	c9 01       	movw	r24, r18
 d2e:	6a e0       	ldi	r22, 0x0A	; 10
 d30:	70 e0       	ldi	r23, 0x00	; 0
 d32:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divmodhi4>
 d36:	80 5d       	subi	r24, 0xD0	; 208
 d38:	80 93 69 01 	sts	0x0169, r24
     msg1.data[7] = '\0'; 
 d3c:	10 92 6a 01 	sts	0x016A, r1

     //added
     msg2.data[0] = current_mode;
 d40:	40 93 54 01 	sts	0x0154, r20
     msg2.data[1] = '\0'; 
 d44:	10 92 55 01 	sts	0x0155, r1
     msg2.data[2] = current_speed;  
 d48:	f0 93 56 01 	sts	0x0156, r31
     msg2.data[3] = '\0'; 
 d4c:	10 92 57 01 	sts	0x0157, r1
     msg2.data[4] = current_mode%10 + '0'; 
 d50:	e0 93 58 01 	sts	0x0158, r30
     msg2.data[5] = '\0'; 
 d54:	10 92 59 01 	sts	0x0159, r1
     msg2.data[6] = t%10 + '0';
 d58:	80 93 5a 01 	sts	0x015A, r24
     msg2.data[7] = '\0';
 d5c:	10 92 5b 01 	sts	0x015B, r1

	  //if(change_y || change_x || twink) {
	  can_tx(2, &msg2, 0);
 d60:	82 e0       	ldi	r24, 0x02	; 2
 d62:	6d e4       	ldi	r22, 0x4D	; 77
 d64:	71 e0       	ldi	r23, 0x01	; 1
 d66:	40 e0       	ldi	r20, 0x00	; 0
 d68:	0e 94 45 02 	call	0x48a	; 0x48a <can_tx>
      can_tx(1, &msg1, 0);
 d6c:	81 e0       	ldi	r24, 0x01	; 1
 d6e:	6c e5       	ldi	r22, 0x5C	; 92
 d70:	71 e0       	ldi	r23, 0x01	; 1
 d72:	40 e0       	ldi	r20, 0x00	; 0
 d74:	0e 94 45 02 	call	0x48a	; 0x48a <can_tx>
      //added
      
     //}
      ///added
      if(current_mode == 1) {
 d78:	00 91 93 01 	lds	r16, 0x0193
 d7c:	10 91 94 01 	lds	r17, 0x0194
 d80:	01 30       	cpi	r16, 0x01	; 1
 d82:	11 05       	cpc	r17, r1
 d84:	09 f0       	breq	.+2      	; 0xd88 <main+0x3a6>
 d86:	66 ce       	rjmp	.-820    	; 0xa54 <main+0x72>
         can_rx(3, &msg3);
 d88:	83 e0       	ldi	r24, 0x03	; 3
 d8a:	60 e8       	ldi	r22, 0x80	; 128
 d8c:	71 e0       	ldi	r23, 0x01	; 1
 d8e:	0e 94 cc 02 	call	0x598	; 0x598 <can_rx>

         back_distance = msg3.data[0];
 d92:	80 91 87 01 	lds	r24, 0x0187
 d96:	90 e0       	ldi	r25, 0x00	; 0
         if(back_distance <= 5 && back_distance > 0) {
 d98:	01 97       	sbiw	r24, 0x01	; 1
 d9a:	85 30       	cpi	r24, 0x05	; 5
 d9c:	91 05       	cpc	r25, r1
 d9e:	08 f0       	brcs	.+2      	; 0xda2 <main+0x3c0>
 da0:	59 ce       	rjmp	.-846    	; 0xa54 <main+0x72>
            current_speed = 1;
 da2:	10 93 99 01 	sts	0x0199, r17
 da6:	00 93 98 01 	sts	0x0198, r16
 daa:	54 ce       	rjmp	.-856    	; 0xa54 <main+0x72>

00000dac <__udivmodhi4>:
 dac:	aa 1b       	sub	r26, r26
 dae:	bb 1b       	sub	r27, r27
 db0:	51 e1       	ldi	r21, 0x11	; 17
 db2:	07 c0       	rjmp	.+14     	; 0xdc2 <__udivmodhi4_ep>

00000db4 <__udivmodhi4_loop>:
 db4:	aa 1f       	adc	r26, r26
 db6:	bb 1f       	adc	r27, r27
 db8:	a6 17       	cp	r26, r22
 dba:	b7 07       	cpc	r27, r23
 dbc:	10 f0       	brcs	.+4      	; 0xdc2 <__udivmodhi4_ep>
 dbe:	a6 1b       	sub	r26, r22
 dc0:	b7 0b       	sbc	r27, r23

00000dc2 <__udivmodhi4_ep>:
 dc2:	88 1f       	adc	r24, r24
 dc4:	99 1f       	adc	r25, r25
 dc6:	5a 95       	dec	r21
 dc8:	a9 f7       	brne	.-22     	; 0xdb4 <__udivmodhi4_loop>
 dca:	80 95       	com	r24
 dcc:	90 95       	com	r25
 dce:	bc 01       	movw	r22, r24
 dd0:	cd 01       	movw	r24, r26
 dd2:	08 95       	ret

00000dd4 <__divmodhi4>:
 dd4:	97 fb       	bst	r25, 7
 dd6:	09 2e       	mov	r0, r25
 dd8:	07 26       	eor	r0, r23
 dda:	0a d0       	rcall	.+20     	; 0xdf0 <__divmodhi4_neg1>
 ddc:	77 fd       	sbrc	r23, 7
 dde:	04 d0       	rcall	.+8      	; 0xde8 <__divmodhi4_neg2>
 de0:	e5 df       	rcall	.-54     	; 0xdac <__udivmodhi4>
 de2:	06 d0       	rcall	.+12     	; 0xdf0 <__divmodhi4_neg1>
 de4:	00 20       	and	r0, r0
 de6:	1a f4       	brpl	.+6      	; 0xdee <__divmodhi4_exit>

00000de8 <__divmodhi4_neg2>:
 de8:	70 95       	com	r23
 dea:	61 95       	neg	r22
 dec:	7f 4f       	sbci	r23, 0xFF	; 255

00000dee <__divmodhi4_exit>:
 dee:	08 95       	ret

00000df0 <__divmodhi4_neg1>:
 df0:	f6 f7       	brtc	.-4      	; 0xdee <__divmodhi4_exit>
 df2:	90 95       	com	r25
 df4:	81 95       	neg	r24
 df6:	9f 4f       	sbci	r25, 0xFF	; 255
 df8:	08 95       	ret

00000dfa <__divmodsi4>:
 dfa:	97 fb       	bst	r25, 7
 dfc:	09 2e       	mov	r0, r25
 dfe:	05 26       	eor	r0, r21
 e00:	0e d0       	rcall	.+28     	; 0xe1e <__divmodsi4_neg1>
 e02:	57 fd       	sbrc	r21, 7
 e04:	04 d0       	rcall	.+8      	; 0xe0e <__divmodsi4_neg2>
 e06:	14 d0       	rcall	.+40     	; 0xe30 <__udivmodsi4>
 e08:	0a d0       	rcall	.+20     	; 0xe1e <__divmodsi4_neg1>
 e0a:	00 1c       	adc	r0, r0
 e0c:	38 f4       	brcc	.+14     	; 0xe1c <__divmodsi4_exit>

00000e0e <__divmodsi4_neg2>:
 e0e:	50 95       	com	r21
 e10:	40 95       	com	r20
 e12:	30 95       	com	r19
 e14:	21 95       	neg	r18
 e16:	3f 4f       	sbci	r19, 0xFF	; 255
 e18:	4f 4f       	sbci	r20, 0xFF	; 255
 e1a:	5f 4f       	sbci	r21, 0xFF	; 255

00000e1c <__divmodsi4_exit>:
 e1c:	08 95       	ret

00000e1e <__divmodsi4_neg1>:
 e1e:	f6 f7       	brtc	.-4      	; 0xe1c <__divmodsi4_exit>
 e20:	90 95       	com	r25
 e22:	80 95       	com	r24
 e24:	70 95       	com	r23
 e26:	61 95       	neg	r22
 e28:	7f 4f       	sbci	r23, 0xFF	; 255
 e2a:	8f 4f       	sbci	r24, 0xFF	; 255
 e2c:	9f 4f       	sbci	r25, 0xFF	; 255
 e2e:	08 95       	ret

00000e30 <__udivmodsi4>:
 e30:	a1 e2       	ldi	r26, 0x21	; 33
 e32:	1a 2e       	mov	r1, r26
 e34:	aa 1b       	sub	r26, r26
 e36:	bb 1b       	sub	r27, r27
 e38:	fd 01       	movw	r30, r26
 e3a:	0d c0       	rjmp	.+26     	; 0xe56 <__udivmodsi4_ep>

00000e3c <__udivmodsi4_loop>:
 e3c:	aa 1f       	adc	r26, r26
 e3e:	bb 1f       	adc	r27, r27
 e40:	ee 1f       	adc	r30, r30
 e42:	ff 1f       	adc	r31, r31
 e44:	a2 17       	cp	r26, r18
 e46:	b3 07       	cpc	r27, r19
 e48:	e4 07       	cpc	r30, r20
 e4a:	f5 07       	cpc	r31, r21
 e4c:	20 f0       	brcs	.+8      	; 0xe56 <__udivmodsi4_ep>
 e4e:	a2 1b       	sub	r26, r18
 e50:	b3 0b       	sbc	r27, r19
 e52:	e4 0b       	sbc	r30, r20
 e54:	f5 0b       	sbc	r31, r21

00000e56 <__udivmodsi4_ep>:
 e56:	66 1f       	adc	r22, r22
 e58:	77 1f       	adc	r23, r23
 e5a:	88 1f       	adc	r24, r24
 e5c:	99 1f       	adc	r25, r25
 e5e:	1a 94       	dec	r1
 e60:	69 f7       	brne	.-38     	; 0xe3c <__udivmodsi4_loop>
 e62:	60 95       	com	r22
 e64:	70 95       	com	r23
 e66:	80 95       	com	r24
 e68:	90 95       	com	r25
 e6a:	9b 01       	movw	r18, r22
 e6c:	ac 01       	movw	r20, r24
 e6e:	bd 01       	movw	r22, r26
 e70:	cf 01       	movw	r24, r30
 e72:	08 95       	ret

00000e74 <_exit>:
 e74:	f8 94       	cli

00000e76 <__stop_program>:
 e76:	ff cf       	rjmp	.-2      	; 0xe76 <__stop_program>
