
CAN_NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000f14  00000fa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800182  00800182  0000102a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000168  00000000  00000000  00001780  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc1  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000470  00000000  00000000  000028a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090c  00000000  00000000  00002d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00003628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ec  00000000  00000000  000038a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cf3  00000000  00000000  00003b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00004887  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_25>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e4 e1       	ldi	r30, 0x14	; 20
  a8:	ff e0       	ldi	r31, 0x0F	; 15
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 38       	cpi	r26, 0x82	; 130
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a2 e8       	ldi	r26, 0x82	; 130
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a5 3a       	cpi	r26, 0xA5	; 165
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <main>
  ce:	0c 94 88 07 	jmp	0xf10	; 0xf10 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <initAdc>:
// PF0: ADC0 조이스틱 y축 
// PF1: ADC1 조이스틱 x축
//=========================================================

void initAdc(void){
      ADMUX =  0x40;  // 기준전압; 외부 캐퍼시터 가진 AVcc(AREF 핀)
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	80 93 7c 00 	sts	0x007C, r24
               // AD변환 데이터 정렬; 오른쪽 정렬 
               // AD변환 채널 선택; PortF 0 핀    

   DDRF  = 0xf0;   // PortF[3..0] 입력으로 설정, PortF[7..4] 출력으로 설정 
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	80 bb       	out	0x10, r24	; 16
   DIDR0 = 0x0f;   // 디지털 입력 불가 PortF[3..0]
  e0:	8f e0       	ldi	r24, 0x0F	; 15
  e2:	80 93 7e 00 	sts	0x007E, r24

      ADCSRA= 0xc8;     // ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블 
  e6:	88 ec       	ldi	r24, 0xC8	; 200
  e8:	80 93 7a 00 	sts	0x007A, r24
               // ADC 클럭 설정; XTAL의1/2(8MHz)
}
  ec:	08 95       	ret

000000ee <__vector_25>:

SIGNAL(ADC_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  ADdata = ADC;
  fc:	80 91 78 00 	lds	r24, 0x0078
 100:	90 91 79 00 	lds	r25, 0x0079
 104:	90 93 99 01 	sts	0x0199, r25
 108:	80 93 98 01 	sts	0x0198, r24
  ADCSRA = 0xc8;
 10c:	88 ec       	ldi	r24, 0xC8	; 200
 10e:	80 93 7a 00 	sts	0x007A, r24
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <ADcLCD>:

void ADcLCD(void)
{
   if(ADCFlag == 0)
 120:	80 91 9c 01 	lds	r24, 0x019C
 124:	88 23       	and	r24, r24
 126:	f1 f4       	brne	.+60     	; 0x164 <ADcLCD+0x44>
   { 
      volume_y= ADdata; // 가변저항 PortF0
 128:	20 91 98 01 	lds	r18, 0x0198
 12c:	30 91 99 01 	lds	r19, 0x0199
 130:	30 93 97 01 	sts	0x0197, r19
 134:	20 93 96 01 	sts	0x0196, r18
      voltage_y= volume_y*50/1023;
 138:	42 e3       	ldi	r20, 0x32	; 50
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	24 9f       	mul	r18, r20
 13e:	c0 01       	movw	r24, r0
 140:	25 9f       	mul	r18, r21
 142:	90 0d       	add	r25, r0
 144:	34 9f       	mul	r19, r20
 146:	90 0d       	add	r25, r0
 148:	11 24       	eor	r1, r1
 14a:	6f ef       	ldi	r22, 0xFF	; 255
 14c:	73 e0       	ldi	r23, 0x03	; 3
 14e:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodhi4>
 152:	70 93 a4 01 	sts	0x01A4, r23
 156:	60 93 a3 01 	sts	0x01A3, r22
      ADCFlag=1; 
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 9c 01 	sts	0x019C, r24
      ADMUX = 0x40;   // PortF1 아날로그 입력 선택 
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	1e c0       	rjmp	.+60     	; 0x1a0 <ADcLCD+0x80>
   } 
   else if(ADCFlag == 1)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	f9 f4       	brne	.+62     	; 0x1a6 <ADcLCD+0x86>
   { 
      volume_x= ADdata; // 온도센서 PortF1
 168:	20 91 98 01 	lds	r18, 0x0198
 16c:	30 91 99 01 	lds	r19, 0x0199
 170:	30 93 a2 01 	sts	0x01A2, r19
 174:	20 93 a1 01 	sts	0x01A1, r18
      voltage_x= volume_x*50/1023;
 178:	42 e3       	ldi	r20, 0x32	; 50
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	24 9f       	mul	r18, r20
 17e:	c0 01       	movw	r24, r0
 180:	25 9f       	mul	r18, r21
 182:	90 0d       	add	r25, r0
 184:	34 9f       	mul	r19, r20
 186:	90 0d       	add	r25, r0
 188:	11 24       	eor	r1, r1
 18a:	6f ef       	ldi	r22, 0xFF	; 255
 18c:	73 e0       	ldi	r23, 0x03	; 3
 18e:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodhi4>
 192:	70 93 9e 01 	sts	0x019E, r23
 196:	60 93 9d 01 	sts	0x019D, r22
      ADCFlag=0; 
 19a:	10 92 9c 01 	sts	0x019C, r1
      ADMUX = 0x41;   // PortF2 아날로그 입력 선택 
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	80 93 7c 00 	sts	0x007C, r24
 1a4:	08 95       	ret
   }
   else ADCFlag=0;
 1a6:	10 92 9c 01 	sts	0x019C, r1
 1aa:	08 95       	ret

000001ac <initPort>:
}

void initPort(void)
{
   DDRC  = 0xff;   // LCD 데이터 및 명령 
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	87 b9       	out	0x07, r24	; 7
   PORTC = 0x00;
 1b0:	18 b8       	out	0x08, r1	; 8
   DDRG  = 0xff;   // LCD 제어 출력 (RS, RW, E)
 1b2:	83 bb       	out	0x13, r24	; 19
   DDRF  = 0x00;   // 아날로그 입력 
 1b4:	10 ba       	out	0x10, r1	; 16
   DDRD = 0x00;		//switch 입력 설정
 1b6:	1a b8       	out	0x0a, r1	; 10
   DDRE  = 0x00;
 1b8:	1d b8       	out	0x0d, r1	; 13
}
 1ba:	08 95       	ret

000001bc <ButtonInput>:
	unsigned char up;
	unsigned char down;
	unsigned char* Button_Info;
		
	// 마스크를 이용해 포트D 입력에서 0번핀 입력 추출 
	in = PIND & BUTTON0_MASK;
 1bc:	99 b1       	in	r25, 0x09	; 9

	if(in>0) up=0;	// S2버튼 안 눌러짐 
	else up=1;		// S2버튼 눌러짐

	// 마스크를 이용해 포트D 입력에서 1번핀 입력 추출 
	in = PIND & BUTTON1_MASK;
 1be:	29 b1       	in	r18, 0x09	; 9

	if(in>0) down=0;	// S3버튼 안 눌러짐	
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	21 fd       	sbrc	r18, 1
 1c4:	80 e0       	ldi	r24, 0x00	; 0
	else down=1;		// S3버튼 눌러짐

	if(up==1 && down==0) Button_Info= "LEFT";	// S2버튼 누른 경우
 1c6:	90 fd       	sbrc	r25, 0
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <ButtonInput+0x14>
 1ca:	88 23       	and	r24, r24
 1cc:	31 f4       	brne	.+12     	; 0x1da <ButtonInput+0x1e>
 1ce:	08 c0       	rjmp	.+16     	; 0x1e0 <ButtonInput+0x24>
	else if(up==0 && down==1) Button_Info = "RIGHT";	// S3버튼 누른 경우
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	49 f0       	breq	.+18     	; 0x1e6 <ButtonInput+0x2a>
	else if (up == 1 && down == 1) Button_Info = "BOTH";
	else Button_Info = "NTH";
 1d4:	80 e1       	ldi	r24, 0x10	; 16
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	08 95       	ret
	if(in>0) down=0;	// S3버튼 안 눌러짐	
	else down=1;		// S3버튼 눌러짐

	if(up==1 && down==0) Button_Info= "LEFT";	// S2버튼 누른 경우
	else if(up==0 && down==1) Button_Info = "RIGHT";	// S3버튼 누른 경우
	else if (up == 1 && down == 1) Button_Info = "BOTH";
 1da:	8b e0       	ldi	r24, 0x0B	; 11
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	08 95       	ret
	in = PIND & BUTTON1_MASK;

	if(in>0) down=0;	// S3버튼 안 눌러짐	
	else down=1;		// S3버튼 눌러짐

	if(up==1 && down==0) Button_Info= "LEFT";	// S2버튼 누른 경우
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	08 95       	ret
	else if(up==0 && down==1) Button_Info = "RIGHT";	// S3버튼 누른 경우
 1e6:	85 e0       	ldi	r24, 0x05	; 5
 1e8:	91 e0       	ldi	r25, 0x01	; 1
	else if (up == 1 && down == 1) Button_Info = "BOTH";
	else Button_Info = "NTH";
	return Button_Info;
}
 1ea:	08 95       	ret

000001ec <E_Pulse>:
 1ec:	a2 9a       	sbi	0x14, 2	; 20
 1ee:	84 e6       	ldi	r24, 0x64	; 100
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 c8 04 	call	0x990	; 0x990 <us_delay>
 1f6:	a2 98       	cbi	0x14, 2	; 20
 1f8:	08 95       	ret

000001fa <LCD_init>:
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 d7 04 	call	0x9ae	; 0x9ae <ms_delay>
 202:	88 e3       	ldi	r24, 0x38	; 56
 204:	88 b9       	out	0x08, r24	; 8
 206:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 20a:	88 e2       	ldi	r24, 0x28	; 40
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 c8 04 	call	0x990	; 0x990 <us_delay>
 212:	8c e0       	ldi	r24, 0x0C	; 12
 214:	88 b9       	out	0x08, r24	; 8
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 c8 04 	call	0x990	; 0x990 <us_delay>
 21e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	88 b9       	out	0x08, r24	; 8
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <ms_delay>
 22e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	88 b9       	out	0x08, r24	; 8
 236:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 23a:	08 95       	ret

0000023c <LCD_cmd>:
 23c:	a0 98       	cbi	0x14, 0	; 20
 23e:	a1 98       	cbi	0x14, 1	; 20
 240:	88 b9       	out	0x08, r24	; 8
 242:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 246:	08 95       	ret

00000248 <Write_Char>:
 248:	a0 9a       	sbi	0x14, 0	; 20
 24a:	a1 98       	cbi	0x14, 1	; 20
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 252:	08 95       	ret

00000254 <LCD_Disp>:
 254:	a0 98       	cbi	0x14, 0	; 20
 256:	a1 98       	cbi	0x14, 1	; 20
 258:	66 23       	and	r22, r22
 25a:	11 f4       	brne	.+4      	; 0x260 <LCD_Disp+0xc>
 25c:	80 58       	subi	r24, 0x80	; 128
 25e:	03 c0       	rjmp	.+6      	; 0x266 <LCD_Disp+0x12>
 260:	61 30       	cpi	r22, 0x01	; 1
 262:	11 f4       	brne	.+4      	; 0x268 <LCD_Disp+0x14>
 264:	80 54       	subi	r24, 0x40	; 64
 266:	88 b9       	out	0x08, r24	; 8
 268:	0e 94 f6 00 	call	0x1ec	; 0x1ec <E_Pulse>
 26c:	08 95       	ret

0000026e <LCD_Write>:
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	00 d0       	rcall	.+0      	; 0x278 <LCD_Write+0xa>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	49 83       	std	Y+1, r20	; 0x01
 27e:	5a 83       	std	Y+2, r21	; 0x02
 280:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_Disp>
 284:	49 81       	ldd	r20, Y+1	; 0x01
 286:	04 2f       	mov	r16, r20
 288:	5a 81       	ldd	r21, Y+2	; 0x02
 28a:	15 2f       	mov	r17, r21
 28c:	02 c0       	rjmp	.+4      	; 0x292 <LCD_Write+0x24>
 28e:	0e 94 24 01 	call	0x248	; 0x248 <Write_Char>
 292:	f8 01       	movw	r30, r16
 294:	81 91       	ld	r24, Z+
 296:	8f 01       	movw	r16, r30
 298:	88 23       	and	r24, r24
 29a:	c9 f7       	brne	.-14     	; 0x28e <LCD_Write+0x20>
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <LCD_Write_char>:
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	0f 92       	push	r0
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	49 83       	std	Y+1, r20	; 0x01
 2b6:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_Disp>
 2ba:	49 81       	ldd	r20, Y+1	; 0x01
 2bc:	84 2f       	mov	r24, r20
 2be:	0e 94 24 01 	call	0x248	; 0x248 <Write_Char>
 2c2:	0f 90       	pop	r0
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <can_init>:
 2ca:	90 91 d8 00 	lds	r25, 0x00D8
 2ce:	91 60       	ori	r25, 0x01	; 1
 2d0:	90 93 d8 00 	sts	0x00D8, r25
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	89 f0       	breq	.+34     	; 0x2fa <can_init+0x30>
 2d8:	84 30       	cpi	r24, 0x04	; 4
 2da:	28 f4       	brcc	.+10     	; 0x2e6 <can_init+0x1c>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	51 f0       	breq	.+20     	; 0x2f4 <can_init+0x2a>
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	d1 f4       	brne	.+52     	; 0x318 <can_init+0x4e>
 2e4:	11 c0       	rjmp	.+34     	; 0x308 <can_init+0x3e>
 2e6:	85 30       	cpi	r24, 0x05	; 5
 2e8:	61 f0       	breq	.+24     	; 0x302 <can_init+0x38>
 2ea:	85 30       	cpi	r24, 0x05	; 5
 2ec:	40 f0       	brcs	.+16     	; 0x2fe <can_init+0x34>
 2ee:	86 30       	cpi	r24, 0x06	; 6
 2f0:	99 f4       	brne	.+38     	; 0x318 <can_init+0x4e>
 2f2:	09 c0       	rjmp	.+18     	; 0x306 <can_init+0x3c>
 2f4:	10 92 e2 00 	sts	0x00E2, r1
 2f8:	09 c0       	rjmp	.+18     	; 0x30c <can_init+0x42>
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <can_init+0x3e>
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	03 c0       	rjmp	.+6      	; 0x308 <can_init+0x3e>
 302:	8e e0       	ldi	r24, 0x0E	; 14
 304:	01 c0       	rjmp	.+2      	; 0x308 <can_init+0x3e>
 306:	82 e1       	ldi	r24, 0x12	; 18
 308:	80 93 e2 00 	sts	0x00E2, r24
 30c:	8c e0       	ldi	r24, 0x0C	; 12
 30e:	80 93 e3 00 	sts	0x00E3, r24
 312:	87 e3       	ldi	r24, 0x37	; 55
 314:	80 93 e4 00 	sts	0x00E4, r24
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	98 2f       	mov	r25, r24
 31c:	92 95       	swap	r25
 31e:	90 7f       	andi	r25, 0xF0	; 240
 320:	90 93 ed 00 	sts	0x00ED, r25
 324:	10 92 ef 00 	sts	0x00EF, r1
 328:	10 92 ee 00 	sts	0x00EE, r1
 32c:	10 92 f3 00 	sts	0x00F3, r1
 330:	10 92 f2 00 	sts	0x00F2, r1
 334:	10 92 f1 00 	sts	0x00F1, r1
 338:	10 92 f0 00 	sts	0x00F0, r1
 33c:	10 92 f7 00 	sts	0x00F7, r1
 340:	10 92 f6 00 	sts	0x00F6, r1
 344:	10 92 f5 00 	sts	0x00F5, r1
 348:	10 92 f4 00 	sts	0x00F4, r1
 34c:	10 92 fa 00 	sts	0x00FA, r1
 350:	10 92 fa 00 	sts	0x00FA, r1
 354:	10 92 fa 00 	sts	0x00FA, r1
 358:	10 92 fa 00 	sts	0x00FA, r1
 35c:	10 92 fa 00 	sts	0x00FA, r1
 360:	10 92 fa 00 	sts	0x00FA, r1
 364:	10 92 fa 00 	sts	0x00FA, r1
 368:	10 92 fa 00 	sts	0x00FA, r1
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	8f 30       	cpi	r24, 0x0F	; 15
 370:	a1 f6       	brne	.-88     	; 0x31a <can_init+0x50>
 372:	10 92 db 00 	sts	0x00DB, r1
 376:	10 92 df 00 	sts	0x00DF, r1
 37a:	10 92 de 00 	sts	0x00DE, r1
 37e:	10 92 e1 00 	sts	0x00E1, r1
 382:	10 92 e0 00 	sts	0x00E0, r1
 386:	80 91 d8 00 	lds	r24, 0x00D8
 38a:	82 60       	ori	r24, 0x02	; 2
 38c:	80 93 d8 00 	sts	0x00D8, r24
 390:	80 91 d9 00 	lds	r24, 0x00D9
 394:	82 ff       	sbrs	r24, 2
 396:	fc cf       	rjmp	.-8      	; 0x390 <can_init+0xc6>
 398:	08 95       	ret

0000039a <can_init_8Mhz>:
 39a:	90 91 d8 00 	lds	r25, 0x00D8
 39e:	91 60       	ori	r25, 0x01	; 1
 3a0:	90 93 d8 00 	sts	0x00D8, r25
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	c1 f0       	breq	.+48     	; 0x3d8 <can_init_8Mhz+0x3e>
 3a8:	84 30       	cpi	r24, 0x04	; 4
 3aa:	28 f4       	brcc	.+10     	; 0x3b6 <can_init_8Mhz+0x1c>
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	51 f0       	breq	.+20     	; 0x3c4 <can_init_8Mhz+0x2a>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	39 f5       	brne	.+78     	; 0x402 <can_init_8Mhz+0x68>
 3b4:	0e c0       	rjmp	.+28     	; 0x3d2 <can_init_8Mhz+0x38>
 3b6:	85 30       	cpi	r24, 0x05	; 5
 3b8:	c9 f0       	breq	.+50     	; 0x3ec <can_init_8Mhz+0x52>
 3ba:	85 30       	cpi	r24, 0x05	; 5
 3bc:	78 f0       	brcs	.+30     	; 0x3dc <can_init_8Mhz+0x42>
 3be:	86 30       	cpi	r24, 0x06	; 6
 3c0:	01 f5       	brne	.+64     	; 0x402 <can_init_8Mhz+0x68>
 3c2:	16 c0       	rjmp	.+44     	; 0x3f0 <can_init_8Mhz+0x56>
 3c4:	10 92 e2 00 	sts	0x00E2, r1
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	80 93 e3 00 	sts	0x00E3, r24
 3ce:	83 e1       	ldi	r24, 0x13	; 19
 3d0:	16 c0       	rjmp	.+44     	; 0x3fe <can_init_8Mhz+0x64>
 3d2:	10 92 e2 00 	sts	0x00E2, r1
 3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <can_init_8Mhz+0x5c>
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	0b c0       	rjmp	.+22     	; 0x3f2 <can_init_8Mhz+0x58>
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	80 93 e2 00 	sts	0x00E2, r24
 3e2:	8e e0       	ldi	r24, 0x0E	; 14
 3e4:	80 93 e3 00 	sts	0x00E3, r24
 3e8:	8b e4       	ldi	r24, 0x4B	; 75
 3ea:	09 c0       	rjmp	.+18     	; 0x3fe <can_init_8Mhz+0x64>
 3ec:	86 e0       	ldi	r24, 0x06	; 6
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <can_init_8Mhz+0x58>
 3f0:	88 e0       	ldi	r24, 0x08	; 8
 3f2:	80 93 e2 00 	sts	0x00E2, r24
 3f6:	8c e0       	ldi	r24, 0x0C	; 12
 3f8:	80 93 e3 00 	sts	0x00E3, r24
 3fc:	87 e3       	ldi	r24, 0x37	; 55
 3fe:	80 93 e4 00 	sts	0x00E4, r24
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	98 2f       	mov	r25, r24
 406:	92 95       	swap	r25
 408:	90 7f       	andi	r25, 0xF0	; 240
 40a:	90 93 ed 00 	sts	0x00ED, r25
 40e:	10 92 ef 00 	sts	0x00EF, r1
 412:	10 92 ee 00 	sts	0x00EE, r1
 416:	10 92 f3 00 	sts	0x00F3, r1
 41a:	10 92 f2 00 	sts	0x00F2, r1
 41e:	10 92 f1 00 	sts	0x00F1, r1
 422:	10 92 f0 00 	sts	0x00F0, r1
 426:	10 92 f7 00 	sts	0x00F7, r1
 42a:	10 92 f6 00 	sts	0x00F6, r1
 42e:	10 92 f5 00 	sts	0x00F5, r1
 432:	10 92 f4 00 	sts	0x00F4, r1
 436:	10 92 fa 00 	sts	0x00FA, r1
 43a:	10 92 fa 00 	sts	0x00FA, r1
 43e:	10 92 fa 00 	sts	0x00FA, r1
 442:	10 92 fa 00 	sts	0x00FA, r1
 446:	10 92 fa 00 	sts	0x00FA, r1
 44a:	10 92 fa 00 	sts	0x00FA, r1
 44e:	10 92 fa 00 	sts	0x00FA, r1
 452:	10 92 fa 00 	sts	0x00FA, r1
 456:	8f 5f       	subi	r24, 0xFF	; 255
 458:	8f 30       	cpi	r24, 0x0F	; 15
 45a:	a1 f6       	brne	.-88     	; 0x404 <can_init_8Mhz+0x6a>
 45c:	10 92 db 00 	sts	0x00DB, r1
 460:	10 92 df 00 	sts	0x00DF, r1
 464:	10 92 de 00 	sts	0x00DE, r1
 468:	10 92 e1 00 	sts	0x00E1, r1
 46c:	10 92 e0 00 	sts	0x00E0, r1
 470:	80 e2       	ldi	r24, 0x20	; 32
 472:	80 93 d8 00 	sts	0x00D8, r24
 476:	80 91 d8 00 	lds	r24, 0x00D8
 47a:	82 60       	ori	r24, 0x02	; 2
 47c:	80 93 d8 00 	sts	0x00D8, r24
 480:	80 91 d9 00 	lds	r24, 0x00D9
 484:	82 ff       	sbrs	r24, 2
 486:	fc cf       	rjmp	.-8      	; 0x480 <can_init_8Mhz+0xe6>
 488:	08 95       	ret

0000048a <can_tx>:
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	fb 01       	movw	r30, r22
 490:	00 81       	ld	r16, Z
 492:	11 81       	ldd	r17, Z+1	; 0x01
 494:	22 81       	ldd	r18, Z+2	; 0x02
 496:	33 81       	ldd	r19, Z+3	; 0x03
 498:	82 95       	swap	r24
 49a:	80 7f       	andi	r24, 0xF0	; 240
 49c:	80 93 ed 00 	sts	0x00ED, r24
 4a0:	10 92 ee 00 	sts	0x00EE, r1
 4a4:	10 92 ef 00 	sts	0x00EF, r1
 4a8:	85 81       	ldd	r24, Z+5	; 0x05
 4aa:	88 23       	and	r24, r24
 4ac:	a1 f4       	brne	.+40     	; 0x4d6 <can_tx+0x4c>
 4ae:	d9 01       	movw	r26, r18
 4b0:	c8 01       	movw	r24, r16
 4b2:	53 e0       	ldi	r21, 0x03	; 3
 4b4:	b6 95       	lsr	r27
 4b6:	a7 95       	ror	r26
 4b8:	97 95       	ror	r25
 4ba:	87 95       	ror	r24
 4bc:	5a 95       	dec	r21
 4be:	d1 f7       	brne	.-12     	; 0x4b4 <can_tx+0x2a>
 4c0:	80 93 f3 00 	sts	0x00F3, r24
 4c4:	02 95       	swap	r16
 4c6:	00 0f       	add	r16, r16
 4c8:	00 7e       	andi	r16, 0xE0	; 224
 4ca:	00 93 f2 00 	sts	0x00F2, r16
 4ce:	80 91 ef 00 	lds	r24, 0x00EF
 4d2:	8f 7e       	andi	r24, 0xEF	; 239
 4d4:	29 c0       	rjmp	.+82     	; 0x528 <can_tx+0x9e>
 4d6:	d9 01       	movw	r26, r18
 4d8:	c8 01       	movw	r24, r16
 4da:	55 e1       	ldi	r21, 0x15	; 21
 4dc:	b6 95       	lsr	r27
 4de:	a7 95       	ror	r26
 4e0:	97 95       	ror	r25
 4e2:	87 95       	ror	r24
 4e4:	5a 95       	dec	r21
 4e6:	d1 f7       	brne	.-12     	; 0x4dc <can_tx+0x52>
 4e8:	80 93 f3 00 	sts	0x00F3, r24
 4ec:	d9 01       	movw	r26, r18
 4ee:	c8 01       	movw	r24, r16
 4f0:	6d e0       	ldi	r22, 0x0D	; 13
 4f2:	b6 95       	lsr	r27
 4f4:	a7 95       	ror	r26
 4f6:	97 95       	ror	r25
 4f8:	87 95       	ror	r24
 4fa:	6a 95       	dec	r22
 4fc:	d1 f7       	brne	.-12     	; 0x4f2 <can_tx+0x68>
 4fe:	80 93 f2 00 	sts	0x00F2, r24
 502:	d9 01       	movw	r26, r18
 504:	c8 01       	movw	r24, r16
 506:	75 e0       	ldi	r23, 0x05	; 5
 508:	b6 95       	lsr	r27
 50a:	a7 95       	ror	r26
 50c:	97 95       	ror	r25
 50e:	87 95       	ror	r24
 510:	7a 95       	dec	r23
 512:	d1 f7       	brne	.-12     	; 0x508 <can_tx+0x7e>
 514:	80 93 f1 00 	sts	0x00F1, r24
 518:	00 0f       	add	r16, r16
 51a:	00 0f       	add	r16, r16
 51c:	00 0f       	add	r16, r16
 51e:	00 93 f0 00 	sts	0x00F0, r16
 522:	80 91 ef 00 	lds	r24, 0x00EF
 526:	80 61       	ori	r24, 0x10	; 16
 528:	80 93 ef 00 	sts	0x00EF, r24
 52c:	80 91 ef 00 	lds	r24, 0x00EF
 530:	96 81       	ldd	r25, Z+6	; 0x06
 532:	89 2b       	or	r24, r25
 534:	80 93 ef 00 	sts	0x00EF, r24
 538:	80 91 f0 00 	lds	r24, 0x00F0
 53c:	44 70       	andi	r20, 0x04	; 4
 53e:	48 2b       	or	r20, r24
 540:	40 93 f0 00 	sts	0x00F0, r20
 544:	80 91 f0 00 	lds	r24, 0x00F0
 548:	8d 7f       	andi	r24, 0xFD	; 253
 54a:	80 93 f0 00 	sts	0x00F0, r24
 54e:	80 91 f0 00 	lds	r24, 0x00F0
 552:	8e 7f       	andi	r24, 0xFE	; 254
 554:	80 93 f0 00 	sts	0x00F0, r24
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	09 c0       	rjmp	.+18     	; 0x56e <can_tx+0xe4>
 55c:	df 01       	movw	r26, r30
 55e:	a8 0f       	add	r26, r24
 560:	b1 1d       	adc	r27, r1
 562:	17 96       	adiw	r26, 0x07	; 7
 564:	9c 91       	ld	r25, X
 566:	17 97       	sbiw	r26, 0x07	; 7
 568:	90 93 fa 00 	sts	0x00FA, r25
 56c:	8f 5f       	subi	r24, 0xFF	; 255
 56e:	96 81       	ldd	r25, Z+6	; 0x06
 570:	89 17       	cp	r24, r25
 572:	a0 f3       	brcs	.-24     	; 0x55c <can_tx+0xd2>
 574:	80 91 ef 00 	lds	r24, 0x00EF
 578:	80 64       	ori	r24, 0x40	; 64
 57a:	80 93 ef 00 	sts	0x00EF, r24
 57e:	80 91 ee 00 	lds	r24, 0x00EE
 582:	86 ff       	sbrs	r24, 6
 584:	fc cf       	rjmp	.-8      	; 0x57e <can_tx+0xf4>
 586:	80 91 ee 00 	lds	r24, 0x00EE
 58a:	8f 7b       	andi	r24, 0xBF	; 191
 58c:	80 93 ee 00 	sts	0x00EE, r24
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
 596:	08 95       	ret

00000598 <can_rx>:
 598:	cf 92       	push	r12
 59a:	df 92       	push	r13
 59c:	ef 92       	push	r14
 59e:	ff 92       	push	r15
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	fb 01       	movw	r30, r22
 5a6:	82 95       	swap	r24
 5a8:	80 7f       	andi	r24, 0xF0	; 240
 5aa:	80 93 ed 00 	sts	0x00ED, r24
 5ae:	80 91 ee 00 	lds	r24, 0x00EE
 5b2:	85 ff       	sbrs	r24, 5
 5b4:	fc cf       	rjmp	.-8      	; 0x5ae <can_rx+0x16>
 5b6:	80 91 ef 00 	lds	r24, 0x00EF
 5ba:	84 fd       	sbrc	r24, 4
 5bc:	1b c0       	rjmp	.+54     	; 0x5f4 <can_rx+0x5c>
 5be:	15 82       	std	Z+5, r1	; 0x05
 5c0:	80 91 f3 00 	lds	r24, 0x00F3
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	a0 e0       	ldi	r26, 0x00	; 0
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	ba 2f       	mov	r27, r26
 5cc:	a9 2f       	mov	r26, r25
 5ce:	98 2f       	mov	r25, r24
 5d0:	88 27       	eor	r24, r24
 5d2:	40 91 f2 00 	lds	r20, 0x00F2
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	84 2b       	or	r24, r20
 5de:	95 2b       	or	r25, r21
 5e0:	a6 2b       	or	r26, r22
 5e2:	b7 2b       	or	r27, r23
 5e4:	35 e0       	ldi	r19, 0x05	; 5
 5e6:	b6 95       	lsr	r27
 5e8:	a7 95       	ror	r26
 5ea:	97 95       	ror	r25
 5ec:	87 95       	ror	r24
 5ee:	3a 95       	dec	r19
 5f0:	d1 f7       	brne	.-12     	; 0x5e6 <can_rx+0x4e>
 5f2:	35 c0       	rjmp	.+106    	; 0x65e <can_rx+0xc6>
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	85 83       	std	Z+5, r24	; 0x05
 5f8:	80 91 f3 00 	lds	r24, 0x00F3
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	a0 e0       	ldi	r26, 0x00	; 0
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	b8 2f       	mov	r27, r24
 604:	aa 27       	eor	r26, r26
 606:	99 27       	eor	r25, r25
 608:	88 27       	eor	r24, r24
 60a:	c0 90 f2 00 	lds	r12, 0x00F2
 60e:	40 91 f1 00 	lds	r20, 0x00F1
 612:	00 91 f0 00 	lds	r16, 0x00F0
 616:	dd 24       	eor	r13, r13
 618:	ee 24       	eor	r14, r14
 61a:	ff 24       	eor	r15, r15
 61c:	76 01       	movw	r14, r12
 61e:	dd 24       	eor	r13, r13
 620:	cc 24       	eor	r12, r12
 622:	8c 29       	or	r24, r12
 624:	9d 29       	or	r25, r13
 626:	ae 29       	or	r26, r14
 628:	bf 29       	or	r27, r15
 62a:	10 e0       	ldi	r17, 0x00	; 0
 62c:	20 e0       	ldi	r18, 0x00	; 0
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	80 2b       	or	r24, r16
 632:	91 2b       	or	r25, r17
 634:	a2 2b       	or	r26, r18
 636:	b3 2b       	or	r27, r19
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	76 2f       	mov	r23, r22
 640:	65 2f       	mov	r22, r21
 642:	54 2f       	mov	r21, r20
 644:	44 27       	eor	r20, r20
 646:	84 2b       	or	r24, r20
 648:	95 2b       	or	r25, r21
 64a:	a6 2b       	or	r26, r22
 64c:	b7 2b       	or	r27, r23
 64e:	68 94       	set
 650:	12 f8       	bld	r1, 2
 652:	b6 95       	lsr	r27
 654:	a7 95       	ror	r26
 656:	97 95       	ror	r25
 658:	87 95       	ror	r24
 65a:	16 94       	lsr	r1
 65c:	d1 f7       	brne	.-12     	; 0x652 <can_rx+0xba>
 65e:	80 83       	st	Z, r24
 660:	91 83       	std	Z+1, r25	; 0x01
 662:	a2 83       	std	Z+2, r26	; 0x02
 664:	b3 83       	std	Z+3, r27	; 0x03
 666:	80 91 f0 00 	lds	r24, 0x00F0
 66a:	84 70       	andi	r24, 0x04	; 4
 66c:	84 83       	std	Z+4, r24	; 0x04
 66e:	80 91 ef 00 	lds	r24, 0x00EF
 672:	8f 70       	andi	r24, 0x0F	; 15
 674:	86 83       	std	Z+6, r24	; 0x06
 676:	40 e0       	ldi	r20, 0x00	; 0
 678:	09 c0       	rjmp	.+18     	; 0x68c <can_rx+0xf4>
 67a:	80 91 fa 00 	lds	r24, 0x00FA
 67e:	2e 0f       	add	r18, r30
 680:	3f 1f       	adc	r19, r31
 682:	d9 01       	movw	r26, r18
 684:	17 96       	adiw	r26, 0x07	; 7
 686:	8c 93       	st	X, r24
 688:	17 97       	sbiw	r26, 0x07	; 7
 68a:	4f 5f       	subi	r20, 0xFF	; 255
 68c:	24 2f       	mov	r18, r20
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	80 91 ef 00 	lds	r24, 0x00EF
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	8f 70       	andi	r24, 0x0F	; 15
 698:	90 70       	andi	r25, 0x00	; 0
 69a:	28 17       	cp	r18, r24
 69c:	39 07       	cpc	r19, r25
 69e:	6c f3       	brlt	.-38     	; 0x67a <can_rx+0xe2>
 6a0:	10 92 ee 00 	sts	0x00EE, r1
 6a4:	80 91 ef 00 	lds	r24, 0x00EF
 6a8:	80 68       	ori	r24, 0x80	; 128
 6aa:	80 93 ef 00 	sts	0x00EF, r24
 6ae:	80 91 ee 00 	lds	r24, 0x00EE
 6b2:	8f 7d       	andi	r24, 0xDF	; 223
 6b4:	80 93 ee 00 	sts	0x00EE, r24
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	1f 91       	pop	r17
 6bc:	0f 91       	pop	r16
 6be:	ff 90       	pop	r15
 6c0:	ef 90       	pop	r14
 6c2:	df 90       	pop	r13
 6c4:	cf 90       	pop	r12
 6c6:	08 95       	ret

000006c8 <can_rx_set>:
 6c8:	af 92       	push	r10
 6ca:	cf 92       	push	r12
 6cc:	df 92       	push	r13
 6ce:	ef 92       	push	r14
 6d0:	ff 92       	push	r15
 6d2:	0f 93       	push	r16
 6d4:	82 95       	swap	r24
 6d6:	80 7f       	andi	r24, 0xF0	; 240
 6d8:	80 93 ed 00 	sts	0x00ED, r24
 6dc:	10 92 ee 00 	sts	0x00EE, r1
 6e0:	db 01       	movw	r26, r22
 6e2:	ca 01       	movw	r24, r20
 6e4:	22 23       	and	r18, r18
 6e6:	29 f5       	brne	.+74     	; 0x732 <can_rx_set+0x6a>
 6e8:	f3 e0       	ldi	r31, 0x03	; 3
 6ea:	b6 95       	lsr	r27
 6ec:	a7 95       	ror	r26
 6ee:	97 95       	ror	r25
 6f0:	87 95       	ror	r24
 6f2:	fa 95       	dec	r31
 6f4:	d1 f7       	brne	.-12     	; 0x6ea <can_rx_set+0x22>
 6f6:	80 93 f3 00 	sts	0x00F3, r24
 6fa:	42 95       	swap	r20
 6fc:	44 0f       	add	r20, r20
 6fe:	40 7e       	andi	r20, 0xE0	; 224
 700:	40 93 f2 00 	sts	0x00F2, r20
 704:	d7 01       	movw	r26, r14
 706:	c6 01       	movw	r24, r12
 708:	23 e0       	ldi	r18, 0x03	; 3
 70a:	b6 95       	lsr	r27
 70c:	a7 95       	ror	r26
 70e:	97 95       	ror	r25
 710:	87 95       	ror	r24
 712:	2a 95       	dec	r18
 714:	d1 f7       	brne	.-12     	; 0x70a <can_rx_set+0x42>
 716:	80 93 f7 00 	sts	0x00F7, r24
 71a:	c2 94       	swap	r12
 71c:	cc 0c       	add	r12, r12
 71e:	30 ee       	ldi	r19, 0xE0	; 224
 720:	c3 22       	and	r12, r19
 722:	c0 92 f6 00 	sts	0x00F6, r12
 726:	10 92 f4 00 	sts	0x00F4, r1
 72a:	80 91 ef 00 	lds	r24, 0x00EF
 72e:	8f 7e       	andi	r24, 0xEF	; 239
 730:	4d c0       	rjmp	.+154    	; 0x7cc <can_rx_set+0x104>
 732:	e5 e1       	ldi	r30, 0x15	; 21
 734:	b6 95       	lsr	r27
 736:	a7 95       	ror	r26
 738:	97 95       	ror	r25
 73a:	87 95       	ror	r24
 73c:	ea 95       	dec	r30
 73e:	d1 f7       	brne	.-12     	; 0x734 <can_rx_set+0x6c>
 740:	80 93 f3 00 	sts	0x00F3, r24
 744:	db 01       	movw	r26, r22
 746:	ca 01       	movw	r24, r20
 748:	fd e0       	ldi	r31, 0x0D	; 13
 74a:	b6 95       	lsr	r27
 74c:	a7 95       	ror	r26
 74e:	97 95       	ror	r25
 750:	87 95       	ror	r24
 752:	fa 95       	dec	r31
 754:	d1 f7       	brne	.-12     	; 0x74a <can_rx_set+0x82>
 756:	80 93 f2 00 	sts	0x00F2, r24
 75a:	db 01       	movw	r26, r22
 75c:	ca 01       	movw	r24, r20
 75e:	25 e0       	ldi	r18, 0x05	; 5
 760:	b6 95       	lsr	r27
 762:	a7 95       	ror	r26
 764:	97 95       	ror	r25
 766:	87 95       	ror	r24
 768:	2a 95       	dec	r18
 76a:	d1 f7       	brne	.-12     	; 0x760 <can_rx_set+0x98>
 76c:	80 93 f1 00 	sts	0x00F1, r24
 770:	44 0f       	add	r20, r20
 772:	44 0f       	add	r20, r20
 774:	44 0f       	add	r20, r20
 776:	40 93 f0 00 	sts	0x00F0, r20
 77a:	d7 01       	movw	r26, r14
 77c:	c6 01       	movw	r24, r12
 77e:	35 e1       	ldi	r19, 0x15	; 21
 780:	b6 95       	lsr	r27
 782:	a7 95       	ror	r26
 784:	97 95       	ror	r25
 786:	87 95       	ror	r24
 788:	3a 95       	dec	r19
 78a:	d1 f7       	brne	.-12     	; 0x780 <can_rx_set+0xb8>
 78c:	80 93 f7 00 	sts	0x00F7, r24
 790:	d7 01       	movw	r26, r14
 792:	c6 01       	movw	r24, r12
 794:	4d e0       	ldi	r20, 0x0D	; 13
 796:	b6 95       	lsr	r27
 798:	a7 95       	ror	r26
 79a:	97 95       	ror	r25
 79c:	87 95       	ror	r24
 79e:	4a 95       	dec	r20
 7a0:	d1 f7       	brne	.-12     	; 0x796 <can_rx_set+0xce>
 7a2:	80 93 f6 00 	sts	0x00F6, r24
 7a6:	d7 01       	movw	r26, r14
 7a8:	c6 01       	movw	r24, r12
 7aa:	e5 e0       	ldi	r30, 0x05	; 5
 7ac:	b6 95       	lsr	r27
 7ae:	a7 95       	ror	r26
 7b0:	97 95       	ror	r25
 7b2:	87 95       	ror	r24
 7b4:	ea 95       	dec	r30
 7b6:	d1 f7       	brne	.-12     	; 0x7ac <can_rx_set+0xe4>
 7b8:	80 93 f5 00 	sts	0x00F5, r24
 7bc:	cc 0c       	add	r12, r12
 7be:	cc 0c       	add	r12, r12
 7c0:	cc 0c       	add	r12, r12
 7c2:	c0 92 f4 00 	sts	0x00F4, r12
 7c6:	80 91 ef 00 	lds	r24, 0x00EF
 7ca:	80 61       	ori	r24, 0x10	; 16
 7cc:	80 93 ef 00 	sts	0x00EF, r24
 7d0:	80 91 ef 00 	lds	r24, 0x00EF
 7d4:	0f 70       	andi	r16, 0x0F	; 15
 7d6:	08 2b       	or	r16, r24
 7d8:	00 93 ef 00 	sts	0x00EF, r16
 7dc:	90 91 f4 00 	lds	r25, 0x00F4
 7e0:	8a 2d       	mov	r24, r10
 7e2:	87 70       	andi	r24, 0x07	; 7
 7e4:	89 2b       	or	r24, r25
 7e6:	80 93 f4 00 	sts	0x00F4, r24
 7ea:	80 91 ef 00 	lds	r24, 0x00EF
 7ee:	80 68       	ori	r24, 0x80	; 128
 7f0:	80 93 ef 00 	sts	0x00EF, r24
 7f4:	0f 91       	pop	r16
 7f6:	ff 90       	pop	r15
 7f8:	ef 90       	pop	r14
 7fa:	df 90       	pop	r13
 7fc:	cf 90       	pop	r12
 7fe:	af 90       	pop	r10
 800:	08 95       	ret

00000802 <can_int_rx_set>:
 802:	af 92       	push	r10
 804:	cf 92       	push	r12
 806:	df 92       	push	r13
 808:	ef 92       	push	r14
 80a:	ff 92       	push	r15
 80c:	0f 93       	push	r16
 80e:	38 2f       	mov	r19, r24
 810:	82 95       	swap	r24
 812:	80 7f       	andi	r24, 0xF0	; 240
 814:	80 93 ed 00 	sts	0x00ED, r24
 818:	10 92 ee 00 	sts	0x00EE, r1
 81c:	80 91 ef 00 	lds	r24, 0x00EF
 820:	21 ff       	sbrs	r18, 1
 822:	02 c0       	rjmp	.+4      	; 0x828 <can_int_rx_set+0x26>
 824:	80 62       	ori	r24, 0x20	; 32
 826:	01 c0       	rjmp	.+2      	; 0x82a <can_int_rx_set+0x28>
 828:	8f 7d       	andi	r24, 0xDF	; 223
 82a:	80 93 ef 00 	sts	0x00EF, r24
 82e:	db 01       	movw	r26, r22
 830:	ca 01       	movw	r24, r20
 832:	20 fd       	sbrc	r18, 0
 834:	25 c0       	rjmp	.+74     	; 0x880 <can_int_rx_set+0x7e>
 836:	23 e0       	ldi	r18, 0x03	; 3
 838:	b6 95       	lsr	r27
 83a:	a7 95       	ror	r26
 83c:	97 95       	ror	r25
 83e:	87 95       	ror	r24
 840:	2a 95       	dec	r18
 842:	d1 f7       	brne	.-12     	; 0x838 <can_int_rx_set+0x36>
 844:	80 93 f3 00 	sts	0x00F3, r24
 848:	42 95       	swap	r20
 84a:	44 0f       	add	r20, r20
 84c:	40 7e       	andi	r20, 0xE0	; 224
 84e:	40 93 f2 00 	sts	0x00F2, r20
 852:	d7 01       	movw	r26, r14
 854:	c6 01       	movw	r24, r12
 856:	43 e0       	ldi	r20, 0x03	; 3
 858:	b6 95       	lsr	r27
 85a:	a7 95       	ror	r26
 85c:	97 95       	ror	r25
 85e:	87 95       	ror	r24
 860:	4a 95       	dec	r20
 862:	d1 f7       	brne	.-12     	; 0x858 <can_int_rx_set+0x56>
 864:	80 93 f7 00 	sts	0x00F7, r24
 868:	c2 94       	swap	r12
 86a:	cc 0c       	add	r12, r12
 86c:	50 ee       	ldi	r21, 0xE0	; 224
 86e:	c5 22       	and	r12, r21
 870:	c0 92 f6 00 	sts	0x00F6, r12
 874:	10 92 f4 00 	sts	0x00F4, r1
 878:	80 91 ef 00 	lds	r24, 0x00EF
 87c:	8f 7e       	andi	r24, 0xEF	; 239
 87e:	4d c0       	rjmp	.+154    	; 0x91a <can_int_rx_set+0x118>
 880:	e5 e1       	ldi	r30, 0x15	; 21
 882:	b6 95       	lsr	r27
 884:	a7 95       	ror	r26
 886:	97 95       	ror	r25
 888:	87 95       	ror	r24
 88a:	ea 95       	dec	r30
 88c:	d1 f7       	brne	.-12     	; 0x882 <can_int_rx_set+0x80>
 88e:	80 93 f3 00 	sts	0x00F3, r24
 892:	db 01       	movw	r26, r22
 894:	ca 01       	movw	r24, r20
 896:	fd e0       	ldi	r31, 0x0D	; 13
 898:	b6 95       	lsr	r27
 89a:	a7 95       	ror	r26
 89c:	97 95       	ror	r25
 89e:	87 95       	ror	r24
 8a0:	fa 95       	dec	r31
 8a2:	d1 f7       	brne	.-12     	; 0x898 <can_int_rx_set+0x96>
 8a4:	80 93 f2 00 	sts	0x00F2, r24
 8a8:	db 01       	movw	r26, r22
 8aa:	ca 01       	movw	r24, r20
 8ac:	25 e0       	ldi	r18, 0x05	; 5
 8ae:	b6 95       	lsr	r27
 8b0:	a7 95       	ror	r26
 8b2:	97 95       	ror	r25
 8b4:	87 95       	ror	r24
 8b6:	2a 95       	dec	r18
 8b8:	d1 f7       	brne	.-12     	; 0x8ae <can_int_rx_set+0xac>
 8ba:	80 93 f1 00 	sts	0x00F1, r24
 8be:	44 0f       	add	r20, r20
 8c0:	44 0f       	add	r20, r20
 8c2:	44 0f       	add	r20, r20
 8c4:	40 93 f0 00 	sts	0x00F0, r20
 8c8:	d7 01       	movw	r26, r14
 8ca:	c6 01       	movw	r24, r12
 8cc:	45 e1       	ldi	r20, 0x15	; 21
 8ce:	b6 95       	lsr	r27
 8d0:	a7 95       	ror	r26
 8d2:	97 95       	ror	r25
 8d4:	87 95       	ror	r24
 8d6:	4a 95       	dec	r20
 8d8:	d1 f7       	brne	.-12     	; 0x8ce <can_int_rx_set+0xcc>
 8da:	80 93 f7 00 	sts	0x00F7, r24
 8de:	d7 01       	movw	r26, r14
 8e0:	c6 01       	movw	r24, r12
 8e2:	ed e0       	ldi	r30, 0x0D	; 13
 8e4:	b6 95       	lsr	r27
 8e6:	a7 95       	ror	r26
 8e8:	97 95       	ror	r25
 8ea:	87 95       	ror	r24
 8ec:	ea 95       	dec	r30
 8ee:	d1 f7       	brne	.-12     	; 0x8e4 <can_int_rx_set+0xe2>
 8f0:	80 93 f6 00 	sts	0x00F6, r24
 8f4:	d7 01       	movw	r26, r14
 8f6:	c6 01       	movw	r24, r12
 8f8:	f5 e0       	ldi	r31, 0x05	; 5
 8fa:	b6 95       	lsr	r27
 8fc:	a7 95       	ror	r26
 8fe:	97 95       	ror	r25
 900:	87 95       	ror	r24
 902:	fa 95       	dec	r31
 904:	d1 f7       	brne	.-12     	; 0x8fa <can_int_rx_set+0xf8>
 906:	80 93 f5 00 	sts	0x00F5, r24
 90a:	cc 0c       	add	r12, r12
 90c:	cc 0c       	add	r12, r12
 90e:	cc 0c       	add	r12, r12
 910:	c0 92 f4 00 	sts	0x00F4, r12
 914:	80 91 ef 00 	lds	r24, 0x00EF
 918:	80 61       	ori	r24, 0x10	; 16
 91a:	80 93 ef 00 	sts	0x00EF, r24
 91e:	80 91 ef 00 	lds	r24, 0x00EF
 922:	0f 70       	andi	r16, 0x0F	; 15
 924:	08 2b       	or	r16, r24
 926:	00 93 ef 00 	sts	0x00EF, r16
 92a:	90 91 f4 00 	lds	r25, 0x00F4
 92e:	8a 2d       	mov	r24, r10
 930:	87 70       	andi	r24, 0x07	; 7
 932:	89 2b       	or	r24, r25
 934:	80 93 f4 00 	sts	0x00F4, r24
 938:	80 91 db 00 	lds	r24, 0x00DB
 93c:	80 6a       	ori	r24, 0xA0	; 160
 93e:	80 93 db 00 	sts	0x00DB, r24
 942:	38 30       	cpi	r19, 0x08	; 8
 944:	50 f4       	brcc	.+20     	; 0x95a <can_int_rx_set+0x158>
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	02 c0       	rjmp	.+4      	; 0x950 <can_int_rx_set+0x14e>
 94c:	88 0f       	add	r24, r24
 94e:	99 1f       	adc	r25, r25
 950:	3a 95       	dec	r19
 952:	e2 f7       	brpl	.-8      	; 0x94c <can_int_rx_set+0x14a>
 954:	80 93 de 00 	sts	0x00DE, r24
 958:	0d c0       	rjmp	.+26     	; 0x974 <can_int_rx_set+0x172>
 95a:	23 2f       	mov	r18, r19
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	28 50       	subi	r18, 0x08	; 8
 960:	30 40       	sbci	r19, 0x00	; 0
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	02 c0       	rjmp	.+4      	; 0x96c <can_int_rx_set+0x16a>
 968:	88 0f       	add	r24, r24
 96a:	99 1f       	adc	r25, r25
 96c:	2a 95       	dec	r18
 96e:	e2 f7       	brpl	.-8      	; 0x968 <can_int_rx_set+0x166>
 970:	80 93 df 00 	sts	0x00DF, r24
 974:	80 91 ef 00 	lds	r24, 0x00EF
 978:	80 68       	ori	r24, 0x80	; 128
 97a:	80 93 ef 00 	sts	0x00EF, r24
 97e:	78 94       	sei
 980:	0f 91       	pop	r16
 982:	ff 90       	pop	r15
 984:	ef 90       	pop	r14
 986:	df 90       	pop	r13
 988:	cf 90       	pop	r12
 98a:	af 90       	pop	r10
 98c:	08 95       	ret

0000098e <delay>:
 98e:	08 95       	ret

00000990 <us_delay>:
 990:	20 e0       	ldi	r18, 0x00	; 0
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	08 c0       	rjmp	.+16     	; 0x9a6 <us_delay+0x16>
 996:	0f 92       	push	r0
 998:	0f 90       	pop	r0
 99a:	0f 92       	push	r0
 99c:	0f 90       	pop	r0
 99e:	0f 92       	push	r0
 9a0:	0f 90       	pop	r0
 9a2:	2f 5f       	subi	r18, 0xFF	; 255
 9a4:	3f 4f       	sbci	r19, 0xFF	; 255
 9a6:	28 17       	cp	r18, r24
 9a8:	39 07       	cpc	r19, r25
 9aa:	a9 f7       	brne	.-22     	; 0x996 <us_delay+0x6>
 9ac:	08 95       	ret

000009ae <ms_delay>:
 9ae:	0f 93       	push	r16
 9b0:	1f 93       	push	r17
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
 9b6:	8c 01       	movw	r16, r24
 9b8:	c0 e0       	ldi	r28, 0x00	; 0
 9ba:	d0 e0       	ldi	r29, 0x00	; 0
 9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <ms_delay+0x1a>
 9be:	88 ee       	ldi	r24, 0xE8	; 232
 9c0:	93 e0       	ldi	r25, 0x03	; 3
 9c2:	0e 94 c8 04 	call	0x990	; 0x990 <us_delay>
 9c6:	21 96       	adiw	r28, 0x01	; 1
 9c8:	c0 17       	cp	r28, r16
 9ca:	d1 07       	cpc	r29, r17
 9cc:	c1 f7       	brne	.-16     	; 0x9be <ms_delay+0x10>
 9ce:	df 91       	pop	r29
 9d0:	cf 91       	pop	r28
 9d2:	1f 91       	pop	r17
 9d4:	0f 91       	pop	r16
 9d6:	08 95       	ret

000009d8 <main>:

int main(void)
{
 9d8:	cf 93       	push	r28
 9da:	df 93       	push	r29
 9dc:	cd b7       	in	r28, 0x3d	; 61
 9de:	de b7       	in	r29, 0x3e	; 62
 9e0:	60 97       	sbiw	r28, 0x10	; 16
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	f8 94       	cli
 9e6:	de bf       	out	0x3e, r29	; 62
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	cd bf       	out	0x3d, r28	; 61
   initPort();      // 입출력 포트 초기화
 9ec:	0e 94 d6 00 	call	0x1ac	; 0x1ac <initPort>
    LCD_init();     // LCD 초기화
 9f0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_init>
   can_init(b250k   );   // CAN 보레이트를 원하는 값으로 세팅한다.
 9f4:	83 e0       	ldi	r24, 0x03	; 3
 9f6:	0e 94 65 01 	call	0x2ca	; 0x2ca <can_init>
   initAdc();      // AD 변환 초기화
 9fa:	0e 94 6b 00 	call	0xd6	; 0xd6 <initAdc>
   sei();         // INT 인에이블 
 9fe:	78 94       	sei
   current_mode = 0;
 a00:	10 92 9b 01 	sts	0x019B, r1
 a04:	10 92 9a 01 	sts	0x019A, r1
   current_speed = 1;
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	90 93 a0 01 	sts	0x01A0, r25
 a10:	80 93 9f 01 	sts	0x019F, r24
	int change_y = 0;
	int change_x = 0;
	int twink = 0;
	unsigned int out=0;
	int t = 0;
	char num[8] = "00000000";
 a14:	de 01       	movw	r26, r28
 a16:	15 96       	adiw	r26, 0x05	; 5
 a18:	e7 e2       	ldi	r30, 0x27	; 39
 a1a:	f1 e0       	ldi	r31, 0x01	; 1
 a1c:	88 e0       	ldi	r24, 0x08	; 8
 a1e:	01 90       	ld	r0, Z+
 a20:	0d 92       	st	X+, r0
 a22:	81 50       	subi	r24, 0x01	; 1
 a24:	e1 f7       	brne	.-8      	; 0xa1e <main+0x46>
	int back_distance;
	char dist[4] = "0000";
 a26:	80 e3       	ldi	r24, 0x30	; 48
 a28:	90 e3       	ldi	r25, 0x30	; 48
 a2a:	dc 01       	movw	r26, r24
 a2c:	89 83       	std	Y+1, r24	; 0x01
 a2e:	9a 83       	std	Y+2, r25	; 0x02
 a30:	ab 83       	std	Y+3, r26	; 0x03
 a32:	bc 83       	std	Y+4, r27	; 0x04
    LCD_Write(0,0, "before");
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	60 e0       	ldi	r22, 0x00	; 0
 a38:	44 e1       	ldi	r20, 0x14	; 20
 a3a:	51 e0       	ldi	r21, 0x01	; 1
 a3c:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write>
	ms_delay(500);	
 a40:	84 ef       	ldi	r24, 0xF4	; 244
 a42:	91 e0       	ldi	r25, 0x01	; 1
 a44:	0e 94 d7 04 	call	0x9ae	; 0x9ae <ms_delay>
	can_rx_set( 1, 0x01, EXT, 8, 0x00, 0  ); 
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	41 e0       	ldi	r20, 0x01	; 1
 a4c:	50 e0       	ldi	r21, 0x00	; 0
 a4e:	60 e0       	ldi	r22, 0x00	; 0
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	21 e0       	ldi	r18, 0x01	; 1
 a54:	08 e0       	ldi	r16, 0x08	; 8
 a56:	cc 24       	eor	r12, r12
 a58:	dd 24       	eor	r13, r13
 a5a:	76 01       	movw	r14, r12
 a5c:	aa 24       	eor	r10, r10
 a5e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <can_rx_set>
   initAdc();      // AD 변환 초기화
   sei();         // INT 인에이블 
   current_mode = 0;
   current_speed = 1;
   int menu_flag = 0;
   	int speed_flag = 0;
 a62:	22 24       	eor	r2, r2
 a64:	33 24       	eor	r3, r3
   can_init(b250k   );   // CAN 보레이트를 원하는 값으로 세팅한다.
   initAdc();      // AD 변환 초기화
   sei();         // INT 인에이블 
   current_mode = 0;
   current_speed = 1;
   int menu_flag = 0;
 a66:	1e 86       	std	Y+14, r1	; 0x0e
 a68:	1d 86       	std	Y+13, r1	; 0x0d
	  /* x : voltage_x , y : voltage_y
	  /* current_mode : 0. parking 1. reverse 2. neutral 3. driving
	                default : 0. parking
	  /* 
      ********************************************/
      ADcLCD();
 a6a:	0e 94 90 00 	call	0x120	; 0x120 <ADcLCD>
	
	  change_y = 0;
	  change_x = 0;
		can_rx(1, &msg2);
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	63 e6       	ldi	r22, 0x63	; 99
 a72:	71 e0       	ldi	r23, 0x01	; 1
 a74:	0e 94 cc 02 	call	0x598	; 0x598 <can_rx>
      //Print Current Mode & Speed to LCD
	  if( (current_mode == 0 ) || (current_mode == 2) ){
 a78:	80 91 9a 01 	lds	r24, 0x019A
 a7c:	90 91 9b 01 	lds	r25, 0x019B
 a80:	ac 01       	movw	r20, r24
 a82:	e3 e0       	ldi	r30, 0x03	; 3
 a84:	44 0f       	add	r20, r20
 a86:	55 1f       	adc	r21, r21
 a88:	ea 95       	dec	r30
 a8a:	e1 f7       	brne	.-8      	; 0xa84 <main+0xac>
	    LCD_Write(0, 0, mode[current_mode] );
 a8c:	48 0f       	add	r20, r24
 a8e:	59 1f       	adc	r21, r25
 a90:	40 5d       	subi	r20, 0xD0	; 208
 a92:	5e 4f       	sbci	r21, 0xFE	; 254
	
	  change_y = 0;
	  change_x = 0;
		can_rx(1, &msg2);
      //Print Current Mode & Speed to LCD
	  if( (current_mode == 0 ) || (current_mode == 2) ){
 a94:	00 97       	sbiw	r24, 0x00	; 0
 a96:	19 f0       	breq	.+6      	; 0xa9e <main+0xc6>
 a98:	82 30       	cpi	r24, 0x02	; 2
 a9a:	91 05       	cpc	r25, r1
 a9c:	79 f4       	brne	.+30     	; 0xabc <main+0xe4>
	    LCD_Write(0, 0, mode[current_mode] );
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	60 e0       	ldi	r22, 0x00	; 0
 aa2:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write>
		LCD_Write(0, 1, "           ");	 
 aa6:	80 e0       	ldi	r24, 0x00	; 0
 aa8:	61 e0       	ldi	r22, 0x01	; 1
 aaa:	4b e1       	ldi	r20, 0x1B	; 27
 aac:	51 e0       	ldi	r21, 0x01	; 1
 aae:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write>
		current_speed = 0;
 ab2:	10 92 a0 01 	sts	0x01A0, r1
 ab6:	10 92 9f 01 	sts	0x019F, r1
 aba:	04 c0       	rjmp	.+8      	; 0xac4 <main+0xec>
	  }
	  else{
	  	LCD_Write(0, 0, mode[current_mode] );
 abc:	80 e0       	ldi	r24, 0x00	; 0
 abe:	60 e0       	ldi	r22, 0x00	; 0
 ac0:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write>
		
	  }

	  
	  if( voltage_y > 40 ) menu_flag = 1;
 ac4:	80 91 a3 01 	lds	r24, 0x01A3
 ac8:	90 91 a4 01 	lds	r25, 0x01A4
 acc:	89 32       	cpi	r24, 0x29	; 41
 ace:	91 05       	cpc	r25, r1
 ad0:	08 f0       	brcs	.+2      	; 0xad4 <main+0xfc>
 ad2:	42 c0       	rjmp	.+132    	; 0xb58 <main+0x180>
	  else {
		if(menu_flag == 1) {
 ad4:	2d 85       	ldd	r18, Y+13	; 0x0d
 ad6:	3e 85       	ldd	r19, Y+14	; 0x0e
 ad8:	21 30       	cpi	r18, 0x01	; 1
 ada:	31 05       	cpc	r19, r1
 adc:	a1 f4       	brne	.+40     	; 0xb06 <main+0x12e>
			change_y = 1;
			change_y = 1;
			menu_flag = 0;
			current_mode = current_mode + 1;
 ade:	20 91 9a 01 	lds	r18, 0x019A
 ae2:	30 91 9b 01 	lds	r19, 0x019B
 ae6:	2f 5f       	subi	r18, 0xFF	; 255
 ae8:	3f 4f       	sbci	r19, 0xFF	; 255
 aea:	30 93 9b 01 	sts	0x019B, r19
 aee:	20 93 9a 01 	sts	0x019A, r18
			if( current_mode >= 3) current_mode = 3;
 af2:	23 30       	cpi	r18, 0x03	; 3
 af4:	31 05       	cpc	r19, r1
 af6:	54 f0       	brlt	.+20     	; 0xb0c <main+0x134>
 af8:	23 e0       	ldi	r18, 0x03	; 3
 afa:	30 e0       	ldi	r19, 0x00	; 0
 afc:	30 93 9b 01 	sts	0x019B, r19
 b00:	20 93 9a 01 	sts	0x019A, r18
 b04:	03 c0       	rjmp	.+6      	; 0xb0c <main+0x134>
	                default : 0. parking
	  /* 
      ********************************************/
      ADcLCD();
	
	  change_y = 0;
 b06:	18 8a       	std	Y+16, r1	; 0x10
 b08:	1f 86       	std	Y+15, r1	; 0x0f
 b0a:	06 c0       	rjmp	.+12     	; 0xb18 <main+0x140>
	  
	  if( voltage_y > 40 ) menu_flag = 1;
	  else {
		if(menu_flag == 1) {
			change_y = 1;
			change_y = 1;
 b0c:	21 e0       	ldi	r18, 0x01	; 1
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	38 8b       	std	Y+16, r19	; 0x10
 b12:	2f 87       	std	Y+15, r18	; 0x0f
			menu_flag = 0;
 b14:	1e 86       	std	Y+14, r1	; 0x0e
 b16:	1d 86       	std	Y+13, r1	; 0x0d
			current_mode = current_mode + 1;
			if( current_mode >= 3) current_mode = 3;
		}
	  }
	
	  if ( voltage_y < 10 ) menu_flag = -1;
 b18:	8a 30       	cpi	r24, 0x0A	; 10
 b1a:	91 05       	cpc	r25, r1
 b1c:	20 f1       	brcs	.+72     	; 0xb66 <main+0x18e>
	  else {
		if(menu_flag == -1) {
 b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
 b20:	9e 85       	ldd	r25, Y+14	; 0x0e
 b22:	2f ef       	ldi	r18, 0xFF	; 255
 b24:	8f 3f       	cpi	r24, 0xFF	; 255
 b26:	92 07       	cpc	r25, r18
 b28:	49 f5       	brne	.+82     	; 0xb7c <main+0x1a4>
			change_y = 1;
			menu_flag = 0;
			current_mode = current_mode - 1;
 b2a:	80 91 9a 01 	lds	r24, 0x019A
 b2e:	90 91 9b 01 	lds	r25, 0x019B
 b32:	01 97       	sbiw	r24, 0x01	; 1
 b34:	90 93 9b 01 	sts	0x019B, r25
 b38:	80 93 9a 01 	sts	0x019A, r24
			if( current_mode <= 1) current_mode = 1;
 b3c:	82 30       	cpi	r24, 0x02	; 2
 b3e:	91 05       	cpc	r25, r1
 b40:	bc f4       	brge	.+46     	; 0xb70 <main+0x198>
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	90 93 9b 01 	sts	0x019B, r25
 b4a:	80 93 9a 01 	sts	0x019A, r24
	  }
	
	  if ( voltage_y < 10 ) menu_flag = -1;
	  else {
		if(menu_flag == -1) {
			change_y = 1;
 b4e:	21 e0       	ldi	r18, 0x01	; 1
 b50:	30 e0       	ldi	r19, 0x00	; 0
 b52:	38 8b       	std	Y+16, r19	; 0x10
 b54:	2f 87       	std	Y+15, r18	; 0x0f
 b56:	10 c0       	rjmp	.+32     	; 0xb78 <main+0x1a0>
	                default : 0. parking
	  /* 
      ********************************************/
      ADcLCD();
	
	  change_y = 0;
 b58:	18 8a       	std	Y+16, r1	; 0x10
 b5a:	1f 86       	std	Y+15, r1	; 0x0f
	  	LCD_Write(0, 0, mode[current_mode] );
		
	  }

	  
	  if( voltage_y > 40 ) menu_flag = 1;
 b5c:	81 e0       	ldi	r24, 0x01	; 1
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	9e 87       	std	Y+14, r25	; 0x0e
 b62:	8d 87       	std	Y+13, r24	; 0x0d
 b64:	0b c0       	rjmp	.+22     	; 0xb7c <main+0x1a4>
			current_mode = current_mode + 1;
			if( current_mode >= 3) current_mode = 3;
		}
	  }
	
	  if ( voltage_y < 10 ) menu_flag = -1;
 b66:	2f ef       	ldi	r18, 0xFF	; 255
 b68:	3f ef       	ldi	r19, 0xFF	; 255
 b6a:	3e 87       	std	Y+14, r19	; 0x0e
 b6c:	2d 87       	std	Y+13, r18	; 0x0d
 b6e:	06 c0       	rjmp	.+12     	; 0xb7c <main+0x1a4>
	  else {
		if(menu_flag == -1) {
			change_y = 1;
 b70:	81 e0       	ldi	r24, 0x01	; 1
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	98 8b       	std	Y+16, r25	; 0x10
 b76:	8f 87       	std	Y+15, r24	; 0x0f
			menu_flag = 0;
 b78:	1e 86       	std	Y+14, r1	; 0x0e
 b7a:	1d 86       	std	Y+13, r1	; 0x0d
		}

	  }

	  //when driving mode, speed control
	  if( (current_mode == 3) || (current_mode == 1) ){
 b7c:	80 91 9a 01 	lds	r24, 0x019A
 b80:	90 91 9b 01 	lds	r25, 0x019B
 b84:	83 30       	cpi	r24, 0x03	; 3
 b86:	91 05       	cpc	r25, r1
 b88:	21 f0       	breq	.+8      	; 0xb92 <main+0x1ba>
 b8a:	81 30       	cpi	r24, 0x01	; 1
 b8c:	91 05       	cpc	r25, r1
 b8e:	09 f0       	breq	.+2      	; 0xb92 <main+0x1ba>
 b90:	bd c0       	rjmp	.+378    	; 0xd0c <main+0x334>

		num[7] = '0' + current_speed%10;
 b92:	20 91 9f 01 	lds	r18, 0x019F
 b96:	30 91 a0 01 	lds	r19, 0x01A0
 b9a:	c9 01       	movw	r24, r18
 b9c:	6a e0       	ldi	r22, 0x0A	; 10
 b9e:	70 e0       	ldi	r23, 0x00	; 0
 ba0:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 ba4:	80 5d       	subi	r24, 0xD0	; 208
 ba6:	8c 87       	std	Y+12, r24	; 0x0c
		num[6] = '0' + current_speed%100/10;
 ba8:	c9 01       	movw	r24, r18
 baa:	64 e6       	ldi	r22, 0x64	; 100
 bac:	70 e0       	ldi	r23, 0x00	; 0
 bae:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 bb2:	6a e0       	ldi	r22, 0x0A	; 10
 bb4:	70 e0       	ldi	r23, 0x00	; 0
 bb6:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 bba:	60 5d       	subi	r22, 0xD0	; 208
 bbc:	6b 87       	std	Y+11, r22	; 0x0b
		num[5] = '0' + current_speed%1000/100;
 bbe:	c9 01       	movw	r24, r18
 bc0:	68 ee       	ldi	r22, 0xE8	; 232
 bc2:	73 e0       	ldi	r23, 0x03	; 3
 bc4:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 bc8:	64 e6       	ldi	r22, 0x64	; 100
 bca:	70 e0       	ldi	r23, 0x00	; 0
 bcc:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 bd0:	60 5d       	subi	r22, 0xD0	; 208
 bd2:	6a 87       	std	Y+10, r22	; 0x0a
		num[4] = '0' + current_speed%10000/1000;
 bd4:	c9 01       	movw	r24, r18
 bd6:	60 e1       	ldi	r22, 0x10	; 16
 bd8:	77 e2       	ldi	r23, 0x27	; 39
 bda:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 bde:	68 ee       	ldi	r22, 0xE8	; 232
 be0:	73 e0       	ldi	r23, 0x03	; 3
 be2:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 be6:	60 5d       	subi	r22, 0xD0	; 208
 be8:	69 87       	std	Y+9, r22	; 0x09
		num[3] = '0' + current_speed%100000/10000;
 bea:	69 01       	movw	r12, r18
 bec:	ee 24       	eor	r14, r14
 bee:	d7 fc       	sbrc	r13, 7
 bf0:	e0 94       	com	r14
 bf2:	fe 2c       	mov	r15, r14
 bf4:	c7 01       	movw	r24, r14
 bf6:	b6 01       	movw	r22, r12
 bf8:	20 ea       	ldi	r18, 0xA0	; 160
 bfa:	36 e8       	ldi	r19, 0x86	; 134
 bfc:	41 e0       	ldi	r20, 0x01	; 1
 bfe:	50 e0       	ldi	r21, 0x00	; 0
 c00:	0e 94 4b 07 	call	0xe96	; 0xe96 <__divmodsi4>
 c04:	20 e1       	ldi	r18, 0x10	; 16
 c06:	37 e2       	ldi	r19, 0x27	; 39
 c08:	40 e0       	ldi	r20, 0x00	; 0
 c0a:	50 e0       	ldi	r21, 0x00	; 0
 c0c:	0e 94 4b 07 	call	0xe96	; 0xe96 <__divmodsi4>
 c10:	20 5d       	subi	r18, 0xD0	; 208
 c12:	28 87       	std	Y+8, r18	; 0x08
		num[2] = '0' + current_speed%1000000/100000;
 c14:	50 e4       	ldi	r21, 0x40	; 64
 c16:	85 2e       	mov	r8, r21
 c18:	52 e4       	ldi	r21, 0x42	; 66
 c1a:	95 2e       	mov	r9, r21
 c1c:	5f e0       	ldi	r21, 0x0F	; 15
 c1e:	a5 2e       	mov	r10, r21
 c20:	b1 2c       	mov	r11, r1
 c22:	c7 01       	movw	r24, r14
 c24:	b6 01       	movw	r22, r12
 c26:	a5 01       	movw	r20, r10
 c28:	94 01       	movw	r18, r8
 c2a:	0e 94 4b 07 	call	0xe96	; 0xe96 <__divmodsi4>
 c2e:	20 ea       	ldi	r18, 0xA0	; 160
 c30:	36 e8       	ldi	r19, 0x86	; 134
 c32:	41 e0       	ldi	r20, 0x01	; 1
 c34:	50 e0       	ldi	r21, 0x00	; 0
 c36:	0e 94 4b 07 	call	0xe96	; 0xe96 <__divmodsi4>
 c3a:	20 5d       	subi	r18, 0xD0	; 208
 c3c:	2f 83       	std	Y+7, r18	; 0x07
		num[1] = '0' + current_speed%10000000/1000000;
 c3e:	60 e8       	ldi	r22, 0x80	; 128
 c40:	46 2e       	mov	r4, r22
 c42:	66 e9       	ldi	r22, 0x96	; 150
 c44:	56 2e       	mov	r5, r22
 c46:	68 e9       	ldi	r22, 0x98	; 152
 c48:	66 2e       	mov	r6, r22
 c4a:	71 2c       	mov	r7, r1
 c4c:	c7 01       	movw	r24, r14
 c4e:	b6 01       	movw	r22, r12
 c50:	a3 01       	movw	r20, r6
 c52:	92 01       	movw	r18, r4
 c54:	0e 94 4b 07 	call	0xe96	; 0xe96 <__divmodsi4>
 c58:	a5 01       	movw	r20, r10
 c5a:	94 01       	movw	r18, r8
 c5c:	0e 94 4b 07 	call	0xe96	; 0xe96 <__divmodsi4>
 c60:	20 5d       	subi	r18, 0xD0	; 208
 c62:	2e 83       	std	Y+6, r18	; 0x06
		num[0] = '0' + current_speed%100000000/10000000;
 c64:	c7 01       	movw	r24, r14
 c66:	b6 01       	movw	r22, r12
 c68:	20 e0       	ldi	r18, 0x00	; 0
 c6a:	31 ee       	ldi	r19, 0xE1	; 225
 c6c:	45 ef       	ldi	r20, 0xF5	; 245
 c6e:	55 e0       	ldi	r21, 0x05	; 5
 c70:	0e 94 4b 07 	call	0xe96	; 0xe96 <__divmodsi4>
 c74:	a3 01       	movw	r20, r6
 c76:	92 01       	movw	r18, r4
 c78:	0e 94 4b 07 	call	0xe96	; 0xe96 <__divmodsi4>
 c7c:	20 5d       	subi	r18, 0xD0	; 208
 c7e:	2d 83       	std	Y+5, r18	; 0x05
		LCD_Write(0, 1, num);
 c80:	80 e0       	ldi	r24, 0x00	; 0
 c82:	61 e0       	ldi	r22, 0x01	; 1
 c84:	ae 01       	movw	r20, r28
 c86:	4b 5f       	subi	r20, 0xFB	; 251
 c88:	5f 4f       	sbci	r21, 0xFF	; 255
 c8a:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write>

		if(voltage_x > 40) speed_flag = 1;
 c8e:	80 91 9d 01 	lds	r24, 0x019D
 c92:	90 91 9e 01 	lds	r25, 0x019E
 c96:	89 32       	cpi	r24, 0x29	; 41
 c98:	91 05       	cpc	r25, r1
 c9a:	d8 f5       	brcc	.+118    	; 0xd12 <main+0x33a>
		else {
			if(speed_flag == 1) {
 c9c:	21 e0       	ldi	r18, 0x01	; 1
 c9e:	22 16       	cp	r2, r18
 ca0:	31 04       	cpc	r3, r1
 ca2:	a1 f4       	brne	.+40     	; 0xccc <main+0x2f4>
				change_x = 1;
				speed_flag = 0;
				current_speed = current_speed + 1;
 ca4:	20 91 9f 01 	lds	r18, 0x019F
 ca8:	30 91 a0 01 	lds	r19, 0x01A0
 cac:	2f 5f       	subi	r18, 0xFF	; 255
 cae:	3f 4f       	sbci	r19, 0xFF	; 255
 cb0:	30 93 a0 01 	sts	0x01A0, r19
 cb4:	20 93 9f 01 	sts	0x019F, r18
				if ( current_speed >= 5) current_speed = 5;
 cb8:	25 30       	cpi	r18, 0x05	; 5
 cba:	31 05       	cpc	r19, r1
 cbc:	54 f0       	brlt	.+20     	; 0xcd2 <main+0x2fa>
 cbe:	25 e0       	ldi	r18, 0x05	; 5
 cc0:	30 e0       	ldi	r19, 0x00	; 0
 cc2:	30 93 a0 01 	sts	0x01A0, r19
 cc6:	20 93 9f 01 	sts	0x019F, r18
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <main+0x2fa>
	  /* 
      ********************************************/
      ADcLCD();
	
	  change_y = 0;
	  change_x = 0;
 ccc:	00 e0       	ldi	r16, 0x00	; 0
 cce:	10 e0       	ldi	r17, 0x00	; 0
 cd0:	04 c0       	rjmp	.+8      	; 0xcda <main+0x302>
		LCD_Write(0, 1, num);

		if(voltage_x > 40) speed_flag = 1;
		else {
			if(speed_flag == 1) {
				change_x = 1;
 cd2:	01 e0       	ldi	r16, 0x01	; 1
 cd4:	10 e0       	ldi	r17, 0x00	; 0
				speed_flag = 0;
 cd6:	22 24       	eor	r2, r2
 cd8:	33 24       	eor	r3, r3
				current_speed = current_speed + 1;
				if ( current_speed >= 5) current_speed = 5;
			}
		}

		if(voltage_x < 10) speed_flag = -1;
 cda:	8a 30       	cpi	r24, 0x0A	; 10
 cdc:	91 05       	cpc	r25, r1
 cde:	f8 f0       	brcs	.+62     	; 0xd1e <main+0x346>
		else {
			if(speed_flag == -1) {
 ce0:	3f ef       	ldi	r19, 0xFF	; 255
 ce2:	23 16       	cp	r2, r19
 ce4:	3f ef       	ldi	r19, 0xFF	; 255
 ce6:	33 06       	cpc	r3, r19
 ce8:	11 f5       	brne	.+68     	; 0xd2e <main+0x356>
				change_x = 1;
				speed_flag = 0;
				current_speed = current_speed - 1;
 cea:	80 91 9f 01 	lds	r24, 0x019F
 cee:	90 91 a0 01 	lds	r25, 0x01A0
 cf2:	01 97       	sbiw	r24, 0x01	; 1
 cf4:	90 93 a0 01 	sts	0x01A0, r25
 cf8:	80 93 9f 01 	sts	0x019F, r24
				if ( current_speed <= 0) current_speed = 0;
 cfc:	18 16       	cp	r1, r24
 cfe:	19 06       	cpc	r1, r25
 d00:	94 f0       	brlt	.+36     	; 0xd26 <main+0x34e>
 d02:	10 92 a0 01 	sts	0x01A0, r1
 d06:	10 92 9f 01 	sts	0x019F, r1
 d0a:	0d c0       	rjmp	.+26     	; 0xd26 <main+0x34e>
	  /* 
      ********************************************/
      ADcLCD();
	
	  change_y = 0;
	  change_x = 0;
 d0c:	00 e0       	ldi	r16, 0x00	; 0
 d0e:	10 e0       	ldi	r17, 0x00	; 0
 d10:	0e c0       	rjmp	.+28     	; 0xd2e <main+0x356>
 d12:	00 e0       	ldi	r16, 0x00	; 0
 d14:	10 e0       	ldi	r17, 0x00	; 0
		num[2] = '0' + current_speed%1000000/100000;
		num[1] = '0' + current_speed%10000000/1000000;
		num[0] = '0' + current_speed%100000000/10000000;
		LCD_Write(0, 1, num);

		if(voltage_x > 40) speed_flag = 1;
 d16:	41 e0       	ldi	r20, 0x01	; 1
 d18:	24 2e       	mov	r2, r20
 d1a:	31 2c       	mov	r3, r1
 d1c:	08 c0       	rjmp	.+16     	; 0xd2e <main+0x356>
				current_speed = current_speed + 1;
				if ( current_speed >= 5) current_speed = 5;
			}
		}

		if(voltage_x < 10) speed_flag = -1;
 d1e:	22 24       	eor	r2, r2
 d20:	2a 94       	dec	r2
 d22:	32 2c       	mov	r3, r2
 d24:	04 c0       	rjmp	.+8      	; 0xd2e <main+0x356>
		else {
			if(speed_flag == -1) {
				change_x = 1;
 d26:	01 e0       	ldi	r16, 0x01	; 1
 d28:	10 e0       	ldi	r17, 0x00	; 0
				speed_flag = 0;
 d2a:	22 24       	eor	r2, r2
 d2c:	33 24       	eor	r3, r3
				if ( current_speed <= 0) current_speed = 0;
			}
		}
	  }

	  out = ButtonInput();
 d2e:	0e 94 de 00 	call	0x1bc	; 0x1bc <ButtonInput>
		if (out == "LEFT") {
 d32:	21 e0       	ldi	r18, 0x01	; 1
 d34:	80 30       	cpi	r24, 0x00	; 0
 d36:	92 07       	cpc	r25, r18
 d38:	61 f0       	breq	.+24     	; 0xd52 <main+0x37a>
			twink = 1;	
			t = 1;
		}
		else if(out == "RIGHT") {
 d3a:	31 e0       	ldi	r19, 0x01	; 1
 d3c:	85 30       	cpi	r24, 0x05	; 5
 d3e:	93 07       	cpc	r25, r19
 d40:	61 f0       	breq	.+24     	; 0xd5a <main+0x382>
			twink = 1;
			t = 2;
		}
		else if(out == "BOTH") {
 d42:	21 e0       	ldi	r18, 0x01	; 1
 d44:	8b 30       	cpi	r24, 0x0B	; 11
 d46:	92 07       	cpc	r25, r18
 d48:	79 f4       	brne	.+30     	; 0xd68 <main+0x390>
			twink = 1;
			t = 3;
 d4a:	33 e0       	ldi	r19, 0x03	; 3
 d4c:	c3 2e       	mov	r12, r19
 d4e:	d1 2c       	mov	r13, r1
 d50:	07 c0       	rjmp	.+14     	; 0xd60 <main+0x388>
	  }

	  out = ButtonInput();
		if (out == "LEFT") {
			twink = 1;	
			t = 1;
 d52:	21 e0       	ldi	r18, 0x01	; 1
 d54:	c2 2e       	mov	r12, r18
 d56:	d1 2c       	mov	r13, r1
 d58:	03 c0       	rjmp	.+6      	; 0xd60 <main+0x388>
		}
		else if(out == "RIGHT") {
			twink = 1;
			t = 2;
 d5a:	92 e0       	ldi	r25, 0x02	; 2
 d5c:	c9 2e       	mov	r12, r25
 d5e:	d1 2c       	mov	r13, r1
		if (out == "LEFT") {
			twink = 1;	
			t = 1;
		}
		else if(out == "RIGHT") {
			twink = 1;
 d60:	81 e0       	ldi	r24, 0x01	; 1
 d62:	88 2e       	mov	r8, r24
 d64:	91 2c       	mov	r9, r1
 d66:	04 c0       	rjmp	.+8      	; 0xd70 <main+0x398>
			twink = 1;
			t = 3;
		}
		else {
			twink = 0;
			t = 0;
 d68:	cc 24       	eor	r12, r12
 d6a:	dd 24       	eor	r13, r13
		else if(out == "BOTH") {
			twink = 1;
			t = 3;
		}
		else {
			twink = 0;
 d6c:	88 24       	eor	r8, r8
 d6e:	99 24       	eor	r9, r9
			t = 0;
		}
		///added
		if(current_mode == 1) {
 d70:	80 91 9a 01 	lds	r24, 0x019A
 d74:	90 91 9b 01 	lds	r25, 0x019B
 d78:	81 30       	cpi	r24, 0x01	; 1
 d7a:	91 05       	cpc	r25, r1
 d7c:	91 f5       	brne	.+100    	; 0xde2 <main+0x40a>
			
			back_distance = msg2.data[0];
 d7e:	20 91 6a 01 	lds	r18, 0x016A
 d82:	30 e0       	ldi	r19, 0x00	; 0
			//if(back_distance <= 30) {
			//	current_speed = 1;
			//}
			dist[3] = back_distance%10 + '0';
 d84:	c9 01       	movw	r24, r18
 d86:	6a e0       	ldi	r22, 0x0A	; 10
 d88:	70 e0       	ldi	r23, 0x00	; 0
 d8a:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 d8e:	80 5d       	subi	r24, 0xD0	; 208
 d90:	8c 83       	std	Y+4, r24	; 0x04
			dist[2] = '0' + back_distance%100/10;
 d92:	c9 01       	movw	r24, r18
 d94:	64 e6       	ldi	r22, 0x64	; 100
 d96:	70 e0       	ldi	r23, 0x00	; 0
 d98:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 d9c:	6a e0       	ldi	r22, 0x0A	; 10
 d9e:	70 e0       	ldi	r23, 0x00	; 0
 da0:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 da4:	60 5d       	subi	r22, 0xD0	; 208
 da6:	6b 83       	std	Y+3, r22	; 0x03
			dist[1] = '0' + back_distance%1000/100;
 da8:	c9 01       	movw	r24, r18
 daa:	68 ee       	ldi	r22, 0xE8	; 232
 dac:	73 e0       	ldi	r23, 0x03	; 3
 dae:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 db2:	64 e6       	ldi	r22, 0x64	; 100
 db4:	70 e0       	ldi	r23, 0x00	; 0
 db6:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 dba:	60 5d       	subi	r22, 0xD0	; 208
 dbc:	6a 83       	std	Y+2, r22	; 0x02
			dist[0] = '0' + back_distance%10000/1000;
 dbe:	c9 01       	movw	r24, r18
 dc0:	60 e1       	ldi	r22, 0x10	; 16
 dc2:	77 e2       	ldi	r23, 0x27	; 39
 dc4:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 dc8:	68 ee       	ldi	r22, 0xE8	; 232
 dca:	73 e0       	ldi	r23, 0x03	; 3
 dcc:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 dd0:	60 5d       	subi	r22, 0xD0	; 208
 dd2:	69 83       	std	Y+1, r22	; 0x01
			LCD_Write(8, 1, dist);
 dd4:	88 e0       	ldi	r24, 0x08	; 8
 dd6:	61 e0       	ldi	r22, 0x01	; 1
 dd8:	ae 01       	movw	r20, r28
 dda:	4f 5f       	subi	r20, 0xFF	; 255
 ddc:	5f 4f       	sbci	r21, 0xFF	; 255
 dde:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write>
		}			
	  
	  msg1.data[0] = current_mode;
 de2:	80 91 9a 01 	lds	r24, 0x019A
 de6:	90 91 9b 01 	lds	r25, 0x019B
 dea:	80 93 79 01 	sts	0x0179, r24
      msg1.data[1] = '\0'; 
 dee:	10 92 7a 01 	sts	0x017A, r1
	  msg1.data[2] = current_speed; 
 df2:	20 91 9f 01 	lds	r18, 0x019F
 df6:	20 93 7b 01 	sts	0x017B, r18
	  msg1.data[3] = '\0'; 
 dfa:	10 92 7c 01 	sts	0x017C, r1
	  msg1.data[4] = current_mode%10 + '0'; 
 dfe:	6a e0       	ldi	r22, 0x0A	; 10
 e00:	70 e0       	ldi	r23, 0x00	; 0
 e02:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 e06:	80 5d       	subi	r24, 0xD0	; 208
 e08:	80 93 7d 01 	sts	0x017D, r24
	  msg1.data[5] = '\0'; 
 e0c:	10 92 7e 01 	sts	0x017E, r1
	  msg1.data[6] = t%10 + '0';
 e10:	c6 01       	movw	r24, r12
 e12:	6a e0       	ldi	r22, 0x0A	; 10
 e14:	70 e0       	ldi	r23, 0x00	; 0
 e16:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodhi4>
 e1a:	80 5d       	subi	r24, 0xD0	; 208
 e1c:	80 93 7f 01 	sts	0x017F, r24
	  //added
	  msg1.data[7] = '\0'; 
 e20:	10 92 80 01 	sts	0x0180, r1

	  //msg2.data[6] = t%10 + '0';	

	  if(change_y || change_x || twink) {
 e24:	8f 85       	ldd	r24, Y+15	; 0x0f
 e26:	98 89       	ldd	r25, Y+16	; 0x10
 e28:	00 97       	sbiw	r24, 0x00	; 0
 e2a:	39 f4       	brne	.+14     	; 0xe3a <main+0x462>
 e2c:	01 15       	cp	r16, r1
 e2e:	11 05       	cpc	r17, r1
 e30:	21 f4       	brne	.+8      	; 0xe3a <main+0x462>
 e32:	81 14       	cp	r8, r1
 e34:	91 04       	cpc	r9, r1
 e36:	09 f4       	brne	.+2      	; 0xe3a <main+0x462>
 e38:	18 ce       	rjmp	.-976    	; 0xa6a <main+0x92>
      	can_tx(0, &msg1, 0);
 e3a:	80 e0       	ldi	r24, 0x00	; 0
 e3c:	62 e7       	ldi	r22, 0x72	; 114
 e3e:	71 e0       	ldi	r23, 0x01	; 1
 e40:	40 e0       	ldi	r20, 0x00	; 0
 e42:	0e 94 45 02 	call	0x48a	; 0x48a <can_tx>
 e46:	11 ce       	rjmp	.-990    	; 0xa6a <main+0x92>

00000e48 <__udivmodhi4>:
 e48:	aa 1b       	sub	r26, r26
 e4a:	bb 1b       	sub	r27, r27
 e4c:	51 e1       	ldi	r21, 0x11	; 17
 e4e:	07 c0       	rjmp	.+14     	; 0xe5e <__udivmodhi4_ep>

00000e50 <__udivmodhi4_loop>:
 e50:	aa 1f       	adc	r26, r26
 e52:	bb 1f       	adc	r27, r27
 e54:	a6 17       	cp	r26, r22
 e56:	b7 07       	cpc	r27, r23
 e58:	10 f0       	brcs	.+4      	; 0xe5e <__udivmodhi4_ep>
 e5a:	a6 1b       	sub	r26, r22
 e5c:	b7 0b       	sbc	r27, r23

00000e5e <__udivmodhi4_ep>:
 e5e:	88 1f       	adc	r24, r24
 e60:	99 1f       	adc	r25, r25
 e62:	5a 95       	dec	r21
 e64:	a9 f7       	brne	.-22     	; 0xe50 <__udivmodhi4_loop>
 e66:	80 95       	com	r24
 e68:	90 95       	com	r25
 e6a:	bc 01       	movw	r22, r24
 e6c:	cd 01       	movw	r24, r26
 e6e:	08 95       	ret

00000e70 <__divmodhi4>:
 e70:	97 fb       	bst	r25, 7
 e72:	09 2e       	mov	r0, r25
 e74:	07 26       	eor	r0, r23
 e76:	0a d0       	rcall	.+20     	; 0xe8c <__divmodhi4_neg1>
 e78:	77 fd       	sbrc	r23, 7
 e7a:	04 d0       	rcall	.+8      	; 0xe84 <__divmodhi4_neg2>
 e7c:	e5 df       	rcall	.-54     	; 0xe48 <__udivmodhi4>
 e7e:	06 d0       	rcall	.+12     	; 0xe8c <__divmodhi4_neg1>
 e80:	00 20       	and	r0, r0
 e82:	1a f4       	brpl	.+6      	; 0xe8a <__divmodhi4_exit>

00000e84 <__divmodhi4_neg2>:
 e84:	70 95       	com	r23
 e86:	61 95       	neg	r22
 e88:	7f 4f       	sbci	r23, 0xFF	; 255

00000e8a <__divmodhi4_exit>:
 e8a:	08 95       	ret

00000e8c <__divmodhi4_neg1>:
 e8c:	f6 f7       	brtc	.-4      	; 0xe8a <__divmodhi4_exit>
 e8e:	90 95       	com	r25
 e90:	81 95       	neg	r24
 e92:	9f 4f       	sbci	r25, 0xFF	; 255
 e94:	08 95       	ret

00000e96 <__divmodsi4>:
 e96:	97 fb       	bst	r25, 7
 e98:	09 2e       	mov	r0, r25
 e9a:	05 26       	eor	r0, r21
 e9c:	0e d0       	rcall	.+28     	; 0xeba <__divmodsi4_neg1>
 e9e:	57 fd       	sbrc	r21, 7
 ea0:	04 d0       	rcall	.+8      	; 0xeaa <__divmodsi4_neg2>
 ea2:	14 d0       	rcall	.+40     	; 0xecc <__udivmodsi4>
 ea4:	0a d0       	rcall	.+20     	; 0xeba <__divmodsi4_neg1>
 ea6:	00 1c       	adc	r0, r0
 ea8:	38 f4       	brcc	.+14     	; 0xeb8 <__divmodsi4_exit>

00000eaa <__divmodsi4_neg2>:
 eaa:	50 95       	com	r21
 eac:	40 95       	com	r20
 eae:	30 95       	com	r19
 eb0:	21 95       	neg	r18
 eb2:	3f 4f       	sbci	r19, 0xFF	; 255
 eb4:	4f 4f       	sbci	r20, 0xFF	; 255
 eb6:	5f 4f       	sbci	r21, 0xFF	; 255

00000eb8 <__divmodsi4_exit>:
 eb8:	08 95       	ret

00000eba <__divmodsi4_neg1>:
 eba:	f6 f7       	brtc	.-4      	; 0xeb8 <__divmodsi4_exit>
 ebc:	90 95       	com	r25
 ebe:	80 95       	com	r24
 ec0:	70 95       	com	r23
 ec2:	61 95       	neg	r22
 ec4:	7f 4f       	sbci	r23, 0xFF	; 255
 ec6:	8f 4f       	sbci	r24, 0xFF	; 255
 ec8:	9f 4f       	sbci	r25, 0xFF	; 255
 eca:	08 95       	ret

00000ecc <__udivmodsi4>:
 ecc:	a1 e2       	ldi	r26, 0x21	; 33
 ece:	1a 2e       	mov	r1, r26
 ed0:	aa 1b       	sub	r26, r26
 ed2:	bb 1b       	sub	r27, r27
 ed4:	fd 01       	movw	r30, r26
 ed6:	0d c0       	rjmp	.+26     	; 0xef2 <__udivmodsi4_ep>

00000ed8 <__udivmodsi4_loop>:
 ed8:	aa 1f       	adc	r26, r26
 eda:	bb 1f       	adc	r27, r27
 edc:	ee 1f       	adc	r30, r30
 ede:	ff 1f       	adc	r31, r31
 ee0:	a2 17       	cp	r26, r18
 ee2:	b3 07       	cpc	r27, r19
 ee4:	e4 07       	cpc	r30, r20
 ee6:	f5 07       	cpc	r31, r21
 ee8:	20 f0       	brcs	.+8      	; 0xef2 <__udivmodsi4_ep>
 eea:	a2 1b       	sub	r26, r18
 eec:	b3 0b       	sbc	r27, r19
 eee:	e4 0b       	sbc	r30, r20
 ef0:	f5 0b       	sbc	r31, r21

00000ef2 <__udivmodsi4_ep>:
 ef2:	66 1f       	adc	r22, r22
 ef4:	77 1f       	adc	r23, r23
 ef6:	88 1f       	adc	r24, r24
 ef8:	99 1f       	adc	r25, r25
 efa:	1a 94       	dec	r1
 efc:	69 f7       	brne	.-38     	; 0xed8 <__udivmodsi4_loop>
 efe:	60 95       	com	r22
 f00:	70 95       	com	r23
 f02:	80 95       	com	r24
 f04:	90 95       	com	r25
 f06:	9b 01       	movw	r18, r22
 f08:	ac 01       	movw	r20, r24
 f0a:	bd 01       	movw	r22, r26
 f0c:	cf 01       	movw	r24, r30
 f0e:	08 95       	ret

00000f10 <_exit>:
 f10:	f8 94       	cli

00000f12 <__stop_program>:
 f12:	ff cf       	rjmp	.-2      	; 0xf12 <__stop_program>
