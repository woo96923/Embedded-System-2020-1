
CAN_NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00001802  00001896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001802  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080021e  0080021e  000019b4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a8  00000000  00000000  00002108  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029ef  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001139  00000000  00000000  00004d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011ce  00000000  00000000  00005ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004cc  00000000  00000000  000070a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052a  00000000  00000000  00007574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001727  00000000  00000000  00007a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000091c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	12 e0       	ldi	r17, 0x02	; 2
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e2 e0       	ldi	r30, 0x02	; 2
      a8:	f8 e1       	ldi	r31, 0x18	; 24
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 31       	cpi	r26, 0x1E	; 30
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	ae e1       	ldi	r26, 0x1E	; 30
      be:	b2 e0       	ldi	r27, 0x02	; 2
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a6 34       	cpi	r26, 0x46	; 70
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <main>
      ce:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <can_init>:
//***************************************************************
void can_init (char baudRate)	// CAN초기화 
{
	unsigned char i, j;
	
	CANGCON |= (1<<SWRES);	// CAN 제어기 리셋
      d6:	90 91 d8 00 	lds	r25, 0x00D8
      da:	91 60       	ori	r25, 0x01	; 1
      dc:	90 93 d8 00 	sts	0x00D8, r25
							// CAN General Control Register
  							
	//보레이트 설정 ==============================================
	switch(baudRate){
      e0:	83 30       	cpi	r24, 0x03	; 3
      e2:	89 f0       	breq	.+34     	; 0x106 <can_init+0x30>
      e4:	84 30       	cpi	r24, 0x04	; 4
      e6:	28 f4       	brcc	.+10     	; 0xf2 <can_init+0x1c>
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	51 f0       	breq	.+20     	; 0x100 <can_init+0x2a>
      ec:	82 30       	cpi	r24, 0x02	; 2
      ee:	d1 f4       	brne	.+52     	; 0x124 <can_init+0x4e>
      f0:	11 c0       	rjmp	.+34     	; 0x114 <can_init+0x3e>
      f2:	85 30       	cpi	r24, 0x05	; 5
      f4:	61 f0       	breq	.+24     	; 0x10e <can_init+0x38>
      f6:	85 30       	cpi	r24, 0x05	; 5
      f8:	40 f0       	brcs	.+16     	; 0x10a <can_init+0x34>
      fa:	86 30       	cpi	r24, 0x06	; 6
      fc:	99 f4       	brne	.+38     	; 0x124 <can_init+0x4e>
      fe:	09 c0       	rjmp	.+18     	; 0x112 <can_init+0x3c>
		case b1M:
			CANBT1= 0x00;
     100:	10 92 e2 00 	sts	0x00E2, r1
     104:	09 c0       	rjmp	.+18     	; 0x118 <can_init+0x42>
			CANBT1= 0x02;
			CANBT2= 0x0c;
			CANBT3= 0x37;			
			break;
		case b250k:
			CANBT1= 0x06;	// CAN보레이트 설정 
     106:	86 e0       	ldi	r24, 0x06	; 6
     108:	05 c0       	rjmp	.+10     	; 0x114 <can_init+0x3e>
			CANBT2= 0x0c;	// bit timing: datasheet 264 (check table)
			CANBT3= 0x37;	// 250kbps, 16 MHz CPU Clock(0.250usec)
			break;
		case b200k:
			CANBT1= 0x08;
     10a:	88 e0       	ldi	r24, 0x08	; 8
     10c:	03 c0       	rjmp	.+6      	; 0x114 <can_init+0x3e>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;
		case b125k:
			CANBT1= 0x0E;
     10e:	8e e0       	ldi	r24, 0x0E	; 14
     110:	01 c0       	rjmp	.+2      	; 0x114 <can_init+0x3e>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;

		case b100k:
			CANBT1= 0x12;
     112:	82 e1       	ldi	r24, 0x12	; 18
     114:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0c;
     118:	8c e0       	ldi	r24, 0x0C	; 12
     11a:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x37;													
     11e:	87 e3       	ldi	r24, 0x37	; 55
     120:	80 93 e4 00 	sts	0x00E4, r24
// 6. CAN MOb 인터럽트 클리어(CAN MOb 인터럽트 사용하지 않음)
// 7. CAN 제어기 인에이블 모드 설정 
// 8. CAN 제어기 동작 확인 후 초기화 완료  									
//***************************************************************
void can_init (char baudRate)	// CAN초기화 
{
     124:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
	{
		CANPAGE = (i<<4);	// MOBNB3~0
     126:	98 2f       	mov	r25, r24
     128:	92 95       	swap	r25
     12a:	90 7f       	andi	r25, 0xF0	; 240
     12c:	90 93 ed 00 	sts	0x00ED, r25
							// MOb Number Select(0~14)
		CANCDMOB = 0;		// ALL Disable MOb
     130:	10 92 ef 00 	sts	0x00EF, r1
		CANSTMOB = 0;		// Clear status
     134:	10 92 ee 00 	sts	0x00EE, r1
		CANIDT1 = 0;		// Clear ID
     138:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;		// Clear ID
     13c:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;		// Clear ID
     140:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;		// Clear ID
     144:	10 92 f0 00 	sts	0x00F0, r1
		CANIDM1 = 0;		// Clear mask
     148:	10 92 f7 00 	sts	0x00F7, r1
		CANIDM2 = 0;		// Clear mask
     14c:	10 92 f6 00 	sts	0x00F6, r1
		CANIDM3 = 0;		// Clear mask
     150:	10 92 f5 00 	sts	0x00F5, r1
		CANIDM4 = 0;		// Clear mask
     154:	10 92 f4 00 	sts	0x00F4, r1

		for(j=0; j<8; j++)
			CANMSG = 0;		// CAN Data Message Register
     158:	10 92 fa 00 	sts	0x00FA, r1
     15c:	10 92 fa 00 	sts	0x00FA, r1
     160:	10 92 fa 00 	sts	0x00FA, r1
     164:	10 92 fa 00 	sts	0x00FA, r1
     168:	10 92 fa 00 	sts	0x00FA, r1
     16c:	10 92 fa 00 	sts	0x00FA, r1
     170:	10 92 fa 00 	sts	0x00FA, r1
     174:	10 92 fa 00 	sts	0x00FA, r1
			CANBT2= 0x0c;
			CANBT3= 0x37;													
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
     178:	8f 5f       	subi	r24, 0xFF	; 255
     17a:	8f 30       	cpi	r24, 0x0F	; 15
     17c:	a1 f6       	brne	.-88     	; 0x126 <can_init+0x50>
			CANMSG = 0;		// CAN Data Message Register
							// Clear data
	}
							
							// Clear CAN interrupt registers
	CANGIE = 0;				// CAN General Interrupt Enable Register 
     17e:	10 92 db 00 	sts	0x00DB, r1
							// None Interrupts
	CANIE1 = 0;				// CAN Enable INT MOb Registers 1
     182:	10 92 df 00 	sts	0x00DF, r1
							// None Interrupts on MObs
	CANIE2 = 0;				// CAN Enable INT MOb Registers 2
     186:	10 92 de 00 	sts	0x00DE, r1
							// None Interrupts on MObs
	CANSIT1 = 0;			// CAN Status INT MOb Registers 1
     18a:	10 92 e1 00 	sts	0x00E1, r1
							// None Interrupts on MObs
	CANSIT2 = 0;			// CAN Status INT MOb Registers 2
     18e:	10 92 e0 00 	sts	0x00E0, r1
							// None Interrupts on MObs

	//CANGCON = (1<<TTC );	// TTC mode *******************************************
	
	CANGCON |= (1<<ENASTB);	// CAN General Control Register 
     192:	80 91 d8 00 	lds	r24, 0x00D8
     196:	82 60       	ori	r24, 0x02	; 2
     198:	80 93 d8 00 	sts	0x00D8, r24
							// Enable Mode (11 Recessive Bits has Been read)
							// Start CAN interface

	while (!(CANGSTA & (1<<ENFG))); // CAN General Status Register (Enable Flag)
     19c:	80 91 d9 00 	lds	r24, 0x00D9
     1a0:	82 ff       	sbrs	r24, 2
     1a2:	fc cf       	rjmp	.-8      	; 0x19c <can_init+0xc6>
									// Wait until module ready
}
     1a4:	08 95       	ret

000001a6 <can_init_8Mhz>:
//***************************************************************
void can_init_8Mhz(char baudRate)	// CAN초기화 
{
	unsigned char i, j;
	
	CANGCON |= (1<<SWRES);	// CAN 제어기 리셋
     1a6:	90 91 d8 00 	lds	r25, 0x00D8
     1aa:	91 60       	ori	r25, 0x01	; 1
     1ac:	90 93 d8 00 	sts	0x00D8, r25
							// CAN General Control Register
  							
	//보레이트 설정 ==============================================
	switch(baudRate){
     1b0:	83 30       	cpi	r24, 0x03	; 3
     1b2:	c1 f0       	breq	.+48     	; 0x1e4 <can_init_8Mhz+0x3e>
     1b4:	84 30       	cpi	r24, 0x04	; 4
     1b6:	28 f4       	brcc	.+10     	; 0x1c2 <can_init_8Mhz+0x1c>
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	51 f0       	breq	.+20     	; 0x1d0 <can_init_8Mhz+0x2a>
     1bc:	82 30       	cpi	r24, 0x02	; 2
     1be:	39 f5       	brne	.+78     	; 0x20e <can_init_8Mhz+0x68>
     1c0:	0e c0       	rjmp	.+28     	; 0x1de <can_init_8Mhz+0x38>
     1c2:	85 30       	cpi	r24, 0x05	; 5
     1c4:	c9 f0       	breq	.+50     	; 0x1f8 <can_init_8Mhz+0x52>
     1c6:	85 30       	cpi	r24, 0x05	; 5
     1c8:	78 f0       	brcs	.+30     	; 0x1e8 <can_init_8Mhz+0x42>
     1ca:	86 30       	cpi	r24, 0x06	; 6
     1cc:	01 f5       	brne	.+64     	; 0x20e <can_init_8Mhz+0x68>
     1ce:	16 c0       	rjmp	.+44     	; 0x1fc <can_init_8Mhz+0x56>
		case b1M:
			CANBT1= 0x00;
     1d0:	10 92 e2 00 	sts	0x00E2, r1
			CANBT2= 0x04;
     1d4:	84 e0       	ldi	r24, 0x04	; 4
     1d6:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x13;
     1da:	83 e1       	ldi	r24, 0x13	; 19
     1dc:	16 c0       	rjmp	.+44     	; 0x20a <can_init_8Mhz+0x64>
			break;
		case b500k:
			CANBT1= 0x00;
     1de:	10 92 e2 00 	sts	0x00E2, r1
     1e2:	0f c0       	rjmp	.+30     	; 0x202 <can_init_8Mhz+0x5c>
			CANBT2= 0x0c;
			CANBT3= 0x37;			
			break;
		case b250k:
			CANBT1= 0x02;	// CAN baud rate set
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	0b c0       	rjmp	.+22     	; 0x1fe <can_init_8Mhz+0x58>
			CANBT2= 0x0c;	// bit timing: datasheet 264 (check table)
			CANBT3= 0x37;	// 250kbps 8 MHz CPU Clock(0.250usec)
			break;
		case b200k:
			CANBT1= 0x02;
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0e;
     1ee:	8e e0       	ldi	r24, 0x0E	; 14
     1f0:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x4b;
     1f4:	8b e4       	ldi	r24, 0x4B	; 75
     1f6:	09 c0       	rjmp	.+18     	; 0x20a <can_init_8Mhz+0x64>
			break;
		case b125k:
			CANBT1= 0x06;
     1f8:	86 e0       	ldi	r24, 0x06	; 6
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <can_init_8Mhz+0x58>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;
		case b100k:
			CANBT1= 0x08;
     1fc:	88 e0       	ldi	r24, 0x08	; 8
     1fe:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0c;
     202:	8c e0       	ldi	r24, 0x0C	; 12
     204:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x37;													
     208:	87 e3       	ldi	r24, 0x37	; 55
     20a:	80 93 e4 00 	sts	0x00E4, r24
// 6. CAN MOb 인터럽트 클리어(CAN MOb 인터럽트 사용하지 않음)
// 7. CAN 제어기 인에이블 모드 설정 
// 8. CAN 제어기 동작 확인 후 초기화 완료  									
//***************************************************************
void can_init_8Mhz(char baudRate)	// CAN초기화 
{
     20e:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
	{
		CANPAGE = (i<<4);	// MOBNB3~0
     210:	98 2f       	mov	r25, r24
     212:	92 95       	swap	r25
     214:	90 7f       	andi	r25, 0xF0	; 240
     216:	90 93 ed 00 	sts	0x00ED, r25
							// MOb Number Select(0~14)
		CANCDMOB = 0;		// ALL Disable MOb
     21a:	10 92 ef 00 	sts	0x00EF, r1
		CANSTMOB = 0;		// Clear status
     21e:	10 92 ee 00 	sts	0x00EE, r1
		CANIDT1 = 0;		// Clear ID
     222:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;		// Clear ID
     226:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;		// Clear ID
     22a:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;		// Clear ID
     22e:	10 92 f0 00 	sts	0x00F0, r1
		CANIDM1 = 0;		// Clear mask
     232:	10 92 f7 00 	sts	0x00F7, r1
		CANIDM2 = 0;		// Clear mask
     236:	10 92 f6 00 	sts	0x00F6, r1
		CANIDM3 = 0;		// Clear mask
     23a:	10 92 f5 00 	sts	0x00F5, r1
		CANIDM4 = 0;		// Clear mask
     23e:	10 92 f4 00 	sts	0x00F4, r1

		for(j=0; j<8; j++)
			CANMSG = 0;		// CAN Data Message Register
     242:	10 92 fa 00 	sts	0x00FA, r1
     246:	10 92 fa 00 	sts	0x00FA, r1
     24a:	10 92 fa 00 	sts	0x00FA, r1
     24e:	10 92 fa 00 	sts	0x00FA, r1
     252:	10 92 fa 00 	sts	0x00FA, r1
     256:	10 92 fa 00 	sts	0x00FA, r1
     25a:	10 92 fa 00 	sts	0x00FA, r1
     25e:	10 92 fa 00 	sts	0x00FA, r1
			CANBT2= 0x0c;
			CANBT3= 0x37;													
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	8f 30       	cpi	r24, 0x0F	; 15
     266:	a1 f6       	brne	.-88     	; 0x210 <can_init_8Mhz+0x6a>
			CANMSG = 0;		// CAN Data Message Register
							// Clear data
	}
							
							// Clear CAN interrupt registers
	CANGIE = 0;				// CAN General Interrupt Enable Register 
     268:	10 92 db 00 	sts	0x00DB, r1
							// None Interrupts
	CANIE1 = 0;				// CAN Enable INT MOb Registers 1
     26c:	10 92 df 00 	sts	0x00DF, r1
							// None Interrupts on MObs
	CANIE2 = 0;				// CAN Enable INT MOb Registers 2
     270:	10 92 de 00 	sts	0x00DE, r1
							// None Interrupts on MObs
	CANSIT1 = 0;			// CAN Status INT MOb Registers 1
     274:	10 92 e1 00 	sts	0x00E1, r1
							// None Interrupts on MObs
	CANSIT2 = 0;			// CAN Status INT MOb Registers 2
     278:	10 92 e0 00 	sts	0x00E0, r1
							// None Interrupts on MObs

	CANGCON = (1<<TTC );	// TTC mode *******************************************
     27c:	80 e2       	ldi	r24, 0x20	; 32
     27e:	80 93 d8 00 	sts	0x00D8, r24
	
	CANGCON |= (1<<ENASTB);	// CAN General Control Register 
     282:	80 91 d8 00 	lds	r24, 0x00D8
     286:	82 60       	ori	r24, 0x02	; 2
     288:	80 93 d8 00 	sts	0x00D8, r24
							// Enable Mode (11 Recessive Bits has Been read)
							// Start CAN interface

	while (!(CANGSTA & (1<<ENFG))); // CAN General Status Register (Enable Flag)
     28c:	80 91 d9 00 	lds	r24, 0x00D9
     290:	82 ff       	sbrs	r24, 2
     292:	fc cf       	rjmp	.-8      	; 0x28c <can_init_8Mhz+0xe6>
									// Wait until module ready
}
     294:	08 95       	ret

00000296 <can_tx>:
//		obj; MOb 번호 
//		msg; 메시지 구조체 
//		rtr; RTR r결정(0; 데이터 프레임, 1; 리모트 프레임)	
//***************************************************************
char can_tx (unsigned char obj, struct MOb *msg, char rtr)	// CAN transmission
{
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	fb 01       	movw	r30, r22
	//usart1_transmit_string("\rCAn loop in\n");

	char send_result = _SEND_FAIL;
	unsigned char i;	
	unsigned long can_id= msg->id;
     29c:	00 81       	ld	r16, Z
     29e:	11 81       	ldd	r17, Z+1	; 0x01
     2a0:	22 81       	ldd	r18, Z+2	; 0x02
     2a2:	33 81       	ldd	r19, Z+3	; 0x03
	
								// Enable MOb1, auto increment index, start with index = 0
	CANPAGE = (obj<<4);			// CAN Page MOb Register
     2a4:	82 95       	swap	r24
     2a6:	80 7f       	andi	r24, 0xF0	; 240
     2a8:	80 93 ed 00 	sts	0x00ED, r24
								// MOb Number Select

	//usart1_transmit_string("\rPAGE Clear\n");

	CANSTMOB = 0x00;
     2ac:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;
     2b0:	10 92 ef 00 	sts	0x00EF, r1
	
	//usart1_transmit_string("\rMOb Clear\n");

	if(msg->ide== 0x00)	// standard
     2b4:	85 81       	ldd	r24, Z+5	; 0x05
     2b6:	88 23       	and	r24, r24
     2b8:	a1 f4       	brne	.+40     	; 0x2e2 <can_tx+0x4c>
	{
		CANIDT1= (unsigned char)(can_id>>3);
     2ba:	d9 01       	movw	r26, r18
     2bc:	c8 01       	movw	r24, r16
     2be:	53 e0       	ldi	r21, 0x03	; 3
     2c0:	b6 95       	lsr	r27
     2c2:	a7 95       	ror	r26
     2c4:	97 95       	ror	r25
     2c6:	87 95       	ror	r24
     2c8:	5a 95       	dec	r21
     2ca:	d1 f7       	brne	.-12     	; 0x2c0 <can_tx+0x2a>
     2cc:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(can_id<<5);
     2d0:	02 95       	swap	r16
     2d2:	00 0f       	add	r16, r16
     2d4:	00 7e       	andi	r16, 0xE0	; 224
     2d6:	00 93 f2 00 	sts	0x00F2, r16

		CANCDMOB &= ~0x10;		// Set IDE bit 2.0A 11bits
     2da:	80 91 ef 00 	lds	r24, 0x00EF
     2de:	8f 7e       	andi	r24, 0xEF	; 239
     2e0:	29 c0       	rjmp	.+82     	; 0x334 <can_tx+0x9e>
		//usart1_transmit_string("\rstandard\n");
	}
	else	// extended
	{
		CANIDT1= (unsigned char)(can_id>>21);
     2e2:	d9 01       	movw	r26, r18
     2e4:	c8 01       	movw	r24, r16
     2e6:	55 e1       	ldi	r21, 0x15	; 21
     2e8:	b6 95       	lsr	r27
     2ea:	a7 95       	ror	r26
     2ec:	97 95       	ror	r25
     2ee:	87 95       	ror	r24
     2f0:	5a 95       	dec	r21
     2f2:	d1 f7       	brne	.-12     	; 0x2e8 <can_tx+0x52>
     2f4:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(can_id>>13);
     2f8:	d9 01       	movw	r26, r18
     2fa:	c8 01       	movw	r24, r16
     2fc:	6d e0       	ldi	r22, 0x0D	; 13
     2fe:	b6 95       	lsr	r27
     300:	a7 95       	ror	r26
     302:	97 95       	ror	r25
     304:	87 95       	ror	r24
     306:	6a 95       	dec	r22
     308:	d1 f7       	brne	.-12     	; 0x2fe <can_tx+0x68>
     30a:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(can_id>>5);
     30e:	d9 01       	movw	r26, r18
     310:	c8 01       	movw	r24, r16
     312:	75 e0       	ldi	r23, 0x05	; 5
     314:	b6 95       	lsr	r27
     316:	a7 95       	ror	r26
     318:	97 95       	ror	r25
     31a:	87 95       	ror	r24
     31c:	7a 95       	dec	r23
     31e:	d1 f7       	brne	.-12     	; 0x314 <can_tx+0x7e>
     320:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(can_id<<3);
     324:	00 0f       	add	r16, r16
     326:	00 0f       	add	r16, r16
     328:	00 0f       	add	r16, r16
     32a:	00 93 f0 00 	sts	0x00F0, r16

		CANCDMOB |= 0x10;		// Set IDE bit 2.0B 29bits
     32e:	80 91 ef 00 	lds	r24, 0x00EF
     332:	80 61       	ori	r24, 0x10	; 16
     334:	80 93 ef 00 	sts	0x00EF, r24
	//	usart1_transmit_string("\rExtended\n");
	}

	CANCDMOB |= (msg->dlc<<DLC0);	// set data length
     338:	80 91 ef 00 	lds	r24, 0x00EF
     33c:	96 81       	ldd	r25, Z+6	; 0x06
     33e:	89 2b       	or	r24, r25
     340:	80 93 ef 00 	sts	0x00EF, r24

	//usart1_transmit_string("\rDLC Clear\n");	

	CANIDT4 |= (rtr & 0x04);     // RTRTAG 설정;
     344:	80 91 f0 00 	lds	r24, 0x00F0
     348:	44 70       	andi	r20, 0x04	; 4
     34a:	48 2b       	or	r20, r24
     34c:	40 93 f0 00 	sts	0x00F0, r20

	CANIDT4 &= ~0x02;		   // RB1TAG=0;
     350:	80 91 f0 00 	lds	r24, 0x00F0
     354:	8d 7f       	andi	r24, 0xFD	; 253
     356:	80 93 f0 00 	sts	0x00F0, r24
	CANIDT4 &= ~0x01;		   // RB0TAG=1;
     35a:	80 91 f0 00 	lds	r24, 0x00F0
     35e:	8e 7f       	andi	r24, 0xFE	; 254
     360:	80 93 f0 00 	sts	0x00F0, r24

	//usart1_transmit_string("\rRTR Clear\n");	

	//put data in mailbox
	for(i=0; i<msg->dlc; i++)
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	09 c0       	rjmp	.+18     	; 0x37a <can_tx+0xe4>
		CANMSG = msg->data[i];	// full message 
     368:	df 01       	movw	r26, r30
     36a:	a8 0f       	add	r26, r24
     36c:	b1 1d       	adc	r27, r1
     36e:	17 96       	adiw	r26, 0x07	; 7
     370:	9c 91       	ld	r25, X
     372:	17 97       	sbiw	r26, 0x07	; 7
     374:	90 93 fa 00 	sts	0x00FA, r25
	CANIDT4 &= ~0x01;		   // RB0TAG=1;

	//usart1_transmit_string("\rRTR Clear\n");	

	//put data in mailbox
	for(i=0; i<msg->dlc; i++)
     378:	8f 5f       	subi	r24, 0xFF	; 255
     37a:	96 81       	ldd	r25, Z+6	; 0x06
     37c:	89 17       	cp	r24, r25
     37e:	a0 f3       	brcs	.-24     	; 0x368 <can_tx+0xd2>
		CANMSG = msg->data[i];	// full message 

	//usart1_transmit_string("\rMSG Clear\n");	

	//enable transmission		
	CANCDMOB |= (1<<CONMOB0);
     380:	80 91 ef 00 	lds	r24, 0x00EF
     384:	80 64       	ori	r24, 0x40	; 64
     386:	80 93 ef 00 	sts	0x00EF, r24

	//usart1_transmit_string("\renable transmissionr\n");	

	while (!(CANSTMOB & (1<<TXOK)));	// check tx ok
     38a:	80 91 ee 00 	lds	r24, 0x00EE
     38e:	86 ff       	sbrs	r24, 6
     390:	fc cf       	rjmp	.-8      	; 0x38a <can_tx+0xf4>

	// monitoring with serial com
	//usart1_transmit_string("\rTXOK\n");

	//reset flag
	CANSTMOB &= ~(1<<TXOK);
     392:	80 91 ee 00 	lds	r24, 0x00EE
     396:	8f 7b       	andi	r24, 0xBF	; 191
     398:	80 93 ee 00 	sts	0x00EE, r24

	return(send_result);
}
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	08 95       	ret

000003a4 <can_rx>:
// 5. IDE 수신 처리 
// 6. DLC 수신 처리 
// 7. Data 수신 처리 
//***************************************************************
char can_rx(unsigned char obj, struct MOb *msg)		
{
     3a4:	cf 92       	push	r12
     3a6:	df 92       	push	r13
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	fb 01       	movw	r30, r22
	char rece_result = _RECE_FAIL;
	unsigned char i;	
	unsigned long can_id= 0;
	
	CANPAGE = (obj<<4);				// 수신 MOb 선택 
     3b2:	82 95       	swap	r24
     3b4:	80 7f       	andi	r24, 0xF0	; 240
     3b6:	80 93 ed 00 	sts	0x00ED, r24
	//usart1_transmit_string("\rRX MOb #");
	//usart1_transmit(obj+0x30);
	//usart1_transmit_string("\r\n");

	// 수신 완료될 때까지 대기함 
	while(!(CANSTMOB&(1<<RXOK)));
     3ba:	80 91 ee 00 	lds	r24, 0x00EE
     3be:	85 ff       	sbrs	r24, 5
     3c0:	fc cf       	rjmp	.-8      	; 0x3ba <can_rx+0x16>
	// get CANIDT and CANCDMOB and CANMSg
	//usart1_transmit_string("\rRXOK\n");
	rece_result = _RECE_OK;

	// 표준 혹은 확장 포맷에 맞추어 ID, IDE 결정 
	if((CANCDMOB & 0x10) == 0x00){			// IDE standard ?
     3c2:	80 91 ef 00 	lds	r24, 0x00EF
     3c6:	84 fd       	sbrc	r24, 4
     3c8:	1b c0       	rjmp	.+54     	; 0x400 <can_rx+0x5c>
		msg->ide= STD;
     3ca:	15 82       	std	Z+5, r1	; 0x05
		can_id  = ((unsigned long)CANIDT1)<<8;
     3cc:	80 91 f3 00 	lds	r24, 0x00F3
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	a0 e0       	ldi	r26, 0x00	; 0
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	ba 2f       	mov	r27, r26
     3d8:	a9 2f       	mov	r26, r25
     3da:	98 2f       	mov	r25, r24
     3dc:	88 27       	eor	r24, r24
		can_id |= ((unsigned long)CANIDT2);
     3de:	40 91 f2 00 	lds	r20, 0x00F2
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	84 2b       	or	r24, r20
     3ea:	95 2b       	or	r25, r21
     3ec:	a6 2b       	or	r26, r22
     3ee:	b7 2b       	or	r27, r23
		can_id>>=5;
     3f0:	35 e0       	ldi	r19, 0x05	; 5
     3f2:	b6 95       	lsr	r27
     3f4:	a7 95       	ror	r26
     3f6:	97 95       	ror	r25
     3f8:	87 95       	ror	r24
     3fa:	3a 95       	dec	r19
     3fc:	d1 f7       	brne	.-12     	; 0x3f2 <can_rx+0x4e>
     3fe:	35 c0       	rjmp	.+106    	; 0x46a <can_rx+0xc6>
		//usart1_transmit_string("\rRx Standard\n");
	}
	else{
		msg->ide= EXT;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	85 83       	std	Z+5, r24	; 0x05
		can_id  = ((unsigned long)CANIDT1)<<24;
     404:	80 91 f3 00 	lds	r24, 0x00F3
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	a0 e0       	ldi	r26, 0x00	; 0
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	b8 2f       	mov	r27, r24
     410:	aa 27       	eor	r26, r26
     412:	99 27       	eor	r25, r25
     414:	88 27       	eor	r24, r24
		can_id |= ((unsigned long)CANIDT2)<<16;
     416:	c0 90 f2 00 	lds	r12, 0x00F2
		can_id |= ((unsigned long)CANIDT3)<<8;
     41a:	40 91 f1 00 	lds	r20, 0x00F1
		can_id |= ((unsigned long)CANIDT4);
     41e:	00 91 f0 00 	lds	r16, 0x00F0
		//usart1_transmit_string("\rRx Standard\n");
	}
	else{
		msg->ide= EXT;
		can_id  = ((unsigned long)CANIDT1)<<24;
		can_id |= ((unsigned long)CANIDT2)<<16;
     422:	dd 24       	eor	r13, r13
     424:	ee 24       	eor	r14, r14
     426:	ff 24       	eor	r15, r15
     428:	76 01       	movw	r14, r12
     42a:	dd 24       	eor	r13, r13
     42c:	cc 24       	eor	r12, r12
     42e:	8c 29       	or	r24, r12
     430:	9d 29       	or	r25, r13
     432:	ae 29       	or	r26, r14
     434:	bf 29       	or	r27, r15
		can_id |= ((unsigned long)CANIDT3)<<8;
		can_id |= ((unsigned long)CANIDT4);
     436:	10 e0       	ldi	r17, 0x00	; 0
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
	}
	else{
		msg->ide= EXT;
		can_id  = ((unsigned long)CANIDT1)<<24;
		can_id |= ((unsigned long)CANIDT2)<<16;
		can_id |= ((unsigned long)CANIDT3)<<8;
     43c:	80 2b       	or	r24, r16
     43e:	91 2b       	or	r25, r17
     440:	a2 2b       	or	r26, r18
     442:	b3 2b       	or	r27, r19
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	76 2f       	mov	r23, r22
     44c:	65 2f       	mov	r22, r21
     44e:	54 2f       	mov	r21, r20
     450:	44 27       	eor	r20, r20
		can_id |= ((unsigned long)CANIDT4);
     452:	84 2b       	or	r24, r20
     454:	95 2b       	or	r25, r21
     456:	a6 2b       	or	r26, r22
     458:	b7 2b       	or	r27, r23
		can_id>>=3;
     45a:	68 94       	set
     45c:	12 f8       	bld	r1, 2
     45e:	b6 95       	lsr	r27
     460:	a7 95       	ror	r26
     462:	97 95       	ror	r25
     464:	87 95       	ror	r24
     466:	16 94       	lsr	r1
     468:	d1 f7       	brne	.-12     	; 0x45e <can_rx+0xba>
		//usart1_transmit_string("\rRx Extended\n");
	}
	msg->id= can_id;			// 구조체 변수로 CANID 대입 
     46a:	80 83       	st	Z, r24
     46c:	91 83       	std	Z+1, r25	; 0x01
     46e:	a2 83       	std	Z+2, r26	; 0x02
     470:	b3 83       	std	Z+3, r27	; 0x03

	msg->rtr= CANIDT4 & 0x04;   
     472:	80 91 f0 00 	lds	r24, 0x00F0
     476:	84 70       	andi	r24, 0x04	; 4
     478:	84 83       	std	Z+4, r24	; 0x04

	msg->dlc= CANCDMOB & 0x0f;	// 수신 메시지 길이 구조체 변수에 대입 
     47a:	80 91 ef 00 	lds	r24, 0x00EF
     47e:	8f 70       	andi	r24, 0x0F	; 15
     480:	86 83       	std	Z+6, r24	; 0x06

	// get data
	for(i=0; i<(CANCDMOB&0xf); i++){
     482:	40 e0       	ldi	r20, 0x00	; 0
     484:	09 c0       	rjmp	.+18     	; 0x498 <can_rx+0xf4>
		msg->data[i] = CANMSG;	// 메시지 데이터 배열에 저장 
     486:	80 91 fa 00 	lds	r24, 0x00FA
     48a:	2e 0f       	add	r18, r30
     48c:	3f 1f       	adc	r19, r31
     48e:	d9 01       	movw	r26, r18
     490:	17 96       	adiw	r26, 0x07	; 7
     492:	8c 93       	st	X, r24
     494:	17 97       	sbiw	r26, 0x07	; 7
	msg->rtr= CANIDT4 & 0x04;   

	msg->dlc= CANCDMOB & 0x0f;	// 수신 메시지 길이 구조체 변수에 대입 

	// get data
	for(i=0; i<(CANCDMOB&0xf); i++){
     496:	4f 5f       	subi	r20, 0xFF	; 255
     498:	24 2f       	mov	r18, r20
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	80 91 ef 00 	lds	r24, 0x00EF
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	8f 70       	andi	r24, 0x0F	; 15
     4a4:	90 70       	andi	r25, 0x00	; 0
     4a6:	28 17       	cp	r18, r24
     4a8:	39 07       	cpc	r19, r25
     4aa:	6c f3       	brlt	.-38     	; 0x486 <can_rx+0xe2>
		msg->data[i] = CANMSG;	// 메시지 데이터 배열에 저장 
	}

	// rx init 
	CANSTMOB = 0x00;			// 상태 초기 화 
     4ac:	10 92 ee 00 	sts	0x00EE, r1

	// enable reception mode and ide set
	CANCDMOB |= (1<<CONMOB1); 	// 수신 IDE 유지하고 수신 모드 설정
     4b0:	80 91 ef 00 	lds	r24, 0x00EF
     4b4:	80 68       	ori	r24, 0x80	; 128
     4b6:	80 93 ef 00 	sts	0x00EF, r24

	// reset flag
	CANSTMOB &= ~(1<<RXOK);		// 수신대기 
     4ba:	80 91 ee 00 	lds	r24, 0x00EE
     4be:	8f 7d       	andi	r24, 0xDF	; 223
     4c0:	80 93 ee 00 	sts	0x00EE, r24

	return(rece_result);
}
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	08 95       	ret

000004d4 <can_rx_set>:
//		idmask; CAN ID 수신 마스크 
//		rtrIdemask; RTR 비트와 IDE 마스크 			
//****************************************************************/
void can_rx_set(char obj, unsigned long id, char ide, unsigned char dlc, 
				unsigned long idmask, unsigned char rtrIdemask)
{
     4d4:	af 92       	push	r10
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
	CANPAGE = obj<<4;		// set MOb number
     4e0:	82 95       	swap	r24
     4e2:	80 7f       	andi	r24, 0xF0	; 240
     4e4:	80 93 ed 00 	sts	0x00ED, r24

	CANSTMOB = 0x00;		// clear status
     4e8:	10 92 ee 00 	sts	0x00EE, r1

	if(ide== STD)			// standard
	{
		CANIDT1= (unsigned char)(id>>3);
     4ec:	db 01       	movw	r26, r22
     4ee:	ca 01       	movw	r24, r20
{
	CANPAGE = obj<<4;		// set MOb number

	CANSTMOB = 0x00;		// clear status

	if(ide== STD)			// standard
     4f0:	22 23       	and	r18, r18
     4f2:	29 f5       	brne	.+74     	; 0x53e <can_rx_set+0x6a>
	{
		CANIDT1= (unsigned char)(id>>3);
     4f4:	f3 e0       	ldi	r31, 0x03	; 3
     4f6:	b6 95       	lsr	r27
     4f8:	a7 95       	ror	r26
     4fa:	97 95       	ror	r25
     4fc:	87 95       	ror	r24
     4fe:	fa 95       	dec	r31
     500:	d1 f7       	brne	.-12     	; 0x4f6 <can_rx_set+0x22>
     502:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id<<5);
     506:	42 95       	swap	r20
     508:	44 0f       	add	r20, r20
     50a:	40 7e       	andi	r20, 0xE0	; 224
     50c:	40 93 f2 00 	sts	0x00F2, r20

		CANIDM1= (unsigned char)(idmask>>3);
     510:	d7 01       	movw	r26, r14
     512:	c6 01       	movw	r24, r12
     514:	23 e0       	ldi	r18, 0x03	; 3
     516:	b6 95       	lsr	r27
     518:	a7 95       	ror	r26
     51a:	97 95       	ror	r25
     51c:	87 95       	ror	r24
     51e:	2a 95       	dec	r18
     520:	d1 f7       	brne	.-12     	; 0x516 <can_rx_set+0x42>
     522:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask<<5);
     526:	c2 94       	swap	r12
     528:	cc 0c       	add	r12, r12
     52a:	30 ee       	ldi	r19, 0xE0	; 224
     52c:	c3 22       	and	r12, r19
     52e:	c0 92 f6 00 	sts	0x00F6, r12
		CANIDM4=0;
     532:	10 92 f4 00 	sts	0x00F4, r1

		CANCDMOB &= ~0x10;	// clear IDE =0, standard 11 bits
     536:	80 91 ef 00 	lds	r24, 0x00EF
     53a:	8f 7e       	andi	r24, 0xEF	; 239
     53c:	4d c0       	rjmp	.+154    	; 0x5d8 <can_rx_set+0x104>

		//usart1_transmit_string("\rRx Standard Set\n");
	}
	else					// extended
	{
		CANIDT1= (unsigned char)(id>>21);
     53e:	e5 e1       	ldi	r30, 0x15	; 21
     540:	b6 95       	lsr	r27
     542:	a7 95       	ror	r26
     544:	97 95       	ror	r25
     546:	87 95       	ror	r24
     548:	ea 95       	dec	r30
     54a:	d1 f7       	brne	.-12     	; 0x540 <can_rx_set+0x6c>
     54c:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id>>13);
     550:	db 01       	movw	r26, r22
     552:	ca 01       	movw	r24, r20
     554:	fd e0       	ldi	r31, 0x0D	; 13
     556:	b6 95       	lsr	r27
     558:	a7 95       	ror	r26
     55a:	97 95       	ror	r25
     55c:	87 95       	ror	r24
     55e:	fa 95       	dec	r31
     560:	d1 f7       	brne	.-12     	; 0x556 <can_rx_set+0x82>
     562:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(id>>5);
     566:	db 01       	movw	r26, r22
     568:	ca 01       	movw	r24, r20
     56a:	25 e0       	ldi	r18, 0x05	; 5
     56c:	b6 95       	lsr	r27
     56e:	a7 95       	ror	r26
     570:	97 95       	ror	r25
     572:	87 95       	ror	r24
     574:	2a 95       	dec	r18
     576:	d1 f7       	brne	.-12     	; 0x56c <can_rx_set+0x98>
     578:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(id<<3);
     57c:	44 0f       	add	r20, r20
     57e:	44 0f       	add	r20, r20
     580:	44 0f       	add	r20, r20
     582:	40 93 f0 00 	sts	0x00F0, r20

		CANIDM1= (unsigned char)(idmask>>21);
     586:	d7 01       	movw	r26, r14
     588:	c6 01       	movw	r24, r12
     58a:	35 e1       	ldi	r19, 0x15	; 21
     58c:	b6 95       	lsr	r27
     58e:	a7 95       	ror	r26
     590:	97 95       	ror	r25
     592:	87 95       	ror	r24
     594:	3a 95       	dec	r19
     596:	d1 f7       	brne	.-12     	; 0x58c <can_rx_set+0xb8>
     598:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask>>13);
     59c:	d7 01       	movw	r26, r14
     59e:	c6 01       	movw	r24, r12
     5a0:	4d e0       	ldi	r20, 0x0D	; 13
     5a2:	b6 95       	lsr	r27
     5a4:	a7 95       	ror	r26
     5a6:	97 95       	ror	r25
     5a8:	87 95       	ror	r24
     5aa:	4a 95       	dec	r20
     5ac:	d1 f7       	brne	.-12     	; 0x5a2 <can_rx_set+0xce>
     5ae:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM3= (unsigned char)(idmask>>5);
     5b2:	d7 01       	movw	r26, r14
     5b4:	c6 01       	movw	r24, r12
     5b6:	e5 e0       	ldi	r30, 0x05	; 5
     5b8:	b6 95       	lsr	r27
     5ba:	a7 95       	ror	r26
     5bc:	97 95       	ror	r25
     5be:	87 95       	ror	r24
     5c0:	ea 95       	dec	r30
     5c2:	d1 f7       	brne	.-12     	; 0x5b8 <can_rx_set+0xe4>
     5c4:	80 93 f5 00 	sts	0x00F5, r24
		CANIDM4= (unsigned char)(idmask<<3);
     5c8:	cc 0c       	add	r12, r12
     5ca:	cc 0c       	add	r12, r12
     5cc:	cc 0c       	add	r12, r12
     5ce:	c0 92 f4 00 	sts	0x00F4, r12

		CANCDMOB |= 0x10;	// set IDE =1, extended 29 bits
     5d2:	80 91 ef 00 	lds	r24, 0x00EF
     5d6:	80 61       	ori	r24, 0x10	; 16
     5d8:	80 93 ef 00 	sts	0x00EF, r24

		//usart1_transmit_string("\rRx Extended Set\n");
	}
	CANCDMOB |= (dlc & 0x0f);		// set data length
     5dc:	80 91 ef 00 	lds	r24, 0x00EF
     5e0:	0f 70       	andi	r16, 0x0F	; 15
     5e2:	08 2b       	or	r16, r24
     5e4:	00 93 ef 00 	sts	0x00EF, r16

	CANIDM4 |= (unsigned char)(rtrIdemask & 0x07);
     5e8:	90 91 f4 00 	lds	r25, 0x00F4
     5ec:	8a 2d       	mov	r24, r10
     5ee:	87 70       	andi	r24, 0x07	; 7
     5f0:	89 2b       	or	r24, r25
     5f2:	80 93 f4 00 	sts	0x00F4, r24
//	CANIDM4 &= ~0x04;		// RTRMSK= 1/0 enable comparison (Data receive)
//	CANIDM4 &= ~0x02;		// recommended
//	CANIDM4 &= ~0x01;		// IDEMSK= 1/0 enable comparison (IDE receive)

	CANCDMOB |= 0x80;		// receive enable 
     5f6:	80 91 ef 00 	lds	r24, 0x00EF
     5fa:	80 68       	ori	r24, 0x80	; 128
     5fc:	80 93 ef 00 	sts	0x00EF, r24
}
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	af 90       	pop	r10
     60c:	08 95       	ret

0000060e <can_int_rx_set>:
//  7. 수신 모드 설정 
//****************************************************************/
void can_int_rx_set(char obj, unsigned long id, char rplvIde, 
					unsigned char dlc, unsigned long idmask, 
					unsigned char rtrIdemask)
{
     60e:	af 92       	push	r10
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	38 2f       	mov	r19, r24
	CANPAGE = obj<<4;		// set MOb number
     61c:	82 95       	swap	r24
     61e:	80 7f       	andi	r24, 0xF0	; 240
     620:	80 93 ed 00 	sts	0x00ED, r24

	CANSTMOB = 0x00;		// clear status
     624:	10 92 ee 00 	sts	0x00EE, r1

	if(rplvIde & 0x02)	
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
     628:	80 91 ef 00 	lds	r24, 0x00EF
{
	CANPAGE = obj<<4;		// set MOb number

	CANSTMOB = 0x00;		// clear status

	if(rplvIde & 0x02)	
     62c:	21 ff       	sbrs	r18, 1
     62e:	02 c0       	rjmp	.+4      	; 0x634 <can_int_rx_set+0x26>
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
     630:	80 62       	ori	r24, 0x20	; 32
     632:	01 c0       	rjmp	.+2      	; 0x636 <can_int_rx_set+0x28>
	else
		CANCDMOB &= ~0x20;			// RPLV clear
     634:	8f 7d       	andi	r24, 0xDF	; 223
     636:	80 93 ef 00 	sts	0x00EF, r24

	if(( rplvIde & 0x01) == STD)			// standard
	{
		CANIDT1= (unsigned char)(id>>3);
     63a:	db 01       	movw	r26, r22
     63c:	ca 01       	movw	r24, r20
	if(rplvIde & 0x02)	
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
	else
		CANCDMOB &= ~0x20;			// RPLV clear

	if(( rplvIde & 0x01) == STD)			// standard
     63e:	20 fd       	sbrc	r18, 0
     640:	25 c0       	rjmp	.+74     	; 0x68c <can_int_rx_set+0x7e>
	{
		CANIDT1= (unsigned char)(id>>3);
     642:	23 e0       	ldi	r18, 0x03	; 3
     644:	b6 95       	lsr	r27
     646:	a7 95       	ror	r26
     648:	97 95       	ror	r25
     64a:	87 95       	ror	r24
     64c:	2a 95       	dec	r18
     64e:	d1 f7       	brne	.-12     	; 0x644 <can_int_rx_set+0x36>
     650:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id<<5);
     654:	42 95       	swap	r20
     656:	44 0f       	add	r20, r20
     658:	40 7e       	andi	r20, 0xE0	; 224
     65a:	40 93 f2 00 	sts	0x00F2, r20

		CANIDM1= (unsigned char)(idmask>>3);
     65e:	d7 01       	movw	r26, r14
     660:	c6 01       	movw	r24, r12
     662:	43 e0       	ldi	r20, 0x03	; 3
     664:	b6 95       	lsr	r27
     666:	a7 95       	ror	r26
     668:	97 95       	ror	r25
     66a:	87 95       	ror	r24
     66c:	4a 95       	dec	r20
     66e:	d1 f7       	brne	.-12     	; 0x664 <can_int_rx_set+0x56>
     670:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask<<5);
     674:	c2 94       	swap	r12
     676:	cc 0c       	add	r12, r12
     678:	50 ee       	ldi	r21, 0xE0	; 224
     67a:	c5 22       	and	r12, r21
     67c:	c0 92 f6 00 	sts	0x00F6, r12
		CANIDM4=0;
     680:	10 92 f4 00 	sts	0x00F4, r1

		CANCDMOB &= ~0x10;	// clear IDE =0, standard 11 bits
     684:	80 91 ef 00 	lds	r24, 0x00EF
     688:	8f 7e       	andi	r24, 0xEF	; 239
     68a:	4d c0       	rjmp	.+154    	; 0x726 <can_int_rx_set+0x118>

		//usart1_transmit_string("\rRx Standard Set\n");
	}
	else					// extended
	{
		CANIDT1= (unsigned char)(id>>21);
     68c:	e5 e1       	ldi	r30, 0x15	; 21
     68e:	b6 95       	lsr	r27
     690:	a7 95       	ror	r26
     692:	97 95       	ror	r25
     694:	87 95       	ror	r24
     696:	ea 95       	dec	r30
     698:	d1 f7       	brne	.-12     	; 0x68e <can_int_rx_set+0x80>
     69a:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id>>13);
     69e:	db 01       	movw	r26, r22
     6a0:	ca 01       	movw	r24, r20
     6a2:	fd e0       	ldi	r31, 0x0D	; 13
     6a4:	b6 95       	lsr	r27
     6a6:	a7 95       	ror	r26
     6a8:	97 95       	ror	r25
     6aa:	87 95       	ror	r24
     6ac:	fa 95       	dec	r31
     6ae:	d1 f7       	brne	.-12     	; 0x6a4 <can_int_rx_set+0x96>
     6b0:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(id>>5);
     6b4:	db 01       	movw	r26, r22
     6b6:	ca 01       	movw	r24, r20
     6b8:	25 e0       	ldi	r18, 0x05	; 5
     6ba:	b6 95       	lsr	r27
     6bc:	a7 95       	ror	r26
     6be:	97 95       	ror	r25
     6c0:	87 95       	ror	r24
     6c2:	2a 95       	dec	r18
     6c4:	d1 f7       	brne	.-12     	; 0x6ba <can_int_rx_set+0xac>
     6c6:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(id<<3);
     6ca:	44 0f       	add	r20, r20
     6cc:	44 0f       	add	r20, r20
     6ce:	44 0f       	add	r20, r20
     6d0:	40 93 f0 00 	sts	0x00F0, r20

		CANIDM1= (unsigned char)(idmask>>21);
     6d4:	d7 01       	movw	r26, r14
     6d6:	c6 01       	movw	r24, r12
     6d8:	45 e1       	ldi	r20, 0x15	; 21
     6da:	b6 95       	lsr	r27
     6dc:	a7 95       	ror	r26
     6de:	97 95       	ror	r25
     6e0:	87 95       	ror	r24
     6e2:	4a 95       	dec	r20
     6e4:	d1 f7       	brne	.-12     	; 0x6da <can_int_rx_set+0xcc>
     6e6:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask>>13);
     6ea:	d7 01       	movw	r26, r14
     6ec:	c6 01       	movw	r24, r12
     6ee:	ed e0       	ldi	r30, 0x0D	; 13
     6f0:	b6 95       	lsr	r27
     6f2:	a7 95       	ror	r26
     6f4:	97 95       	ror	r25
     6f6:	87 95       	ror	r24
     6f8:	ea 95       	dec	r30
     6fa:	d1 f7       	brne	.-12     	; 0x6f0 <can_int_rx_set+0xe2>
     6fc:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM3= (unsigned char)(idmask>>5);
     700:	d7 01       	movw	r26, r14
     702:	c6 01       	movw	r24, r12
     704:	f5 e0       	ldi	r31, 0x05	; 5
     706:	b6 95       	lsr	r27
     708:	a7 95       	ror	r26
     70a:	97 95       	ror	r25
     70c:	87 95       	ror	r24
     70e:	fa 95       	dec	r31
     710:	d1 f7       	brne	.-12     	; 0x706 <can_int_rx_set+0xf8>
     712:	80 93 f5 00 	sts	0x00F5, r24
		CANIDM4= (unsigned char)(idmask<<3);
     716:	cc 0c       	add	r12, r12
     718:	cc 0c       	add	r12, r12
     71a:	cc 0c       	add	r12, r12
     71c:	c0 92 f4 00 	sts	0x00F4, r12

		CANCDMOB |= 0x10;	// set IDE =1, extended 29 bits
     720:	80 91 ef 00 	lds	r24, 0x00EF
     724:	80 61       	ori	r24, 0x10	; 16
     726:	80 93 ef 00 	sts	0x00EF, r24

		//usart1_transmit_string("\rRx Extended Set\n");
	}
	CANCDMOB |= (dlc & 0x0f);		// set data length
     72a:	80 91 ef 00 	lds	r24, 0x00EF
     72e:	0f 70       	andi	r16, 0x0F	; 15
     730:	08 2b       	or	r16, r24
     732:	00 93 ef 00 	sts	0x00EF, r16

	CANIDM4 |= (unsigned char)(rtrIdemask & 0x07);
     736:	90 91 f4 00 	lds	r25, 0x00F4
     73a:	8a 2d       	mov	r24, r10
     73c:	87 70       	andi	r24, 0x07	; 7
     73e:	89 2b       	or	r24, r25
     740:	80 93 f4 00 	sts	0x00F4, r24
//	CANIDM4 &= ~0x02;		// recommended
//	CANIDM4 &= ~0x01;		// IDEMSK= 1/0 enable comparison (IDE receive)


//  인터럽트 인에이블(인터럽트 설정)
	CANGIE |= 0xa0; 		// Enable all interrupt and Enable Rx interrupt
     744:	80 91 db 00 	lds	r24, 0x00DB
     748:	80 6a       	ori	r24, 0xA0	; 160
     74a:	80 93 db 00 	sts	0x00DB, r24

	if(obj<8) 
     74e:	38 30       	cpi	r19, 0x08	; 8
     750:	50 f4       	brcc	.+20     	; 0x766 <can_int_rx_set+0x158>
		CANIE2 = (1<<obj);		// 해당 MOb의 인터럽트를 인에이블 시킴 
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	02 c0       	rjmp	.+4      	; 0x75c <can_int_rx_set+0x14e>
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	3a 95       	dec	r19
     75e:	e2 f7       	brpl	.-8      	; 0x758 <can_int_rx_set+0x14a>
     760:	80 93 de 00 	sts	0x00DE, r24
     764:	0d c0       	rjmp	.+26     	; 0x780 <can_int_rx_set+0x172>
	else        
		CANIE1 = (1<<(obj-8));	// 
     766:	23 2f       	mov	r18, r19
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	28 50       	subi	r18, 0x08	; 8
     76c:	30 40       	sbci	r19, 0x00	; 0
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	02 c0       	rjmp	.+4      	; 0x778 <can_int_rx_set+0x16a>
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	2a 95       	dec	r18
     77a:	e2 f7       	brpl	.-8      	; 0x774 <can_int_rx_set+0x166>
     77c:	80 93 df 00 	sts	0x00DF, r24

	CANCDMOB |= 0x80;			// 수신 인에이블 
     780:	80 91 ef 00 	lds	r24, 0x00EF
     784:	80 68       	ori	r24, 0x80	; 128
     786:	80 93 ef 00 	sts	0x00EF, r24
	sei();
     78a:	78 94       	sei
}
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	af 90       	pop	r10
     798:	08 95       	ret

0000079a <initPort>:



void initPort(void)
{
	DDRC  = 0xff;
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     79e:	18 b8       	out	0x08, r1	; 8
	DDRG  = 0x0f;
     7a0:	9f e0       	ldi	r25, 0x0F	; 15
     7a2:	93 bb       	out	0x13, r25	; 19
	DDRF  = 0x00;
     7a4:	10 ba       	out	0x10, r1	; 16
	DDRE  = 0xff;
     7a6:	8d b9       	out	0x0d, r24	; 13
	DDRB =  0xff;
     7a8:	84 b9       	out	0x04, r24	; 4
}
     7aa:	08 95       	ret

000007ac <initMotor>:

// motor control ======================================================
void initMotor(void)
{
	TCCR3A=0b10001010;
     7ac:	8a e8       	ldi	r24, 0x8A	; 138
     7ae:	80 93 90 00 	sts	0x0090, r24
	TCCR3B=0b11010011;
     7b2:	83 ed       	ldi	r24, 0xD3	; 211
     7b4:	80 93 91 00 	sts	0x0091, r24
	ICR3 = FREQ_CLKIO/2/PRESCALE/1000*RC_SERVO_PERIOD;	
     7b8:	85 e3       	ldi	r24, 0x35	; 53
     7ba:	9c e0       	ldi	r25, 0x0C	; 12
     7bc:	90 93 97 00 	sts	0x0097, r25
     7c0:	80 93 96 00 	sts	0x0096, r24
					// 최고값(Top)3125, 40Hz(25msec) 

	OCR3C= 70;		// 최저값(output compare) PE5 pin output
     7c4:	86 e4       	ldi	r24, 0x46	; 70
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	90 93 9d 00 	sts	0x009D, r25
     7cc:	80 93 9c 00 	sts	0x009C, r24

}
     7d0:	08 95       	ret

000007d2 <CtrlDcMotor>:
// DC모터 속도 제어와 모터 회전 방향 제어 
void CtrlDcMotor(unsigned int speed, unsigned int dir)
{
	unsigned int level=5;

	PORTE&=0xFC;
     7d2:	2e b1       	in	r18, 0x0e	; 14
     7d4:	2c 7f       	andi	r18, 0xFC	; 252
     7d6:	2e b9       	out	0x0e, r18	; 14

	// DC모터 회전 방향 결정
	if(dir==0)		// 시계 방향 회전
     7d8:	61 15       	cp	r22, r1
     7da:	71 05       	cpc	r23, r1
     7dc:	a9 f4       	brne	.+42     	; 0x808 <CtrlDcMotor+0x36>
	{
		// speed에 따른 속도 제어
		OCR3A=(speed*FREQ_CLKIO/2/PRESCALE/1000*RC_SERVO_PERIOD)/level;
     7de:	bc 01       	movw	r22, r24
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	25 e3       	ldi	r18, 0x35	; 53
     7e6:	3c e0       	ldi	r19, 0x0C	; 12
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__mulsi3>
     7f0:	25 e0       	ldi	r18, 0x05	; 5
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__divmodsi4>
     7fc:	30 93 99 00 	sts	0x0099, r19
     800:	20 93 98 00 	sts	0x0098, r18
		PORTE|=0x01;	
     804:	70 9a       	sbi	0x0e, 0	; 14
     806:	08 95       	ret
	}
	else if(dir==1)	// 반시계 방향 회전 
     808:	61 30       	cpi	r22, 0x01	; 1
     80a:	71 05       	cpc	r23, r1
     80c:	a9 f4       	brne	.+42     	; 0x838 <CtrlDcMotor+0x66>
	{
		// speed에 따른 속도 제어
		OCR3A=(speed*FREQ_CLKIO/2/PRESCALE/1000*RC_SERVO_PERIOD)/level;
     80e:	bc 01       	movw	r22, r24
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	25 e3       	ldi	r18, 0x35	; 53
     816:	3c e0       	ldi	r19, 0x0C	; 12
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__mulsi3>
     820:	25 e0       	ldi	r18, 0x05	; 5
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__divmodsi4>
     82c:	30 93 99 00 	sts	0x0099, r19
     830:	20 93 98 00 	sts	0x0098, r18
		PORTE|=0x02;
     834:	71 9a       	sbi	0x0e, 1	; 14
     836:	08 95       	ret
	}
	else			// 모터 정지 
	{
		OCR3A=100;
     838:	84 e6       	ldi	r24, 0x64	; 100
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	90 93 99 00 	sts	0x0099, r25
     840:	80 93 98 00 	sts	0x0098, r24
		OCR3B=100;
     844:	90 93 9b 00 	sts	0x009B, r25
     848:	80 93 9a 00 	sts	0x009A, r24
     84c:	08 95       	ret

0000084e <CtrlRcServoMotor>:
	}
}

// 서보 모터 회전 제어(degree : 각도) 
void CtrlRcServoMotor(unsigned int degree)
{
     84e:	8f 92       	push	r8
     850:	9f 92       	push	r9
     852:	af 92       	push	r10
     854:	bf 92       	push	r11
     856:	cf 92       	push	r12
     858:	df 92       	push	r13
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
	OCR3C= FREQ_CLKIO/2/PRESCALE/1000*(1.6/180*degree+(0.15/180*degree+0.6));								 						
     85e:	bc 01       	movw	r22, r24
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 92 08 	call	0x1124	; 0x1124 <__floatunsisf>
     868:	6b 01       	movw	r12, r22
     86a:	7c 01       	movw	r14, r24
     86c:	24 eb       	ldi	r18, 0xB4	; 180
     86e:	32 ea       	ldi	r19, 0xA2	; 162
     870:	41 e1       	ldi	r20, 0x11	; 17
     872:	5c e3       	ldi	r21, 0x3C	; 60
     874:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__mulsf3>
     878:	4b 01       	movw	r8, r22
     87a:	5c 01       	movw	r10, r24
     87c:	c7 01       	movw	r24, r14
     87e:	b6 01       	movw	r22, r12
     880:	2e e0       	ldi	r18, 0x0E	; 14
     882:	34 e7       	ldi	r19, 0x74	; 116
     884:	4a e5       	ldi	r20, 0x5A	; 90
     886:	5a e3       	ldi	r21, 0x3A	; 58
     888:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__mulsf3>
     88c:	2a e9       	ldi	r18, 0x9A	; 154
     88e:	39 e9       	ldi	r19, 0x99	; 153
     890:	49 e1       	ldi	r20, 0x19	; 25
     892:	5f e3       	ldi	r21, 0x3F	; 63
     894:	0e 94 a3 06 	call	0xd46	; 0xd46 <__addsf3>
     898:	9b 01       	movw	r18, r22
     89a:	ac 01       	movw	r20, r24
     89c:	c5 01       	movw	r24, r10
     89e:	b4 01       	movw	r22, r8
     8a0:	0e 94 a3 06 	call	0xd46	; 0xd46 <__addsf3>
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	4a ef       	ldi	r20, 0xFA	; 250
     8aa:	52 e4       	ldi	r21, 0x42	; 66
     8ac:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__mulsf3>
     8b0:	0e 94 22 05 	call	0xa44	; 0xa44 <__fixunssfsi>
     8b4:	dc 01       	movw	r26, r24
     8b6:	cb 01       	movw	r24, r22
     8b8:	90 93 9d 00 	sts	0x009D, r25
     8bc:	80 93 9c 00 	sts	0x009C, r24
}
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	bf 90       	pop	r11
     8ca:	af 90       	pop	r10
     8cc:	9f 90       	pop	r9
     8ce:	8f 90       	pop	r8
     8d0:	08 95       	ret

000008d2 <DcMotorDir>:
// 조이스틱 Y축의 AD 변화값에 따른 DC모터 회전 방향 결정 	
unsigned int DcMotorDir(unsigned int mode)
{
	unsigned int dir=0;

	if( mode == 3) dir=0;		// driving, 시계 방향 
     8d2:	83 30       	cpi	r24, 0x03	; 3
     8d4:	91 05       	cpc	r25, r1
     8d6:	31 f0       	breq	.+12     	; 0x8e4 <DcMotorDir+0x12>
	else if(mode == 1) dir=1;	// reverse 반시계 방향 
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	91 05       	cpc	r25, r1
     8dc:	31 f4       	brne	.+12     	; 0x8ea <DcMotorDir+0x18>
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	08 95       	ret
// 조이스틱 Y축의 AD 변화값에 따른 DC모터 회전 방향 결정 	
unsigned int DcMotorDir(unsigned int mode)
{
	unsigned int dir=0;

	if( mode == 3) dir=0;		// driving, 시계 방향 
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	08 95       	ret
	else if(mode == 1) dir=1;	// reverse 반시계 방향 
	else dir=2;					// p, n 정지 
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	90 e0       	ldi	r25, 0x00	; 0

	return dir;
}
     8ee:	08 95       	ret

000008f0 <RcServoMotorAngle>:

// 조이스틱 X축의 AD 변화값에 따른 서보 모터 회전각 결정 
unsigned int RcServoMotorAngle(unsigned int volt_x)
{
     8f0:	9c 01       	movw	r18, r24
	unsigned int angle;
	if(volt_x>25 && volt_x<29) angle=90;
     8f2:	4a 97       	sbiw	r24, 0x1a	; 26
     8f4:	83 30       	cpi	r24, 0x03	; 3
     8f6:	91 05       	cpc	r25, r1
     8f8:	78 f0       	brcs	.+30     	; 0x918 <RcServoMotorAngle+0x28>
	else angle=(volt_x)*180/50;
     8fa:	44 eb       	ldi	r20, 0xB4	; 180
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	24 9f       	mul	r18, r20
     900:	c0 01       	movw	r24, r0
     902:	25 9f       	mul	r18, r21
     904:	90 0d       	add	r25, r0
     906:	34 9f       	mul	r19, r20
     908:	90 0d       	add	r25, r0
     90a:	11 24       	eor	r1, r1
     90c:	62 e3       	ldi	r22, 0x32	; 50
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__udivmodhi4>
     914:	cb 01       	movw	r24, r22
     916:	08 95       	ret

// 조이스틱 X축의 AD 변화값에 따른 서보 모터 회전각 결정 
unsigned int RcServoMotorAngle(unsigned int volt_x)
{
	unsigned int angle;
	if(volt_x>25 && volt_x<29) angle=90;
     918:	8a e5       	ldi	r24, 0x5A	; 90
     91a:	90 e0       	ldi	r25, 0x00	; 0
	else angle=(volt_x)*180/50;
	
	return angle;
}
     91c:	08 95       	ret

0000091e <us_delay>:

void us_delay(unsigned int us_time)
{
	unsigned int i;

	for(i=0; i<us_time; i++) // 4 cycle +
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	08 c0       	rjmp	.+16     	; 0x934 <us_delay+0x16>
	{
		asm("PUSH R0"); 	// 2 cycle +
     924:	0f 92       	push	r0
		asm("POP R0"); 		// 2 cycle +
     926:	0f 90       	pop	r0
		asm("PUSH R0"); 	// 2 cycle +
     928:	0f 92       	push	r0
		asm("POP R0"); 		// 2 cycle + =12 cycle for 11.0592MHZ
     92a:	0f 90       	pop	r0
		asm("PUSH R0"); 	// 2 cycle +
     92c:	0f 92       	push	r0
		asm("POP R0"); 		// 2 cycle = 16 cycle = 1us for 16MHz
     92e:	0f 90       	pop	r0

void us_delay(unsigned int us_time)
{
	unsigned int i;

	for(i=0; i<us_time; i++) // 4 cycle +
     930:	2f 5f       	subi	r18, 0xFF	; 255
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	28 17       	cp	r18, r24
     936:	39 07       	cpc	r19, r25
     938:	a9 f7       	brne	.-22     	; 0x924 <us_delay+0x6>
		asm("PUSH R0"); 	// 2 cycle +
		asm("POP R0"); 		// 2 cycle + =12 cycle for 11.0592MHZ
		asm("PUSH R0"); 	// 2 cycle +
		asm("POP R0"); 		// 2 cycle = 16 cycle = 1us for 16MHz
	}
}
     93a:	08 95       	ret

0000093c <ms_delay>:

void ms_delay(unsigned int ms_time)
{
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	8c 01       	movw	r16, r24
    unsigned int i;
    
    for(i=0; i<ms_time;i++)
     946:	c0 e0       	ldi	r28, 0x00	; 0
     948:	d0 e0       	ldi	r29, 0x00	; 0
     94a:	05 c0       	rjmp	.+10     	; 0x956 <ms_delay+0x1a>
        us_delay(1000);
     94c:	88 ee       	ldi	r24, 0xE8	; 232
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	0e 94 8f 04 	call	0x91e	; 0x91e <us_delay>

void ms_delay(unsigned int ms_time)
{
    unsigned int i;
    
    for(i=0; i<ms_time;i++)
     954:	21 96       	adiw	r28, 0x01	; 1
     956:	c0 17       	cp	r28, r16
     958:	d1 07       	cpc	r29, r17
     95a:	c1 f7       	brne	.-16     	; 0x94c <ms_delay+0x10>
        us_delay(1000);
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <E_Pulse>:
#define EN_0      (PORTG &= 0xFB)

//LCD Functions =================================================
void E_Pulse(void)
{
	EN_1;
     966:	a2 9a       	sbi	0x14, 2	; 20

	us_delay(100);
     968:	84 e6       	ldi	r24, 0x64	; 100
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 8f 04 	call	0x91e	; 0x91e <us_delay>

	EN_0;
     970:	a2 98       	cbi	0x14, 2	; 20
}
     972:	08 95       	ret

00000974 <LCD_init>:

void LCD_init(void)
{
	ms_delay(40);
     974:	88 e2       	ldi	r24, 0x28	; 40
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 9e 04 	call	0x93c	; 0x93c <ms_delay>

	PORTC = 0x38;	// Function Set
     97c:	88 e3       	ldi	r24, 0x38	; 56
     97e:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
     980:	0e 94 b3 04 	call	0x966	; 0x966 <E_Pulse>
    us_delay(40);
     984:	88 e2       	ldi	r24, 0x28	; 40
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 8f 04 	call	0x91e	; 0x91e <us_delay>

	PORTC = 0x0c; // DisPlay ON/OFF Control
     98c:	8c e0       	ldi	r24, 0x0C	; 12
     98e:	88 b9       	out	0x08, r24	; 8
	us_delay(40);
     990:	88 e2       	ldi	r24, 0x28	; 40
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 8f 04 	call	0x91e	; 0x91e <us_delay>
	E_Pulse();
     998:	0e 94 b3 04 	call	0x966	; 0x966 <E_Pulse>
	
	PORTC = 0x01; // Display Clear
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	88 b9       	out	0x08, r24	; 8
	ms_delay(2);
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 9e 04 	call	0x93c	; 0x93c <ms_delay>
	E_Pulse();
     9a8:	0e 94 b3 04 	call	0x966	; 0x966 <E_Pulse>

	PORTC = 0x06; // Entry Mode Set
     9ac:	86 e0       	ldi	r24, 0x06	; 6
     9ae:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
     9b0:	0e 94 b3 04 	call	0x966	; 0x966 <E_Pulse>
}
     9b4:	08 95       	ret

000009b6 <LCD_cmd>:

void LCD_cmd(unsigned char cmd)
{
	LCD_RS_0;
     9b6:	a0 98       	cbi	0x14, 0	; 20
	LCD_RW_0;
     9b8:	a1 98       	cbi	0x14, 1	; 20
	PORTC=cmd;
     9ba:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
     9bc:	0e 94 b3 04 	call	0x966	; 0x966 <E_Pulse>
}	
     9c0:	08 95       	ret

000009c2 <Write_Char>:

void Write_Char(unsigned char buf)
{
	LCD_RS_1;
     9c2:	a0 9a       	sbi	0x14, 0	; 20
	LCD_RW_0;
     9c4:	a1 98       	cbi	0x14, 1	; 20
	PORTC=buf;
     9c6:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
     9c8:	0e 94 b3 04 	call	0x966	; 0x966 <E_Pulse>
}	
     9cc:	08 95       	ret

000009ce <LCD_Disp>:

void LCD_Disp(char x,char y)
{
	LCD_RS_0;
     9ce:	a0 98       	cbi	0x14, 0	; 20
	LCD_RW_0;
     9d0:	a1 98       	cbi	0x14, 1	; 20

	if(y==0) PORTC = x + 0x80;
     9d2:	66 23       	and	r22, r22
     9d4:	11 f4       	brne	.+4      	; 0x9da <LCD_Disp+0xc>
     9d6:	80 58       	subi	r24, 0x80	; 128
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <LCD_Disp+0x12>
	else if(y==1) PORTC = x + 0xc0;
     9da:	61 30       	cpi	r22, 0x01	; 1
     9dc:	11 f4       	brne	.+4      	; 0x9e2 <LCD_Disp+0x14>
     9de:	80 54       	subi	r24, 0x40	; 64
     9e0:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
     9e2:	0e 94 b3 04 	call	0x966	; 0x966 <E_Pulse>
}
     9e6:	08 95       	ret

000009e8 <LCD_Write>:
 
void LCD_Write(char x, char y,char *str)
{
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <LCD_Write+0xa>
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
	LCD_Disp(x,y);
     9f6:	49 83       	std	Y+1, r20	; 0x01
     9f8:	5a 83       	std	Y+2, r21	; 0x02
     9fa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_Disp>
     9fe:	49 81       	ldd	r20, Y+1	; 0x01
     a00:	04 2f       	mov	r16, r20
     a02:	5a 81       	ldd	r21, Y+2	; 0x02
     a04:	15 2f       	mov	r17, r21
	while(*str)
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <LCD_Write+0x24>
	Write_Char(*str++);
     a08:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <Write_Char>
}
 
void LCD_Write(char x, char y,char *str)
{
	LCD_Disp(x,y);
	while(*str)
     a0c:	f8 01       	movw	r30, r16
     a0e:	81 91       	ld	r24, Z+
     a10:	8f 01       	movw	r16, r30
     a12:	88 23       	and	r24, r24
     a14:	c9 f7       	brne	.-14     	; 0xa08 <LCD_Write+0x20>
	Write_Char(*str++);
}
     a16:	0f 90       	pop	r0
     a18:	0f 90       	pop	r0
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	08 95       	ret

00000a24 <LCD_Write_char>:

void LCD_Write_char(char x, char y, unsigned char ch)
{
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	0f 92       	push	r0
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
	LCD_Disp(x,y);
     a2e:	49 83       	std	Y+1, r20	; 0x01
     a30:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_Disp>
	Write_Char(ch);
     a34:	49 81       	ldd	r20, Y+1	; 0x01
     a36:	84 2f       	mov	r24, r20
     a38:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <Write_Char>
}
     a3c:	0f 90       	pop	r0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <__fixunssfsi>:
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	6b 01       	movw	r12, r22
     a52:	7c 01       	movw	r14, r24
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	5f e4       	ldi	r21, 0x4F	; 79
     a5c:	0e 94 10 08 	call	0x1020	; 0x1020 <__gesf2>
     a60:	87 fd       	sbrc	r24, 7
     a62:	11 c0       	rjmp	.+34     	; 0xa86 <__fixunssfsi+0x42>
     a64:	c7 01       	movw	r24, r14
     a66:	b6 01       	movw	r22, r12
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	5f e4       	ldi	r21, 0x4F	; 79
     a70:	0e 94 d7 06 	call	0xdae	; 0xdae <__subsf3>
     a74:	0e 94 41 08 	call	0x1082	; 0x1082 <__fixsfsi>
     a78:	8b 01       	movw	r16, r22
     a7a:	9c 01       	movw	r18, r24
     a7c:	00 50       	subi	r16, 0x00	; 0
     a7e:	10 40       	sbci	r17, 0x00	; 0
     a80:	20 40       	sbci	r18, 0x00	; 0
     a82:	30 48       	sbci	r19, 0x80	; 128
     a84:	06 c0       	rjmp	.+12     	; 0xa92 <__fixunssfsi+0x4e>
     a86:	c7 01       	movw	r24, r14
     a88:	b6 01       	movw	r22, r12
     a8a:	0e 94 41 08 	call	0x1082	; 0x1082 <__fixsfsi>
     a8e:	8b 01       	movw	r16, r22
     a90:	9c 01       	movw	r18, r24
     a92:	b8 01       	movw	r22, r16
     a94:	c9 01       	movw	r24, r18
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	08 95       	ret

00000aa4 <_fpadd_parts>:
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	e8 e5       	ldi	r30, 0x58	; 88
     aaa:	f5 e0       	ldi	r31, 0x05	; 5
     aac:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__prologue_saves__+0x4>
     ab0:	ec 01       	movw	r28, r24
     ab2:	4b 01       	movw	r8, r22
     ab4:	fa 01       	movw	r30, r20
     ab6:	88 81       	ld	r24, Y
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	08 f4       	brcc	.+2      	; 0xabe <_fpadd_parts+0x1a>
     abc:	3e c1       	rjmp	.+636    	; 0xd3a <_fpadd_parts+0x296>
     abe:	db 01       	movw	r26, r22
     ac0:	9c 91       	ld	r25, X
     ac2:	92 30       	cpi	r25, 0x02	; 2
     ac4:	08 f4       	brcc	.+2      	; 0xac8 <_fpadd_parts+0x24>
     ac6:	36 c1       	rjmp	.+620    	; 0xd34 <_fpadd_parts+0x290>
     ac8:	84 30       	cpi	r24, 0x04	; 4
     aca:	59 f4       	brne	.+22     	; 0xae2 <_fpadd_parts+0x3e>
     acc:	94 30       	cpi	r25, 0x04	; 4
     ace:	09 f0       	breq	.+2      	; 0xad2 <_fpadd_parts+0x2e>
     ad0:	34 c1       	rjmp	.+616    	; 0xd3a <_fpadd_parts+0x296>
     ad2:	99 81       	ldd	r25, Y+1	; 0x01
     ad4:	11 96       	adiw	r26, 0x01	; 1
     ad6:	8c 91       	ld	r24, X
     ad8:	11 97       	sbiw	r26, 0x01	; 1
     ada:	98 17       	cp	r25, r24
     adc:	09 f0       	breq	.+2      	; 0xae0 <_fpadd_parts+0x3c>
     ade:	27 c1       	rjmp	.+590    	; 0xd2e <_fpadd_parts+0x28a>
     ae0:	2c c1       	rjmp	.+600    	; 0xd3a <_fpadd_parts+0x296>
     ae2:	94 30       	cpi	r25, 0x04	; 4
     ae4:	09 f4       	brne	.+2      	; 0xae8 <_fpadd_parts+0x44>
     ae6:	26 c1       	rjmp	.+588    	; 0xd34 <_fpadd_parts+0x290>
     ae8:	92 30       	cpi	r25, 0x02	; 2
     aea:	a9 f4       	brne	.+42     	; 0xb16 <_fpadd_parts+0x72>
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	09 f0       	breq	.+2      	; 0xaf2 <_fpadd_parts+0x4e>
     af0:	24 c1       	rjmp	.+584    	; 0xd3a <_fpadd_parts+0x296>
     af2:	ce 01       	movw	r24, r28
     af4:	28 e0       	ldi	r18, 0x08	; 8
     af6:	dc 01       	movw	r26, r24
     af8:	0d 90       	ld	r0, X+
     afa:	cd 01       	movw	r24, r26
     afc:	da 01       	movw	r26, r20
     afe:	0d 92       	st	X+, r0
     b00:	ad 01       	movw	r20, r26
     b02:	21 50       	subi	r18, 0x01	; 1
     b04:	c1 f7       	brne	.-16     	; 0xaf6 <_fpadd_parts+0x52>
     b06:	d4 01       	movw	r26, r8
     b08:	11 96       	adiw	r26, 0x01	; 1
     b0a:	8c 91       	ld	r24, X
     b0c:	11 97       	sbiw	r26, 0x01	; 1
     b0e:	99 81       	ldd	r25, Y+1	; 0x01
     b10:	89 23       	and	r24, r25
     b12:	81 83       	std	Z+1, r24	; 0x01
     b14:	11 c1       	rjmp	.+546    	; 0xd38 <_fpadd_parts+0x294>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	09 f4       	brne	.+2      	; 0xb1c <_fpadd_parts+0x78>
     b1a:	0c c1       	rjmp	.+536    	; 0xd34 <_fpadd_parts+0x290>
     b1c:	aa 80       	ldd	r10, Y+2	; 0x02
     b1e:	bb 80       	ldd	r11, Y+3	; 0x03
     b20:	db 01       	movw	r26, r22
     b22:	12 96       	adiw	r26, 0x02	; 2
     b24:	4d 91       	ld	r20, X+
     b26:	5c 91       	ld	r21, X
     b28:	13 97       	sbiw	r26, 0x03	; 3
     b2a:	cc 80       	ldd	r12, Y+4	; 0x04
     b2c:	dd 80       	ldd	r13, Y+5	; 0x05
     b2e:	ee 80       	ldd	r14, Y+6	; 0x06
     b30:	ff 80       	ldd	r15, Y+7	; 0x07
     b32:	14 96       	adiw	r26, 0x04	; 4
     b34:	0d 91       	ld	r16, X+
     b36:	1d 91       	ld	r17, X+
     b38:	2d 91       	ld	r18, X+
     b3a:	3c 91       	ld	r19, X
     b3c:	17 97       	sbiw	r26, 0x07	; 7
     b3e:	c5 01       	movw	r24, r10
     b40:	84 1b       	sub	r24, r20
     b42:	95 0b       	sbc	r25, r21
     b44:	dc 01       	movw	r26, r24
     b46:	97 ff       	sbrs	r25, 7
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <_fpadd_parts+0xae>
     b4a:	aa 27       	eor	r26, r26
     b4c:	bb 27       	eor	r27, r27
     b4e:	a8 1b       	sub	r26, r24
     b50:	b9 0b       	sbc	r27, r25
     b52:	a0 32       	cpi	r26, 0x20	; 32
     b54:	b1 05       	cpc	r27, r1
     b56:	0c f0       	brlt	.+2      	; 0xb5a <_fpadd_parts+0xb6>
     b58:	67 c0       	rjmp	.+206    	; 0xc28 <_fpadd_parts+0x184>
     b5a:	18 16       	cp	r1, r24
     b5c:	19 06       	cpc	r1, r25
     b5e:	84 f5       	brge	.+96     	; 0xbc0 <_fpadd_parts+0x11c>
     b60:	28 01       	movw	r4, r16
     b62:	39 01       	movw	r6, r18
     b64:	0a 2e       	mov	r0, r26
     b66:	04 c0       	rjmp	.+8      	; 0xb70 <_fpadd_parts+0xcc>
     b68:	76 94       	lsr	r7
     b6a:	67 94       	ror	r6
     b6c:	57 94       	ror	r5
     b6e:	47 94       	ror	r4
     b70:	0a 94       	dec	r0
     b72:	d2 f7       	brpl	.-12     	; 0xb68 <_fpadd_parts+0xc4>
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <_fpadd_parts+0xe2>
     b7e:	44 0f       	add	r20, r20
     b80:	55 1f       	adc	r21, r21
     b82:	66 1f       	adc	r22, r22
     b84:	77 1f       	adc	r23, r23
     b86:	aa 95       	dec	r26
     b88:	d2 f7       	brpl	.-12     	; 0xb7e <_fpadd_parts+0xda>
     b8a:	41 50       	subi	r20, 0x01	; 1
     b8c:	50 40       	sbci	r21, 0x00	; 0
     b8e:	60 40       	sbci	r22, 0x00	; 0
     b90:	70 40       	sbci	r23, 0x00	; 0
     b92:	40 23       	and	r20, r16
     b94:	51 23       	and	r21, r17
     b96:	62 23       	and	r22, r18
     b98:	73 23       	and	r23, r19
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <_fpadd_parts+0x10e>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	dc 01       	movw	r26, r24
     bb2:	8c 01       	movw	r16, r24
     bb4:	9d 01       	movw	r18, r26
     bb6:	04 29       	or	r16, r4
     bb8:	15 29       	or	r17, r5
     bba:	26 29       	or	r18, r6
     bbc:	37 29       	or	r19, r7
     bbe:	3f c0       	rjmp	.+126    	; 0xc3e <_fpadd_parts+0x19a>
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	e9 f1       	breq	.+122    	; 0xc3e <_fpadd_parts+0x19a>
     bc4:	aa 0e       	add	r10, r26
     bc6:	bb 1e       	adc	r11, r27
     bc8:	26 01       	movw	r4, r12
     bca:	37 01       	movw	r6, r14
     bcc:	0a 2e       	mov	r0, r26
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <_fpadd_parts+0x134>
     bd0:	76 94       	lsr	r7
     bd2:	67 94       	ror	r6
     bd4:	57 94       	ror	r5
     bd6:	47 94       	ror	r4
     bd8:	0a 94       	dec	r0
     bda:	d2 f7       	brpl	.-12     	; 0xbd0 <_fpadd_parts+0x12c>
     bdc:	41 e0       	ldi	r20, 0x01	; 1
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	04 c0       	rjmp	.+8      	; 0xbee <_fpadd_parts+0x14a>
     be6:	44 0f       	add	r20, r20
     be8:	55 1f       	adc	r21, r21
     bea:	66 1f       	adc	r22, r22
     bec:	77 1f       	adc	r23, r23
     bee:	aa 95       	dec	r26
     bf0:	d2 f7       	brpl	.-12     	; 0xbe6 <_fpadd_parts+0x142>
     bf2:	41 50       	subi	r20, 0x01	; 1
     bf4:	50 40       	sbci	r21, 0x00	; 0
     bf6:	60 40       	sbci	r22, 0x00	; 0
     bf8:	70 40       	sbci	r23, 0x00	; 0
     bfa:	4c 21       	and	r20, r12
     bfc:	5d 21       	and	r21, r13
     bfe:	6e 21       	and	r22, r14
     c00:	7f 21       	and	r23, r15
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	a0 e0       	ldi	r26, 0x00	; 0
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	41 15       	cp	r20, r1
     c0c:	51 05       	cpc	r21, r1
     c0e:	61 05       	cpc	r22, r1
     c10:	71 05       	cpc	r23, r1
     c12:	19 f4       	brne	.+6      	; 0xc1a <_fpadd_parts+0x176>
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	dc 01       	movw	r26, r24
     c1a:	6c 01       	movw	r12, r24
     c1c:	7d 01       	movw	r14, r26
     c1e:	c4 28       	or	r12, r4
     c20:	d5 28       	or	r13, r5
     c22:	e6 28       	or	r14, r6
     c24:	f7 28       	or	r15, r7
     c26:	0b c0       	rjmp	.+22     	; 0xc3e <_fpadd_parts+0x19a>
     c28:	4a 15       	cp	r20, r10
     c2a:	5b 05       	cpc	r21, r11
     c2c:	24 f4       	brge	.+8      	; 0xc36 <_fpadd_parts+0x192>
     c2e:	00 e0       	ldi	r16, 0x00	; 0
     c30:	10 e0       	ldi	r17, 0x00	; 0
     c32:	98 01       	movw	r18, r16
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <_fpadd_parts+0x19a>
     c36:	5a 01       	movw	r10, r20
     c38:	cc 24       	eor	r12, r12
     c3a:	dd 24       	eor	r13, r13
     c3c:	76 01       	movw	r14, r12
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	d4 01       	movw	r26, r8
     c42:	11 96       	adiw	r26, 0x01	; 1
     c44:	9c 91       	ld	r25, X
     c46:	11 97       	sbiw	r26, 0x01	; 1
     c48:	89 17       	cp	r24, r25
     c4a:	09 f4       	brne	.+2      	; 0xc4e <_fpadd_parts+0x1aa>
     c4c:	45 c0       	rjmp	.+138    	; 0xcd8 <_fpadd_parts+0x234>
     c4e:	88 23       	and	r24, r24
     c50:	29 f0       	breq	.+10     	; 0xc5c <_fpadd_parts+0x1b8>
     c52:	0c 19       	sub	r16, r12
     c54:	1d 09       	sbc	r17, r13
     c56:	2e 09       	sbc	r18, r14
     c58:	3f 09       	sbc	r19, r15
     c5a:	08 c0       	rjmp	.+16     	; 0xc6c <_fpadd_parts+0x1c8>
     c5c:	d7 01       	movw	r26, r14
     c5e:	c6 01       	movw	r24, r12
     c60:	80 1b       	sub	r24, r16
     c62:	91 0b       	sbc	r25, r17
     c64:	a2 0b       	sbc	r26, r18
     c66:	b3 0b       	sbc	r27, r19
     c68:	8c 01       	movw	r16, r24
     c6a:	9d 01       	movw	r18, r26
     c6c:	37 fd       	sbrc	r19, 7
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <_fpadd_parts+0x1d4>
     c70:	11 82       	std	Z+1, r1	; 0x01
     c72:	b3 82       	std	Z+3, r11	; 0x03
     c74:	a2 82       	std	Z+2, r10	; 0x02
     c76:	0b c0       	rjmp	.+22     	; 0xc8e <_fpadd_parts+0x1ea>
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	81 83       	std	Z+1, r24	; 0x01
     c7c:	b3 82       	std	Z+3, r11	; 0x03
     c7e:	a2 82       	std	Z+2, r10	; 0x02
     c80:	30 95       	com	r19
     c82:	20 95       	com	r18
     c84:	10 95       	com	r17
     c86:	01 95       	neg	r16
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	2f 4f       	sbci	r18, 0xFF	; 255
     c8c:	3f 4f       	sbci	r19, 0xFF	; 255
     c8e:	04 83       	std	Z+4, r16	; 0x04
     c90:	15 83       	std	Z+5, r17	; 0x05
     c92:	26 83       	std	Z+6, r18	; 0x06
     c94:	37 83       	std	Z+7, r19	; 0x07
     c96:	0d c0       	rjmp	.+26     	; 0xcb2 <_fpadd_parts+0x20e>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	aa 1f       	adc	r26, r26
     c9e:	bb 1f       	adc	r27, r27
     ca0:	84 83       	std	Z+4, r24	; 0x04
     ca2:	95 83       	std	Z+5, r25	; 0x05
     ca4:	a6 83       	std	Z+6, r26	; 0x06
     ca6:	b7 83       	std	Z+7, r27	; 0x07
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	93 83       	std	Z+3, r25	; 0x03
     cb0:	82 83       	std	Z+2, r24	; 0x02
     cb2:	84 81       	ldd	r24, Z+4	; 0x04
     cb4:	95 81       	ldd	r25, Z+5	; 0x05
     cb6:	a6 81       	ldd	r26, Z+6	; 0x06
     cb8:	b7 81       	ldd	r27, Z+7	; 0x07
     cba:	ac 01       	movw	r20, r24
     cbc:	bd 01       	movw	r22, r26
     cbe:	41 50       	subi	r20, 0x01	; 1
     cc0:	50 40       	sbci	r21, 0x00	; 0
     cc2:	60 40       	sbci	r22, 0x00	; 0
     cc4:	70 40       	sbci	r23, 0x00	; 0
     cc6:	4f 3f       	cpi	r20, 0xFF	; 255
     cc8:	2f ef       	ldi	r18, 0xFF	; 255
     cca:	52 07       	cpc	r21, r18
     ccc:	2f ef       	ldi	r18, 0xFF	; 255
     cce:	62 07       	cpc	r22, r18
     cd0:	2f e3       	ldi	r18, 0x3F	; 63
     cd2:	72 07       	cpc	r23, r18
     cd4:	08 f3       	brcs	.-62     	; 0xc98 <_fpadd_parts+0x1f4>
     cd6:	0b c0       	rjmp	.+22     	; 0xcee <_fpadd_parts+0x24a>
     cd8:	81 83       	std	Z+1, r24	; 0x01
     cda:	b3 82       	std	Z+3, r11	; 0x03
     cdc:	a2 82       	std	Z+2, r10	; 0x02
     cde:	0c 0d       	add	r16, r12
     ce0:	1d 1d       	adc	r17, r13
     ce2:	2e 1d       	adc	r18, r14
     ce4:	3f 1d       	adc	r19, r15
     ce6:	04 83       	std	Z+4, r16	; 0x04
     ce8:	15 83       	std	Z+5, r17	; 0x05
     cea:	26 83       	std	Z+6, r18	; 0x06
     cec:	37 83       	std	Z+7, r19	; 0x07
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	80 83       	st	Z, r24
     cf2:	44 81       	ldd	r20, Z+4	; 0x04
     cf4:	55 81       	ldd	r21, Z+5	; 0x05
     cf6:	66 81       	ldd	r22, Z+6	; 0x06
     cf8:	77 81       	ldd	r23, Z+7	; 0x07
     cfa:	77 ff       	sbrs	r23, 7
     cfc:	1d c0       	rjmp	.+58     	; 0xd38 <_fpadd_parts+0x294>
     cfe:	db 01       	movw	r26, r22
     d00:	ca 01       	movw	r24, r20
     d02:	81 70       	andi	r24, 0x01	; 1
     d04:	90 70       	andi	r25, 0x00	; 0
     d06:	a0 70       	andi	r26, 0x00	; 0
     d08:	b0 70       	andi	r27, 0x00	; 0
     d0a:	76 95       	lsr	r23
     d0c:	67 95       	ror	r22
     d0e:	57 95       	ror	r21
     d10:	47 95       	ror	r20
     d12:	84 2b       	or	r24, r20
     d14:	95 2b       	or	r25, r21
     d16:	a6 2b       	or	r26, r22
     d18:	b7 2b       	or	r27, r23
     d1a:	84 83       	std	Z+4, r24	; 0x04
     d1c:	95 83       	std	Z+5, r25	; 0x05
     d1e:	a6 83       	std	Z+6, r26	; 0x06
     d20:	b7 83       	std	Z+7, r27	; 0x07
     d22:	82 81       	ldd	r24, Z+2	; 0x02
     d24:	93 81       	ldd	r25, Z+3	; 0x03
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	93 83       	std	Z+3, r25	; 0x03
     d2a:	82 83       	std	Z+2, r24	; 0x02
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <_fpadd_parts+0x294>
     d2e:	c6 e1       	ldi	r28, 0x16	; 22
     d30:	d1 e0       	ldi	r29, 0x01	; 1
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <_fpadd_parts+0x296>
     d34:	e4 01       	movw	r28, r8
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <_fpadd_parts+0x296>
     d38:	ef 01       	movw	r28, r30
     d3a:	ce 01       	movw	r24, r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	e0 e1       	ldi	r30, 0x10	; 16
     d42:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__epilogue_restores__+0x4>

00000d46 <__addsf3>:
     d46:	a0 e2       	ldi	r26, 0x20	; 32
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e9 ea       	ldi	r30, 0xA9	; 169
     d4c:	f6 e0       	ldi	r31, 0x06	; 6
     d4e:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__prologue_saves__+0x20>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	8d 83       	std	Y+5, r24	; 0x05
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	af 83       	std	Y+7, r26	; 0x07
     d5c:	b8 87       	std	Y+8, r27	; 0x08
     d5e:	29 83       	std	Y+1, r18	; 0x01
     d60:	3a 83       	std	Y+2, r19	; 0x02
     d62:	4b 83       	std	Y+3, r20	; 0x03
     d64:	5c 83       	std	Y+4, r21	; 0x04
     d66:	ce 01       	movw	r24, r28
     d68:	05 96       	adiw	r24, 0x05	; 5
     d6a:	be 01       	movw	r22, r28
     d6c:	67 5e       	subi	r22, 0xE7	; 231
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	0e 94 39 0a 	call	0x1472	; 0x1472 <__unpack_f>
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	be 01       	movw	r22, r28
     d7a:	6f 5e       	subi	r22, 0xEF	; 239
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	0e 94 39 0a 	call	0x1472	; 0x1472 <__unpack_f>
     d82:	ce 01       	movw	r24, r28
     d84:	49 96       	adiw	r24, 0x19	; 25
     d86:	be 01       	movw	r22, r28
     d88:	6f 5e       	subi	r22, 0xEF	; 239
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	ae 01       	movw	r20, r28
     d8e:	47 5f       	subi	r20, 0xF7	; 247
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_fpadd_parts>
     d96:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__pack_f>
     d9a:	46 2f       	mov	r20, r22
     d9c:	57 2f       	mov	r21, r23
     d9e:	68 2f       	mov	r22, r24
     da0:	79 2f       	mov	r23, r25
     da2:	cb 01       	movw	r24, r22
     da4:	ba 01       	movw	r22, r20
     da6:	a0 96       	adiw	r28, 0x20	; 32
     da8:	e2 e0       	ldi	r30, 0x02	; 2
     daa:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__epilogue_restores__+0x20>

00000dae <__subsf3>:
     dae:	a0 e2       	ldi	r26, 0x20	; 32
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ed ed       	ldi	r30, 0xDD	; 221
     db4:	f6 e0       	ldi	r31, 0x06	; 6
     db6:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__prologue_saves__+0x20>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	8d 83       	std	Y+5, r24	; 0x05
     dc0:	9e 83       	std	Y+6, r25	; 0x06
     dc2:	af 83       	std	Y+7, r26	; 0x07
     dc4:	b8 87       	std	Y+8, r27	; 0x08
     dc6:	29 83       	std	Y+1, r18	; 0x01
     dc8:	3a 83       	std	Y+2, r19	; 0x02
     dca:	4b 83       	std	Y+3, r20	; 0x03
     dcc:	5c 83       	std	Y+4, r21	; 0x04
     dce:	ce 01       	movw	r24, r28
     dd0:	05 96       	adiw	r24, 0x05	; 5
     dd2:	be 01       	movw	r22, r28
     dd4:	67 5e       	subi	r22, 0xE7	; 231
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	0e 94 39 0a 	call	0x1472	; 0x1472 <__unpack_f>
     ddc:	ce 01       	movw	r24, r28
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	be 01       	movw	r22, r28
     de2:	6f 5e       	subi	r22, 0xEF	; 239
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	0e 94 39 0a 	call	0x1472	; 0x1472 <__unpack_f>
     dea:	8a 89       	ldd	r24, Y+18	; 0x12
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	89 27       	eor	r24, r25
     df0:	8a 8b       	std	Y+18, r24	; 0x12
     df2:	ce 01       	movw	r24, r28
     df4:	49 96       	adiw	r24, 0x19	; 25
     df6:	be 01       	movw	r22, r28
     df8:	6f 5e       	subi	r22, 0xEF	; 239
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	ae 01       	movw	r20, r28
     dfe:	47 5f       	subi	r20, 0xF7	; 247
     e00:	5f 4f       	sbci	r21, 0xFF	; 255
     e02:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_fpadd_parts>
     e06:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__pack_f>
     e0a:	46 2f       	mov	r20, r22
     e0c:	57 2f       	mov	r21, r23
     e0e:	68 2f       	mov	r22, r24
     e10:	79 2f       	mov	r23, r25
     e12:	cb 01       	movw	r24, r22
     e14:	ba 01       	movw	r22, r20
     e16:	a0 96       	adiw	r28, 0x20	; 32
     e18:	e2 e0       	ldi	r30, 0x02	; 2
     e1a:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__epilogue_restores__+0x20>

00000e1e <__mulsf3>:
     e1e:	a0 e2       	ldi	r26, 0x20	; 32
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e1       	ldi	r30, 0x15	; 21
     e24:	f7 e0       	ldi	r31, 0x07	; 7
     e26:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__prologue_saves__+0x4>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	8d 83       	std	Y+5, r24	; 0x05
     e30:	9e 83       	std	Y+6, r25	; 0x06
     e32:	af 83       	std	Y+7, r26	; 0x07
     e34:	b8 87       	std	Y+8, r27	; 0x08
     e36:	29 83       	std	Y+1, r18	; 0x01
     e38:	3a 83       	std	Y+2, r19	; 0x02
     e3a:	4b 83       	std	Y+3, r20	; 0x03
     e3c:	5c 83       	std	Y+4, r21	; 0x04
     e3e:	ce 01       	movw	r24, r28
     e40:	05 96       	adiw	r24, 0x05	; 5
     e42:	be 01       	movw	r22, r28
     e44:	67 5e       	subi	r22, 0xE7	; 231
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	0e 94 39 0a 	call	0x1472	; 0x1472 <__unpack_f>
     e4c:	ce 01       	movw	r24, r28
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	be 01       	movw	r22, r28
     e52:	6f 5e       	subi	r22, 0xEF	; 239
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	0e 94 39 0a 	call	0x1472	; 0x1472 <__unpack_f>
     e5a:	99 8d       	ldd	r25, Y+25	; 0x19
     e5c:	92 30       	cpi	r25, 0x02	; 2
     e5e:	78 f0       	brcs	.+30     	; 0xe7e <__mulsf3+0x60>
     e60:	89 89       	ldd	r24, Y+17	; 0x11
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	c0 f0       	brcs	.+48     	; 0xe96 <__mulsf3+0x78>
     e66:	94 30       	cpi	r25, 0x04	; 4
     e68:	19 f4       	brne	.+6      	; 0xe70 <__mulsf3+0x52>
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	41 f4       	brne	.+16     	; 0xe7e <__mulsf3+0x60>
     e6e:	ca c0       	rjmp	.+404    	; 0x1004 <__mulsf3+0x1e6>
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	19 f4       	brne	.+6      	; 0xe7a <__mulsf3+0x5c>
     e74:	92 30       	cpi	r25, 0x02	; 2
     e76:	79 f4       	brne	.+30     	; 0xe96 <__mulsf3+0x78>
     e78:	c5 c0       	rjmp	.+394    	; 0x1004 <__mulsf3+0x1e6>
     e7a:	92 30       	cpi	r25, 0x02	; 2
     e7c:	51 f4       	brne	.+20     	; 0xe92 <__mulsf3+0x74>
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e82:	9a 89       	ldd	r25, Y+18	; 0x12
     e84:	29 17       	cp	r18, r25
     e86:	09 f4       	brne	.+2      	; 0xe8a <__mulsf3+0x6c>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	8a 8f       	std	Y+26, r24	; 0x1a
     e8c:	ce 01       	movw	r24, r28
     e8e:	49 96       	adiw	r24, 0x19	; 25
     e90:	bb c0       	rjmp	.+374    	; 0x1008 <__mulsf3+0x1ea>
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	51 f4       	brne	.+20     	; 0xeaa <__mulsf3+0x8c>
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e9a:	9a 89       	ldd	r25, Y+18	; 0x12
     e9c:	29 17       	cp	r18, r25
     e9e:	09 f4       	brne	.+2      	; 0xea2 <__mulsf3+0x84>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	8a 8b       	std	Y+18, r24	; 0x12
     ea4:	ce 01       	movw	r24, r28
     ea6:	41 96       	adiw	r24, 0x11	; 17
     ea8:	af c0       	rjmp	.+350    	; 0x1008 <__mulsf3+0x1ea>
     eaa:	4d 8c       	ldd	r4, Y+29	; 0x1d
     eac:	5e 8c       	ldd	r5, Y+30	; 0x1e
     eae:	6f 8c       	ldd	r6, Y+31	; 0x1f
     eb0:	78 a0       	lds	r23, 0x88
     eb2:	0d 89       	ldd	r16, Y+21	; 0x15
     eb4:	1e 89       	ldd	r17, Y+22	; 0x16
     eb6:	2f 89       	ldd	r18, Y+23	; 0x17
     eb8:	38 8d       	ldd	r19, Y+24	; 0x18
     eba:	e0 e2       	ldi	r30, 0x20	; 32
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	ba 01       	movw	r22, r20
     ec4:	88 24       	eor	r8, r8
     ec6:	99 24       	eor	r9, r9
     ec8:	54 01       	movw	r10, r8
     eca:	cc 24       	eor	r12, r12
     ecc:	dd 24       	eor	r13, r13
     ece:	76 01       	movw	r14, r12
     ed0:	c2 01       	movw	r24, r4
     ed2:	81 70       	andi	r24, 0x01	; 1
     ed4:	90 70       	andi	r25, 0x00	; 0
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	d1 f0       	breq	.+52     	; 0xf0e <__mulsf3+0xf0>
     eda:	c0 0e       	add	r12, r16
     edc:	d1 1e       	adc	r13, r17
     ede:	e2 1e       	adc	r14, r18
     ee0:	f3 1e       	adc	r15, r19
     ee2:	db 01       	movw	r26, r22
     ee4:	ca 01       	movw	r24, r20
     ee6:	88 0d       	add	r24, r8
     ee8:	99 1d       	adc	r25, r9
     eea:	aa 1d       	adc	r26, r10
     eec:	bb 1d       	adc	r27, r11
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	c0 16       	cp	r12, r16
     ef8:	d1 06       	cpc	r13, r17
     efa:	e2 06       	cpc	r14, r18
     efc:	f3 06       	cpc	r15, r19
     efe:	18 f0       	brcs	.+6      	; 0xf06 <__mulsf3+0xe8>
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	ba 01       	movw	r22, r20
     f06:	48 0f       	add	r20, r24
     f08:	59 1f       	adc	r21, r25
     f0a:	6a 1f       	adc	r22, r26
     f0c:	7b 1f       	adc	r23, r27
     f0e:	88 0c       	add	r8, r8
     f10:	99 1c       	adc	r9, r9
     f12:	aa 1c       	adc	r10, r10
     f14:	bb 1c       	adc	r11, r11
     f16:	37 ff       	sbrs	r19, 7
     f18:	08 c0       	rjmp	.+16     	; 0xf2a <__mulsf3+0x10c>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a0 e0       	ldi	r26, 0x00	; 0
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	88 2a       	or	r8, r24
     f24:	99 2a       	or	r9, r25
     f26:	aa 2a       	or	r10, r26
     f28:	bb 2a       	or	r11, r27
     f2a:	00 0f       	add	r16, r16
     f2c:	11 1f       	adc	r17, r17
     f2e:	22 1f       	adc	r18, r18
     f30:	33 1f       	adc	r19, r19
     f32:	76 94       	lsr	r7
     f34:	67 94       	ror	r6
     f36:	57 94       	ror	r5
     f38:	47 94       	ror	r4
     f3a:	31 97       	sbiw	r30, 0x01	; 1
     f3c:	49 f6       	brne	.-110    	; 0xed0 <__mulsf3+0xb2>
     f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f42:	2b 89       	ldd	r18, Y+19	; 0x13
     f44:	3c 89       	ldd	r19, Y+20	; 0x14
     f46:	82 0f       	add	r24, r18
     f48:	93 1f       	adc	r25, r19
     f4a:	02 96       	adiw	r24, 0x02	; 2
     f4c:	9c 87       	std	Y+12, r25	; 0x0c
     f4e:	8b 87       	std	Y+11, r24	; 0x0b
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	2a 8d       	ldd	r18, Y+26	; 0x1a
     f54:	9a 89       	ldd	r25, Y+18	; 0x12
     f56:	29 17       	cp	r18, r25
     f58:	09 f4       	brne	.+2      	; 0xf5c <__mulsf3+0x13e>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	8a 87       	std	Y+10, r24	; 0x0a
     f5e:	2b 85       	ldd	r18, Y+11	; 0x0b
     f60:	3c 85       	ldd	r19, Y+12	; 0x0c
     f62:	17 c0       	rjmp	.+46     	; 0xf92 <__mulsf3+0x174>
     f64:	ca 01       	movw	r24, r20
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	61 f0       	breq	.+24     	; 0xf86 <__mulsf3+0x168>
     f6e:	f6 94       	lsr	r15
     f70:	e7 94       	ror	r14
     f72:	d7 94       	ror	r13
     f74:	c7 94       	ror	r12
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a0 e0       	ldi	r26, 0x00	; 0
     f7c:	b0 e8       	ldi	r27, 0x80	; 128
     f7e:	c8 2a       	or	r12, r24
     f80:	d9 2a       	or	r13, r25
     f82:	ea 2a       	or	r14, r26
     f84:	fb 2a       	or	r15, r27
     f86:	76 95       	lsr	r23
     f88:	67 95       	ror	r22
     f8a:	57 95       	ror	r21
     f8c:	47 95       	ror	r20
     f8e:	2f 5f       	subi	r18, 0xFF	; 255
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	77 fd       	sbrc	r23, 7
     f94:	e7 cf       	rjmp	.-50     	; 0xf64 <__mulsf3+0x146>
     f96:	c9 01       	movw	r24, r18
     f98:	0b c0       	rjmp	.+22     	; 0xfb0 <__mulsf3+0x192>
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	66 1f       	adc	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	f7 fc       	sbrc	r15, 7
     fa4:	41 60       	ori	r20, 0x01	; 1
     fa6:	cc 0c       	add	r12, r12
     fa8:	dd 1c       	adc	r13, r13
     faa:	ee 1c       	adc	r14, r14
     fac:	ff 1c       	adc	r15, r15
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	40 30       	cpi	r20, 0x00	; 0
     fb2:	a0 e0       	ldi	r26, 0x00	; 0
     fb4:	5a 07       	cpc	r21, r26
     fb6:	a0 e0       	ldi	r26, 0x00	; 0
     fb8:	6a 07       	cpc	r22, r26
     fba:	a0 e4       	ldi	r26, 0x40	; 64
     fbc:	7a 07       	cpc	r23, r26
     fbe:	68 f3       	brcs	.-38     	; 0xf9a <__mulsf3+0x17c>
     fc0:	8b 87       	std	Y+11, r24	; 0x0b
     fc2:	9c 87       	std	Y+12, r25	; 0x0c
     fc4:	db 01       	movw	r26, r22
     fc6:	ca 01       	movw	r24, r20
     fc8:	8f 77       	andi	r24, 0x7F	; 127
     fca:	90 70       	andi	r25, 0x00	; 0
     fcc:	a0 70       	andi	r26, 0x00	; 0
     fce:	b0 70       	andi	r27, 0x00	; 0
     fd0:	80 34       	cpi	r24, 0x40	; 64
     fd2:	91 05       	cpc	r25, r1
     fd4:	a1 05       	cpc	r26, r1
     fd6:	b1 05       	cpc	r27, r1
     fd8:	61 f4       	brne	.+24     	; 0xff2 <__mulsf3+0x1d4>
     fda:	47 fd       	sbrc	r20, 7
     fdc:	0a c0       	rjmp	.+20     	; 0xff2 <__mulsf3+0x1d4>
     fde:	c1 14       	cp	r12, r1
     fe0:	d1 04       	cpc	r13, r1
     fe2:	e1 04       	cpc	r14, r1
     fe4:	f1 04       	cpc	r15, r1
     fe6:	29 f0       	breq	.+10     	; 0xff2 <__mulsf3+0x1d4>
     fe8:	40 5c       	subi	r20, 0xC0	; 192
     fea:	5f 4f       	sbci	r21, 0xFF	; 255
     fec:	6f 4f       	sbci	r22, 0xFF	; 255
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	40 78       	andi	r20, 0x80	; 128
     ff2:	4d 87       	std	Y+13, r20	; 0x0d
     ff4:	5e 87       	std	Y+14, r21	; 0x0e
     ff6:	6f 87       	std	Y+15, r22	; 0x0f
     ff8:	78 8b       	std	Y+16, r23	; 0x10
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	89 87       	std	Y+9, r24	; 0x09
     ffe:	ce 01       	movw	r24, r28
    1000:	09 96       	adiw	r24, 0x09	; 9
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <__mulsf3+0x1ea>
    1004:	86 e1       	ldi	r24, 0x16	; 22
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__pack_f>
    100c:	46 2f       	mov	r20, r22
    100e:	57 2f       	mov	r21, r23
    1010:	68 2f       	mov	r22, r24
    1012:	79 2f       	mov	r23, r25
    1014:	cb 01       	movw	r24, r22
    1016:	ba 01       	movw	r22, r20
    1018:	a0 96       	adiw	r28, 0x20	; 32
    101a:	e0 e1       	ldi	r30, 0x10	; 16
    101c:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__epilogue_restores__+0x4>

00001020 <__gesf2>:
    1020:	a8 e1       	ldi	r26, 0x18	; 24
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e6 e1       	ldi	r30, 0x16	; 22
    1026:	f8 e0       	ldi	r31, 0x08	; 8
    1028:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__prologue_saves__+0x20>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	8d 83       	std	Y+5, r24	; 0x05
    1032:	9e 83       	std	Y+6, r25	; 0x06
    1034:	af 83       	std	Y+7, r26	; 0x07
    1036:	b8 87       	std	Y+8, r27	; 0x08
    1038:	29 83       	std	Y+1, r18	; 0x01
    103a:	3a 83       	std	Y+2, r19	; 0x02
    103c:	4b 83       	std	Y+3, r20	; 0x03
    103e:	5c 83       	std	Y+4, r21	; 0x04
    1040:	ce 01       	movw	r24, r28
    1042:	05 96       	adiw	r24, 0x05	; 5
    1044:	be 01       	movw	r22, r28
    1046:	6f 5e       	subi	r22, 0xEF	; 239
    1048:	7f 4f       	sbci	r23, 0xFF	; 255
    104a:	0e 94 39 0a 	call	0x1472	; 0x1472 <__unpack_f>
    104e:	ce 01       	movw	r24, r28
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	be 01       	movw	r22, r28
    1054:	67 5f       	subi	r22, 0xF7	; 247
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	0e 94 39 0a 	call	0x1472	; 0x1472 <__unpack_f>
    105c:	89 89       	ldd	r24, Y+17	; 0x11
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	58 f0       	brcs	.+22     	; 0x1078 <__gesf2+0x58>
    1062:	89 85       	ldd	r24, Y+9	; 0x09
    1064:	82 30       	cpi	r24, 0x02	; 2
    1066:	40 f0       	brcs	.+16     	; 0x1078 <__gesf2+0x58>
    1068:	ce 01       	movw	r24, r28
    106a:	41 96       	adiw	r24, 0x11	; 17
    106c:	be 01       	movw	r22, r28
    106e:	67 5f       	subi	r22, 0xF7	; 247
    1070:	7f 4f       	sbci	r23, 0xFF	; 255
    1072:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__fpcmp_parts_f>
    1076:	01 c0       	rjmp	.+2      	; 0x107a <__gesf2+0x5a>
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	68 96       	adiw	r28, 0x18	; 24
    107c:	e2 e0       	ldi	r30, 0x02	; 2
    107e:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__epilogue_restores__+0x20>

00001082 <__fixsfsi>:
    1082:	ac e0       	ldi	r26, 0x0C	; 12
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e7 e4       	ldi	r30, 0x47	; 71
    1088:	f8 e0       	ldi	r31, 0x08	; 8
    108a:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__prologue_saves__+0x1c>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	ab 83       	std	Y+3, r26	; 0x03
    1098:	bc 83       	std	Y+4, r27	; 0x04
    109a:	ce 01       	movw	r24, r28
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	be 01       	movw	r22, r28
    10a0:	6b 5f       	subi	r22, 0xFB	; 251
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	0e 94 39 0a 	call	0x1472	; 0x1472 <__unpack_f>
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
    10aa:	82 30       	cpi	r24, 0x02	; 2
    10ac:	69 f1       	breq	.+90     	; 0x1108 <__stack+0x9>
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	58 f1       	brcs	.+86     	; 0x1108 <__stack+0x9>
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	39 f0       	breq	.+14     	; 0x10c4 <__fixsfsi+0x42>
    10b6:	2f 81       	ldd	r18, Y+7	; 0x07
    10b8:	38 85       	ldd	r19, Y+8	; 0x08
    10ba:	37 fd       	sbrc	r19, 7
    10bc:	25 c0       	rjmp	.+74     	; 0x1108 <__stack+0x9>
    10be:	2f 31       	cpi	r18, 0x1F	; 31
    10c0:	31 05       	cpc	r19, r1
    10c2:	44 f0       	brlt	.+16     	; 0x10d4 <__fixsfsi+0x52>
    10c4:	8e 81       	ldd	r24, Y+6	; 0x06
    10c6:	88 23       	and	r24, r24
    10c8:	19 f1       	breq	.+70     	; 0x1110 <__stack+0x11>
    10ca:	00 e0       	ldi	r16, 0x00	; 0
    10cc:	10 e0       	ldi	r17, 0x00	; 0
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e8       	ldi	r19, 0x80	; 128
    10d2:	22 c0       	rjmp	.+68     	; 0x1118 <__stack+0x19>
    10d4:	8e e1       	ldi	r24, 0x1E	; 30
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	82 1b       	sub	r24, r18
    10da:	93 0b       	sbc	r25, r19
    10dc:	09 85       	ldd	r16, Y+9	; 0x09
    10de:	1a 85       	ldd	r17, Y+10	; 0x0a
    10e0:	2b 85       	ldd	r18, Y+11	; 0x0b
    10e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    10e4:	04 c0       	rjmp	.+8      	; 0x10ee <__fixsfsi+0x6c>
    10e6:	36 95       	lsr	r19
    10e8:	27 95       	ror	r18
    10ea:	17 95       	ror	r17
    10ec:	07 95       	ror	r16
    10ee:	8a 95       	dec	r24
    10f0:	d2 f7       	brpl	.-12     	; 0x10e6 <__fixsfsi+0x64>
    10f2:	8e 81       	ldd	r24, Y+6	; 0x06
    10f4:	88 23       	and	r24, r24
    10f6:	81 f0       	breq	.+32     	; 0x1118 <__stack+0x19>
    10f8:	30 95       	com	r19
    10fa:	20 95       	com	r18
    10fc:	10 95       	com	r17
    10fe:	01 95       	neg	r16
    1100:	1f 4f       	sbci	r17, 0xFF	; 255
    1102:	2f 4f       	sbci	r18, 0xFF	; 255
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <__stack+0x19>
    1108:	00 e0       	ldi	r16, 0x00	; 0
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	98 01       	movw	r18, r16
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <__stack+0x19>
    1110:	0f ef       	ldi	r16, 0xFF	; 255
    1112:	1f ef       	ldi	r17, 0xFF	; 255
    1114:	2f ef       	ldi	r18, 0xFF	; 255
    1116:	3f e7       	ldi	r19, 0x7F	; 127
    1118:	b8 01       	movw	r22, r16
    111a:	c9 01       	movw	r24, r18
    111c:	2c 96       	adiw	r28, 0x0c	; 12
    111e:	e4 e0       	ldi	r30, 0x04	; 4
    1120:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__epilogue_restores__+0x1c>

00001124 <__floatunsisf>:
    1124:	a8 e0       	ldi	r26, 0x08	; 8
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e8 e9       	ldi	r30, 0x98	; 152
    112a:	f8 e0       	ldi	r31, 0x08	; 8
    112c:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__+0x14>
    1130:	6b 01       	movw	r12, r22
    1132:	7c 01       	movw	r14, r24
    1134:	1a 82       	std	Y+2, r1	; 0x02
    1136:	61 15       	cp	r22, r1
    1138:	71 05       	cpc	r23, r1
    113a:	81 05       	cpc	r24, r1
    113c:	91 05       	cpc	r25, r1
    113e:	19 f4       	brne	.+6      	; 0x1146 <__floatunsisf+0x22>
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	5e c0       	rjmp	.+188    	; 0x1202 <__floatunsisf+0xde>
    1146:	83 e0       	ldi	r24, 0x03	; 3
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	0e e1       	ldi	r16, 0x1E	; 30
    114c:	10 e0       	ldi	r17, 0x00	; 0
    114e:	1c 83       	std	Y+4, r17	; 0x04
    1150:	0b 83       	std	Y+3, r16	; 0x03
    1152:	cd 82       	std	Y+5, r12	; 0x05
    1154:	de 82       	std	Y+6, r13	; 0x06
    1156:	ef 82       	std	Y+7, r14	; 0x07
    1158:	f8 86       	std	Y+8, r15	; 0x08
    115a:	c7 01       	movw	r24, r14
    115c:	b6 01       	movw	r22, r12
    115e:	0e 94 0f 09 	call	0x121e	; 0x121e <__clzsi2>
    1162:	9c 01       	movw	r18, r24
    1164:	21 50       	subi	r18, 0x01	; 1
    1166:	30 40       	sbci	r19, 0x00	; 0
    1168:	37 ff       	sbrs	r19, 7
    116a:	38 c0       	rjmp	.+112    	; 0x11dc <__floatunsisf+0xb8>
    116c:	ee 27       	eor	r30, r30
    116e:	ff 27       	eor	r31, r31
    1170:	e2 1b       	sub	r30, r18
    1172:	f3 0b       	sbc	r31, r19
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a0 e0       	ldi	r26, 0x00	; 0
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	0e 2e       	mov	r0, r30
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <__floatunsisf+0x64>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	aa 1f       	adc	r26, r26
    1186:	bb 1f       	adc	r27, r27
    1188:	0a 94       	dec	r0
    118a:	d2 f7       	brpl	.-12     	; 0x1180 <__floatunsisf+0x5c>
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	a1 09       	sbc	r26, r1
    1190:	b1 09       	sbc	r27, r1
    1192:	8c 21       	and	r24, r12
    1194:	9d 21       	and	r25, r13
    1196:	ae 21       	and	r26, r14
    1198:	bf 21       	and	r27, r15
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	a1 05       	cpc	r26, r1
    11a6:	b1 05       	cpc	r27, r1
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <__floatunsisf+0x8c>
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	ba 01       	movw	r22, r20
    11b0:	04 c0       	rjmp	.+8      	; 0x11ba <__floatunsisf+0x96>
    11b2:	f6 94       	lsr	r15
    11b4:	e7 94       	ror	r14
    11b6:	d7 94       	ror	r13
    11b8:	c7 94       	ror	r12
    11ba:	ea 95       	dec	r30
    11bc:	d2 f7       	brpl	.-12     	; 0x11b2 <__floatunsisf+0x8e>
    11be:	c4 2a       	or	r12, r20
    11c0:	d5 2a       	or	r13, r21
    11c2:	e6 2a       	or	r14, r22
    11c4:	f7 2a       	or	r15, r23
    11c6:	cd 82       	std	Y+5, r12	; 0x05
    11c8:	de 82       	std	Y+6, r13	; 0x06
    11ca:	ef 82       	std	Y+7, r14	; 0x07
    11cc:	f8 86       	std	Y+8, r15	; 0x08
    11ce:	8e e1       	ldi	r24, 0x1E	; 30
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	82 1b       	sub	r24, r18
    11d4:	93 0b       	sbc	r25, r19
    11d6:	9c 83       	std	Y+4, r25	; 0x04
    11d8:	8b 83       	std	Y+3, r24	; 0x03
    11da:	13 c0       	rjmp	.+38     	; 0x1202 <__floatunsisf+0xde>
    11dc:	21 15       	cp	r18, r1
    11de:	31 05       	cpc	r19, r1
    11e0:	81 f0       	breq	.+32     	; 0x1202 <__floatunsisf+0xde>
    11e2:	02 2e       	mov	r0, r18
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <__floatunsisf+0xca>
    11e6:	cc 0c       	add	r12, r12
    11e8:	dd 1c       	adc	r13, r13
    11ea:	ee 1c       	adc	r14, r14
    11ec:	ff 1c       	adc	r15, r15
    11ee:	0a 94       	dec	r0
    11f0:	d2 f7       	brpl	.-12     	; 0x11e6 <__floatunsisf+0xc2>
    11f2:	cd 82       	std	Y+5, r12	; 0x05
    11f4:	de 82       	std	Y+6, r13	; 0x06
    11f6:	ef 82       	std	Y+7, r14	; 0x07
    11f8:	f8 86       	std	Y+8, r15	; 0x08
    11fa:	02 1b       	sub	r16, r18
    11fc:	13 0b       	sbc	r17, r19
    11fe:	1c 83       	std	Y+4, r17	; 0x04
    1200:	0b 83       	std	Y+3, r16	; 0x03
    1202:	ce 01       	movw	r24, r28
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__pack_f>
    120a:	46 2f       	mov	r20, r22
    120c:	57 2f       	mov	r21, r23
    120e:	68 2f       	mov	r22, r24
    1210:	79 2f       	mov	r23, r25
    1212:	cb 01       	movw	r24, r22
    1214:	ba 01       	movw	r22, r20
    1216:	28 96       	adiw	r28, 0x08	; 8
    1218:	e8 e0       	ldi	r30, 0x08	; 8
    121a:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__epilogue_restores__+0x14>

0000121e <__clzsi2>:
    121e:	cf 92       	push	r12
    1220:	df 92       	push	r13
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	8b 01       	movw	r16, r22
    122c:	9c 01       	movw	r18, r24
    122e:	00 30       	cpi	r16, 0x00	; 0
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	18 07       	cpc	r17, r24
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	28 07       	cpc	r18, r24
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	38 07       	cpc	r19, r24
    123c:	50 f4       	brcc	.+20     	; 0x1252 <__clzsi2+0x34>
    123e:	0f 3f       	cpi	r16, 0xFF	; 255
    1240:	11 05       	cpc	r17, r1
    1242:	21 05       	cpc	r18, r1
    1244:	31 05       	cpc	r19, r1
    1246:	09 f0       	breq	.+2      	; 0x124a <__clzsi2+0x2c>
    1248:	88 f4       	brcc	.+34     	; 0x126c <__clzsi2+0x4e>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	dc 01       	movw	r26, r24
    1250:	16 c0       	rjmp	.+44     	; 0x127e <__clzsi2+0x60>
    1252:	00 30       	cpi	r16, 0x00	; 0
    1254:	e0 e0       	ldi	r30, 0x00	; 0
    1256:	1e 07       	cpc	r17, r30
    1258:	e0 e0       	ldi	r30, 0x00	; 0
    125a:	2e 07       	cpc	r18, r30
    125c:	e1 e0       	ldi	r30, 0x01	; 1
    125e:	3e 07       	cpc	r19, r30
    1260:	50 f4       	brcc	.+20     	; 0x1276 <__clzsi2+0x58>
    1262:	80 e1       	ldi	r24, 0x10	; 16
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a0 e0       	ldi	r26, 0x00	; 0
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	09 c0       	rjmp	.+18     	; 0x127e <__clzsi2+0x60>
    126c:	88 e0       	ldi	r24, 0x08	; 8
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a0 e0       	ldi	r26, 0x00	; 0
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	04 c0       	rjmp	.+8      	; 0x127e <__clzsi2+0x60>
    1276:	88 e1       	ldi	r24, 0x18	; 24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e0       	ldi	r26, 0x00	; 0
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	40 e2       	ldi	r20, 0x20	; 32
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	48 1b       	sub	r20, r24
    1288:	59 0b       	sbc	r21, r25
    128a:	6a 0b       	sbc	r22, r26
    128c:	7b 0b       	sbc	r23, r27
    128e:	68 01       	movw	r12, r16
    1290:	79 01       	movw	r14, r18
    1292:	04 c0       	rjmp	.+8      	; 0x129c <__clzsi2+0x7e>
    1294:	f6 94       	lsr	r15
    1296:	e7 94       	ror	r14
    1298:	d7 94       	ror	r13
    129a:	c7 94       	ror	r12
    129c:	8a 95       	dec	r24
    129e:	d2 f7       	brpl	.-12     	; 0x1294 <__clzsi2+0x76>
    12a0:	d7 01       	movw	r26, r14
    12a2:	c6 01       	movw	r24, r12
    12a4:	82 5e       	subi	r24, 0xE2	; 226
    12a6:	9e 4f       	sbci	r25, 0xFE	; 254
    12a8:	fc 01       	movw	r30, r24
    12aa:	80 81       	ld	r24, Z
    12ac:	48 1b       	sub	r20, r24
    12ae:	51 09       	sbc	r21, r1
    12b0:	61 09       	sbc	r22, r1
    12b2:	71 09       	sbc	r23, r1
    12b4:	ca 01       	movw	r24, r20
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	08 95       	ret

000012c4 <__pack_f>:
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	dc 01       	movw	r26, r24
    12d2:	14 96       	adiw	r26, 0x04	; 4
    12d4:	4d 91       	ld	r20, X+
    12d6:	5d 91       	ld	r21, X+
    12d8:	6d 91       	ld	r22, X+
    12da:	7c 91       	ld	r23, X
    12dc:	17 97       	sbiw	r26, 0x07	; 7
    12de:	11 96       	adiw	r26, 0x01	; 1
    12e0:	ec 91       	ld	r30, X
    12e2:	11 97       	sbiw	r26, 0x01	; 1
    12e4:	8c 91       	ld	r24, X
    12e6:	82 30       	cpi	r24, 0x02	; 2
    12e8:	20 f4       	brcc	.+8      	; 0x12f2 <__pack_f+0x2e>
    12ea:	60 61       	ori	r22, 0x10	; 16
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a5 c0       	rjmp	.+330    	; 0x143c <__pack_f+0x178>
    12f2:	84 30       	cpi	r24, 0x04	; 4
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <__pack_f+0x34>
    12f6:	9d c0       	rjmp	.+314    	; 0x1432 <__pack_f+0x16e>
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	09 f4       	brne	.+2      	; 0x12fe <__pack_f+0x3a>
    12fc:	94 c0       	rjmp	.+296    	; 0x1426 <__pack_f+0x162>
    12fe:	41 15       	cp	r20, r1
    1300:	51 05       	cpc	r21, r1
    1302:	61 05       	cpc	r22, r1
    1304:	71 05       	cpc	r23, r1
    1306:	09 f4       	brne	.+2      	; 0x130a <__pack_f+0x46>
    1308:	91 c0       	rjmp	.+290    	; 0x142c <__pack_f+0x168>
    130a:	12 96       	adiw	r26, 0x02	; 2
    130c:	8d 91       	ld	r24, X+
    130e:	9c 91       	ld	r25, X
    1310:	13 97       	sbiw	r26, 0x03	; 3
    1312:	2f ef       	ldi	r18, 0xFF	; 255
    1314:	82 38       	cpi	r24, 0x82	; 130
    1316:	92 07       	cpc	r25, r18
    1318:	0c f0       	brlt	.+2      	; 0x131c <__pack_f+0x58>
    131a:	59 c0       	rjmp	.+178    	; 0x13ce <__pack_f+0x10a>
    131c:	22 e8       	ldi	r18, 0x82	; 130
    131e:	3f ef       	ldi	r19, 0xFF	; 255
    1320:	28 1b       	sub	r18, r24
    1322:	39 0b       	sbc	r19, r25
    1324:	2a 31       	cpi	r18, 0x1A	; 26
    1326:	31 05       	cpc	r19, r1
    1328:	64 f5       	brge	.+88     	; 0x1382 <__pack_f+0xbe>
    132a:	6a 01       	movw	r12, r20
    132c:	7b 01       	movw	r14, r22
    132e:	02 2e       	mov	r0, r18
    1330:	04 c0       	rjmp	.+8      	; 0x133a <__pack_f+0x76>
    1332:	f6 94       	lsr	r15
    1334:	e7 94       	ror	r14
    1336:	d7 94       	ror	r13
    1338:	c7 94       	ror	r12
    133a:	0a 94       	dec	r0
    133c:	d2 f7       	brpl	.-12     	; 0x1332 <__pack_f+0x6e>
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <__pack_f+0x8c>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	aa 1f       	adc	r26, r26
    134e:	bb 1f       	adc	r27, r27
    1350:	2a 95       	dec	r18
    1352:	d2 f7       	brpl	.-12     	; 0x1348 <__pack_f+0x84>
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	a1 09       	sbc	r26, r1
    1358:	b1 09       	sbc	r27, r1
    135a:	84 23       	and	r24, r20
    135c:	95 23       	and	r25, r21
    135e:	a6 23       	and	r26, r22
    1360:	b7 23       	and	r27, r23
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	a1 05       	cpc	r26, r1
    136e:	b1 05       	cpc	r27, r1
    1370:	19 f4       	brne	.+6      	; 0x1378 <__pack_f+0xb4>
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	ba 01       	movw	r22, r20
    1378:	4c 29       	or	r20, r12
    137a:	5d 29       	or	r21, r13
    137c:	6e 29       	or	r22, r14
    137e:	7f 29       	or	r23, r15
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <__pack_f+0xc4>
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	ba 01       	movw	r22, r20
    1388:	db 01       	movw	r26, r22
    138a:	ca 01       	movw	r24, r20
    138c:	8f 77       	andi	r24, 0x7F	; 127
    138e:	90 70       	andi	r25, 0x00	; 0
    1390:	a0 70       	andi	r26, 0x00	; 0
    1392:	b0 70       	andi	r27, 0x00	; 0
    1394:	80 34       	cpi	r24, 0x40	; 64
    1396:	91 05       	cpc	r25, r1
    1398:	a1 05       	cpc	r26, r1
    139a:	b1 05       	cpc	r27, r1
    139c:	39 f4       	brne	.+14     	; 0x13ac <__pack_f+0xe8>
    139e:	47 ff       	sbrs	r20, 7
    13a0:	09 c0       	rjmp	.+18     	; 0x13b4 <__pack_f+0xf0>
    13a2:	40 5c       	subi	r20, 0xC0	; 192
    13a4:	5f 4f       	sbci	r21, 0xFF	; 255
    13a6:	6f 4f       	sbci	r22, 0xFF	; 255
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <__pack_f+0xf0>
    13ac:	41 5c       	subi	r20, 0xC1	; 193
    13ae:	5f 4f       	sbci	r21, 0xFF	; 255
    13b0:	6f 4f       	sbci	r22, 0xFF	; 255
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	40 30       	cpi	r20, 0x00	; 0
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	52 07       	cpc	r21, r18
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	62 07       	cpc	r22, r18
    13c2:	20 e4       	ldi	r18, 0x40	; 64
    13c4:	72 07       	cpc	r23, r18
    13c6:	38 f5       	brcc	.+78     	; 0x1416 <__pack_f+0x152>
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	24 c0       	rjmp	.+72     	; 0x1416 <__pack_f+0x152>
    13ce:	80 38       	cpi	r24, 0x80	; 128
    13d0:	91 05       	cpc	r25, r1
    13d2:	7c f5       	brge	.+94     	; 0x1432 <__pack_f+0x16e>
    13d4:	8a 01       	movw	r16, r20
    13d6:	9b 01       	movw	r18, r22
    13d8:	0f 77       	andi	r16, 0x7F	; 127
    13da:	10 70       	andi	r17, 0x00	; 0
    13dc:	20 70       	andi	r18, 0x00	; 0
    13de:	30 70       	andi	r19, 0x00	; 0
    13e0:	00 34       	cpi	r16, 0x40	; 64
    13e2:	11 05       	cpc	r17, r1
    13e4:	21 05       	cpc	r18, r1
    13e6:	31 05       	cpc	r19, r1
    13e8:	39 f4       	brne	.+14     	; 0x13f8 <__pack_f+0x134>
    13ea:	47 ff       	sbrs	r20, 7
    13ec:	09 c0       	rjmp	.+18     	; 0x1400 <__pack_f+0x13c>
    13ee:	40 5c       	subi	r20, 0xC0	; 192
    13f0:	5f 4f       	sbci	r21, 0xFF	; 255
    13f2:	6f 4f       	sbci	r22, 0xFF	; 255
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <__pack_f+0x13c>
    13f8:	41 5c       	subi	r20, 0xC1	; 193
    13fa:	5f 4f       	sbci	r21, 0xFF	; 255
    13fc:	6f 4f       	sbci	r22, 0xFF	; 255
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	77 fd       	sbrc	r23, 7
    1402:	03 c0       	rjmp	.+6      	; 0x140a <__pack_f+0x146>
    1404:	81 58       	subi	r24, 0x81	; 129
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <__pack_f+0x152>
    140a:	76 95       	lsr	r23
    140c:	67 95       	ror	r22
    140e:	57 95       	ror	r21
    1410:	47 95       	ror	r20
    1412:	80 58       	subi	r24, 0x80	; 128
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	97 e0       	ldi	r25, 0x07	; 7
    1418:	76 95       	lsr	r23
    141a:	67 95       	ror	r22
    141c:	57 95       	ror	r21
    141e:	47 95       	ror	r20
    1420:	9a 95       	dec	r25
    1422:	d1 f7       	brne	.-12     	; 0x1418 <__pack_f+0x154>
    1424:	0b c0       	rjmp	.+22     	; 0x143c <__pack_f+0x178>
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <__pack_f+0x172>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	05 c0       	rjmp	.+10     	; 0x143c <__pack_f+0x178>
    1432:	8f ef       	ldi	r24, 0xFF	; 255
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	ba 01       	movw	r22, r20
    143c:	98 2f       	mov	r25, r24
    143e:	97 95       	ror	r25
    1440:	99 27       	eor	r25, r25
    1442:	97 95       	ror	r25
    1444:	a6 2f       	mov	r26, r22
    1446:	af 77       	andi	r26, 0x7F	; 127
    1448:	e7 95       	ror	r30
    144a:	ee 27       	eor	r30, r30
    144c:	e7 95       	ror	r30
    144e:	86 95       	lsr	r24
    1450:	3a 2f       	mov	r19, r26
    1452:	39 2b       	or	r19, r25
    1454:	28 2f       	mov	r18, r24
    1456:	2e 2b       	or	r18, r30
    1458:	84 2f       	mov	r24, r20
    145a:	95 2f       	mov	r25, r21
    145c:	a3 2f       	mov	r26, r19
    145e:	b2 2f       	mov	r27, r18
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	08 95       	ret

00001472 <__unpack_f>:
    1472:	dc 01       	movw	r26, r24
    1474:	fb 01       	movw	r30, r22
    1476:	4c 91       	ld	r20, X
    1478:	11 96       	adiw	r26, 0x01	; 1
    147a:	5c 91       	ld	r21, X
    147c:	11 97       	sbiw	r26, 0x01	; 1
    147e:	12 96       	adiw	r26, 0x02	; 2
    1480:	8c 91       	ld	r24, X
    1482:	12 97       	sbiw	r26, 0x02	; 2
    1484:	68 2f       	mov	r22, r24
    1486:	6f 77       	andi	r22, 0x7F	; 127
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	98 2f       	mov	r25, r24
    148c:	99 1f       	adc	r25, r25
    148e:	99 27       	eor	r25, r25
    1490:	99 1f       	adc	r25, r25
    1492:	13 96       	adiw	r26, 0x03	; 3
    1494:	2c 91       	ld	r18, X
    1496:	13 97       	sbiw	r26, 0x03	; 3
    1498:	82 2f       	mov	r24, r18
    149a:	88 0f       	add	r24, r24
    149c:	89 2b       	or	r24, r25
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	22 1f       	adc	r18, r18
    14a2:	22 27       	eor	r18, r18
    14a4:	22 1f       	adc	r18, r18
    14a6:	21 83       	std	Z+1, r18	; 0x01
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	39 f5       	brne	.+78     	; 0x14fa <__unpack_f+0x88>
    14ac:	41 15       	cp	r20, r1
    14ae:	51 05       	cpc	r21, r1
    14b0:	61 05       	cpc	r22, r1
    14b2:	71 05       	cpc	r23, r1
    14b4:	11 f4       	brne	.+4      	; 0x14ba <__unpack_f+0x48>
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	29 c0       	rjmp	.+82     	; 0x150c <__unpack_f+0x9a>
    14ba:	82 e8       	ldi	r24, 0x82	; 130
    14bc:	9f ef       	ldi	r25, 0xFF	; 255
    14be:	93 83       	std	Z+3, r25	; 0x03
    14c0:	82 83       	std	Z+2, r24	; 0x02
    14c2:	27 e0       	ldi	r18, 0x07	; 7
    14c4:	44 0f       	add	r20, r20
    14c6:	55 1f       	adc	r21, r21
    14c8:	66 1f       	adc	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	2a 95       	dec	r18
    14ce:	d1 f7       	brne	.-12     	; 0x14c4 <__unpack_f+0x52>
    14d0:	83 e0       	ldi	r24, 0x03	; 3
    14d2:	80 83       	st	Z, r24
    14d4:	09 c0       	rjmp	.+18     	; 0x14e8 <__unpack_f+0x76>
    14d6:	44 0f       	add	r20, r20
    14d8:	55 1f       	adc	r21, r21
    14da:	66 1f       	adc	r22, r22
    14dc:	77 1f       	adc	r23, r23
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	93 83       	std	Z+3, r25	; 0x03
    14e6:	82 83       	std	Z+2, r24	; 0x02
    14e8:	40 30       	cpi	r20, 0x00	; 0
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	58 07       	cpc	r21, r24
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	68 07       	cpc	r22, r24
    14f2:	80 e4       	ldi	r24, 0x40	; 64
    14f4:	78 07       	cpc	r23, r24
    14f6:	78 f3       	brcs	.-34     	; 0x14d6 <__unpack_f+0x64>
    14f8:	20 c0       	rjmp	.+64     	; 0x153a <__unpack_f+0xc8>
    14fa:	8f 3f       	cpi	r24, 0xFF	; 255
    14fc:	91 05       	cpc	r25, r1
    14fe:	79 f4       	brne	.+30     	; 0x151e <__unpack_f+0xac>
    1500:	41 15       	cp	r20, r1
    1502:	51 05       	cpc	r21, r1
    1504:	61 05       	cpc	r22, r1
    1506:	71 05       	cpc	r23, r1
    1508:	19 f4       	brne	.+6      	; 0x1510 <__unpack_f+0x9e>
    150a:	84 e0       	ldi	r24, 0x04	; 4
    150c:	80 83       	st	Z, r24
    150e:	08 95       	ret
    1510:	64 ff       	sbrs	r22, 4
    1512:	03 c0       	rjmp	.+6      	; 0x151a <__unpack_f+0xa8>
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	80 83       	st	Z, r24
    1518:	10 c0       	rjmp	.+32     	; 0x153a <__unpack_f+0xc8>
    151a:	10 82       	st	Z, r1
    151c:	0e c0       	rjmp	.+28     	; 0x153a <__unpack_f+0xc8>
    151e:	8f 57       	subi	r24, 0x7F	; 127
    1520:	90 40       	sbci	r25, 0x00	; 0
    1522:	93 83       	std	Z+3, r25	; 0x03
    1524:	82 83       	std	Z+2, r24	; 0x02
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	80 83       	st	Z, r24
    152a:	87 e0       	ldi	r24, 0x07	; 7
    152c:	44 0f       	add	r20, r20
    152e:	55 1f       	adc	r21, r21
    1530:	66 1f       	adc	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	8a 95       	dec	r24
    1536:	d1 f7       	brne	.-12     	; 0x152c <__unpack_f+0xba>
    1538:	70 64       	ori	r23, 0x40	; 64
    153a:	44 83       	std	Z+4, r20	; 0x04
    153c:	55 83       	std	Z+5, r21	; 0x05
    153e:	66 83       	std	Z+6, r22	; 0x06
    1540:	77 83       	std	Z+7, r23	; 0x07
    1542:	08 95       	ret

00001544 <__fpcmp_parts_f>:
    1544:	cf 93       	push	r28
    1546:	fc 01       	movw	r30, r24
    1548:	db 01       	movw	r26, r22
    154a:	90 81       	ld	r25, Z
    154c:	92 30       	cpi	r25, 0x02	; 2
    154e:	08 f4       	brcc	.+2      	; 0x1552 <__fpcmp_parts_f+0xe>
    1550:	4c c0       	rjmp	.+152    	; 0x15ea <__fpcmp_parts_f+0xa6>
    1552:	8c 91       	ld	r24, X
    1554:	82 30       	cpi	r24, 0x02	; 2
    1556:	08 f4       	brcc	.+2      	; 0x155a <__fpcmp_parts_f+0x16>
    1558:	48 c0       	rjmp	.+144    	; 0x15ea <__fpcmp_parts_f+0xa6>
    155a:	94 30       	cpi	r25, 0x04	; 4
    155c:	69 f4       	brne	.+26     	; 0x1578 <__fpcmp_parts_f+0x34>
    155e:	21 81       	ldd	r18, Z+1	; 0x01
    1560:	84 30       	cpi	r24, 0x04	; 4
    1562:	39 f4       	brne	.+14     	; 0x1572 <__fpcmp_parts_f+0x2e>
    1564:	11 96       	adiw	r26, 0x01	; 1
    1566:	8c 91       	ld	r24, X
    1568:	11 97       	sbiw	r26, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	82 1b       	sub	r24, r18
    156e:	91 09       	sbc	r25, r1
    1570:	44 c0       	rjmp	.+136    	; 0x15fa <__fpcmp_parts_f+0xb6>
    1572:	22 23       	and	r18, r18
    1574:	d1 f1       	breq	.+116    	; 0x15ea <__fpcmp_parts_f+0xa6>
    1576:	3f c0       	rjmp	.+126    	; 0x15f6 <__fpcmp_parts_f+0xb2>
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	21 f0       	breq	.+8      	; 0x1584 <__fpcmp_parts_f+0x40>
    157c:	92 30       	cpi	r25, 0x02	; 2
    157e:	41 f4       	brne	.+16     	; 0x1590 <__fpcmp_parts_f+0x4c>
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	b1 f1       	breq	.+108    	; 0x15f0 <__fpcmp_parts_f+0xac>
    1584:	11 96       	adiw	r26, 0x01	; 1
    1586:	8c 91       	ld	r24, X
    1588:	11 97       	sbiw	r26, 0x01	; 1
    158a:	88 23       	and	r24, r24
    158c:	a1 f1       	breq	.+104    	; 0x15f6 <__fpcmp_parts_f+0xb2>
    158e:	2d c0       	rjmp	.+90     	; 0x15ea <__fpcmp_parts_f+0xa6>
    1590:	c1 81       	ldd	r28, Z+1	; 0x01
    1592:	82 30       	cpi	r24, 0x02	; 2
    1594:	01 f1       	breq	.+64     	; 0x15d6 <__fpcmp_parts_f+0x92>
    1596:	11 96       	adiw	r26, 0x01	; 1
    1598:	8c 91       	ld	r24, X
    159a:	11 97       	sbiw	r26, 0x01	; 1
    159c:	c8 17       	cp	r28, r24
    159e:	d9 f4       	brne	.+54     	; 0x15d6 <__fpcmp_parts_f+0x92>
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	12 96       	adiw	r26, 0x02	; 2
    15a6:	2d 91       	ld	r18, X+
    15a8:	3c 91       	ld	r19, X
    15aa:	13 97       	sbiw	r26, 0x03	; 3
    15ac:	28 17       	cp	r18, r24
    15ae:	39 07       	cpc	r19, r25
    15b0:	94 f0       	brlt	.+36     	; 0x15d6 <__fpcmp_parts_f+0x92>
    15b2:	82 17       	cp	r24, r18
    15b4:	93 07       	cpc	r25, r19
    15b6:	bc f0       	brlt	.+46     	; 0x15e6 <__fpcmp_parts_f+0xa2>
    15b8:	44 81       	ldd	r20, Z+4	; 0x04
    15ba:	55 81       	ldd	r21, Z+5	; 0x05
    15bc:	66 81       	ldd	r22, Z+6	; 0x06
    15be:	77 81       	ldd	r23, Z+7	; 0x07
    15c0:	14 96       	adiw	r26, 0x04	; 4
    15c2:	8d 91       	ld	r24, X+
    15c4:	9d 91       	ld	r25, X+
    15c6:	0d 90       	ld	r0, X+
    15c8:	bc 91       	ld	r27, X
    15ca:	a0 2d       	mov	r26, r0
    15cc:	84 17       	cp	r24, r20
    15ce:	95 07       	cpc	r25, r21
    15d0:	a6 07       	cpc	r26, r22
    15d2:	b7 07       	cpc	r27, r23
    15d4:	18 f4       	brcc	.+6      	; 0x15dc <__fpcmp_parts_f+0x98>
    15d6:	cc 23       	and	r28, r28
    15d8:	41 f0       	breq	.+16     	; 0x15ea <__fpcmp_parts_f+0xa6>
    15da:	0d c0       	rjmp	.+26     	; 0x15f6 <__fpcmp_parts_f+0xb2>
    15dc:	48 17       	cp	r20, r24
    15de:	59 07       	cpc	r21, r25
    15e0:	6a 07       	cpc	r22, r26
    15e2:	7b 07       	cpc	r23, r27
    15e4:	28 f4       	brcc	.+10     	; 0x15f0 <__fpcmp_parts_f+0xac>
    15e6:	cc 23       	and	r28, r28
    15e8:	31 f0       	breq	.+12     	; 0x15f6 <__fpcmp_parts_f+0xb2>
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	05 c0       	rjmp	.+10     	; 0x15fa <__fpcmp_parts_f+0xb6>
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <__fpcmp_parts_f+0xb6>
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	9f ef       	ldi	r25, 0xFF	; 255
    15fa:	cf 91       	pop	r28
    15fc:	08 95       	ret

000015fe <main>:
{
	unsigned int angle;
	unsigned int dir;
	unsigned int speed;
	int twink = 0;
	initPort();		// 입출력 포트 초기화
    15fe:	0e 94 cd 03 	call	0x79a	; 0x79a <initPort>

    LCD_init();     // LCD 초기화
    1602:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_init>

	initMotor();	// 스텝모터 제어를 위한 타이머/카운터 초기화 
    1606:	0e 94 d6 03 	call	0x7ac	; 0x7ac <initMotor>

	
	can_init(  5 ); 		// 초기화
    160a:	85 e0       	ldi	r24, 0x05	; 5
    160c:	0e 94 6b 00 	call	0xd6	; 0xd6 <can_init>
	can_init_8Mhz(5);
    1610:	85 e0       	ldi	r24, 0x05	; 5
    1612:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <can_init_8Mhz>
	can_rx_set( 0, 0x01, EXT, 8, 0x00, 0  ); 	// CAN 수신기 초기화 
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	21 e0       	ldi	r18, 0x01	; 1
    1622:	08 e0       	ldi	r16, 0x08	; 8
    1624:	cc 24       	eor	r12, r12
    1626:	dd 24       	eor	r13, r13
    1628:	76 01       	movw	r14, r12
    162a:	aa 24       	eor	r10, r10
    162c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <can_rx_set>
	
	
	sei();			// INT 인에이블 
    1630:	78 94       	sei
	//LCD_cmd(0x01);
	LCD_Write(0,0, "before");
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	51 e0       	ldi	r21, 0x01	; 1
    163a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_Write>
	ms_delay(500);
    163e:	84 ef       	ldi	r24, 0xF4	; 244
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	0e 94 9e 04 	call	0x93c	; 0x93c <ms_delay>
		if( ( msg1.data[6] == '1' ) || ( msg1.data[6] == '3')) {
			twink = 1;
		}
		else twink = 0;
		if(twink == 1) {
			PORTB = 0xff;
    1646:	cf ef       	ldi	r28, 0xFF	; 255
		/* control DC, Servo motor
		/* 
		********************************************/


		LCD_Write(0,0, table1);
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	47 e0       	ldi	r20, 0x07	; 7
    164e:	51 e0       	ldi	r21, 0x01	; 1
    1650:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_Write>
	    can_rx(0, &msg1);
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	63 e3       	ldi	r22, 0x33	; 51
    1658:	72 e0       	ldi	r23, 0x02	; 2
    165a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <can_rx>
		LCD_Write(0, 1, &(msg1.data[4]));
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	4e e3       	ldi	r20, 0x3E	; 62
    1664:	52 e0       	ldi	r21, 0x02	; 2
    1666:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_Write>
		LCD_Write(3, 1, &(msg1.data[6]));
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	40 e4       	ldi	r20, 0x40	; 64
    1670:	52 e0       	ldi	r21, 0x02	; 2
    1672:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_Write>
		//speed & dir control
		CtrlDcMotor( msg1.data[2], DcMotorDir(msg1.data[0]));
    1676:	80 91 3a 02 	lds	r24, 0x023A
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <DcMotorDir>
    1680:	bc 01       	movw	r22, r24
    1682:	80 91 3c 02 	lds	r24, 0x023C
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <CtrlDcMotor>

		if( ( msg1.data[6] == '1' ) || ( msg1.data[6] == '3')) {
    168c:	80 91 40 02 	lds	r24, 0x0240
    1690:	81 33       	cpi	r24, 0x31	; 49
    1692:	11 f0       	breq	.+4      	; 0x1698 <main+0x9a>
    1694:	83 33       	cpi	r24, 0x33	; 51
    1696:	51 f4       	brne	.+20     	; 0x16ac <main+0xae>
			twink = 1;
		}
		else twink = 0;
		if(twink == 1) {
			PORTB = 0xff;
    1698:	c5 b9       	out	0x05, r28	; 5
			ms_delay(300);
    169a:	8c e2       	ldi	r24, 0x2C	; 44
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	0e 94 9e 04 	call	0x93c	; 0x93c <ms_delay>
			PORTB = 0x00;
    16a2:	15 b8       	out	0x05, r1	; 5
			ms_delay(300);
    16a4:	8c e2       	ldi	r24, 0x2C	; 44
    16a6:	91 e0       	ldi	r25, 0x01	; 1
    16a8:	0e 94 9e 04 	call	0x93c	; 0x93c <ms_delay>
		}
		PORTB = 0xff;
    16ac:	c5 b9       	out	0x05, r28	; 5

	}
    16ae:	cc cf       	rjmp	.-104    	; 0x1648 <main+0x4a>

000016b0 <__mulsi3>:
    16b0:	62 9f       	mul	r22, r18
    16b2:	d0 01       	movw	r26, r0
    16b4:	73 9f       	mul	r23, r19
    16b6:	f0 01       	movw	r30, r0
    16b8:	82 9f       	mul	r24, r18
    16ba:	e0 0d       	add	r30, r0
    16bc:	f1 1d       	adc	r31, r1
    16be:	64 9f       	mul	r22, r20
    16c0:	e0 0d       	add	r30, r0
    16c2:	f1 1d       	adc	r31, r1
    16c4:	92 9f       	mul	r25, r18
    16c6:	f0 0d       	add	r31, r0
    16c8:	83 9f       	mul	r24, r19
    16ca:	f0 0d       	add	r31, r0
    16cc:	74 9f       	mul	r23, r20
    16ce:	f0 0d       	add	r31, r0
    16d0:	65 9f       	mul	r22, r21
    16d2:	f0 0d       	add	r31, r0
    16d4:	99 27       	eor	r25, r25
    16d6:	72 9f       	mul	r23, r18
    16d8:	b0 0d       	add	r27, r0
    16da:	e1 1d       	adc	r30, r1
    16dc:	f9 1f       	adc	r31, r25
    16de:	63 9f       	mul	r22, r19
    16e0:	b0 0d       	add	r27, r0
    16e2:	e1 1d       	adc	r30, r1
    16e4:	f9 1f       	adc	r31, r25
    16e6:	bd 01       	movw	r22, r26
    16e8:	cf 01       	movw	r24, r30
    16ea:	11 24       	eor	r1, r1
    16ec:	08 95       	ret

000016ee <__udivmodhi4>:
    16ee:	aa 1b       	sub	r26, r26
    16f0:	bb 1b       	sub	r27, r27
    16f2:	51 e1       	ldi	r21, 0x11	; 17
    16f4:	07 c0       	rjmp	.+14     	; 0x1704 <__udivmodhi4_ep>

000016f6 <__udivmodhi4_loop>:
    16f6:	aa 1f       	adc	r26, r26
    16f8:	bb 1f       	adc	r27, r27
    16fa:	a6 17       	cp	r26, r22
    16fc:	b7 07       	cpc	r27, r23
    16fe:	10 f0       	brcs	.+4      	; 0x1704 <__udivmodhi4_ep>
    1700:	a6 1b       	sub	r26, r22
    1702:	b7 0b       	sbc	r27, r23

00001704 <__udivmodhi4_ep>:
    1704:	88 1f       	adc	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	5a 95       	dec	r21
    170a:	a9 f7       	brne	.-22     	; 0x16f6 <__udivmodhi4_loop>
    170c:	80 95       	com	r24
    170e:	90 95       	com	r25
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	08 95       	ret

00001716 <__divmodsi4>:
    1716:	97 fb       	bst	r25, 7
    1718:	09 2e       	mov	r0, r25
    171a:	05 26       	eor	r0, r21
    171c:	0e d0       	rcall	.+28     	; 0x173a <__divmodsi4_neg1>
    171e:	57 fd       	sbrc	r21, 7
    1720:	04 d0       	rcall	.+8      	; 0x172a <__divmodsi4_neg2>
    1722:	14 d0       	rcall	.+40     	; 0x174c <__udivmodsi4>
    1724:	0a d0       	rcall	.+20     	; 0x173a <__divmodsi4_neg1>
    1726:	00 1c       	adc	r0, r0
    1728:	38 f4       	brcc	.+14     	; 0x1738 <__divmodsi4_exit>

0000172a <__divmodsi4_neg2>:
    172a:	50 95       	com	r21
    172c:	40 95       	com	r20
    172e:	30 95       	com	r19
    1730:	21 95       	neg	r18
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	4f 4f       	sbci	r20, 0xFF	; 255
    1736:	5f 4f       	sbci	r21, 0xFF	; 255

00001738 <__divmodsi4_exit>:
    1738:	08 95       	ret

0000173a <__divmodsi4_neg1>:
    173a:	f6 f7       	brtc	.-4      	; 0x1738 <__divmodsi4_exit>
    173c:	90 95       	com	r25
    173e:	80 95       	com	r24
    1740:	70 95       	com	r23
    1742:	61 95       	neg	r22
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	8f 4f       	sbci	r24, 0xFF	; 255
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	08 95       	ret

0000174c <__udivmodsi4>:
    174c:	a1 e2       	ldi	r26, 0x21	; 33
    174e:	1a 2e       	mov	r1, r26
    1750:	aa 1b       	sub	r26, r26
    1752:	bb 1b       	sub	r27, r27
    1754:	fd 01       	movw	r30, r26
    1756:	0d c0       	rjmp	.+26     	; 0x1772 <__udivmodsi4_ep>

00001758 <__udivmodsi4_loop>:
    1758:	aa 1f       	adc	r26, r26
    175a:	bb 1f       	adc	r27, r27
    175c:	ee 1f       	adc	r30, r30
    175e:	ff 1f       	adc	r31, r31
    1760:	a2 17       	cp	r26, r18
    1762:	b3 07       	cpc	r27, r19
    1764:	e4 07       	cpc	r30, r20
    1766:	f5 07       	cpc	r31, r21
    1768:	20 f0       	brcs	.+8      	; 0x1772 <__udivmodsi4_ep>
    176a:	a2 1b       	sub	r26, r18
    176c:	b3 0b       	sbc	r27, r19
    176e:	e4 0b       	sbc	r30, r20
    1770:	f5 0b       	sbc	r31, r21

00001772 <__udivmodsi4_ep>:
    1772:	66 1f       	adc	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	1a 94       	dec	r1
    177c:	69 f7       	brne	.-38     	; 0x1758 <__udivmodsi4_loop>
    177e:	60 95       	com	r22
    1780:	70 95       	com	r23
    1782:	80 95       	com	r24
    1784:	90 95       	com	r25
    1786:	9b 01       	movw	r18, r22
    1788:	ac 01       	movw	r20, r24
    178a:	bd 01       	movw	r22, r26
    178c:	cf 01       	movw	r24, r30
    178e:	08 95       	ret

00001790 <__prologue_saves__>:
    1790:	2f 92       	push	r2
    1792:	3f 92       	push	r3
    1794:	4f 92       	push	r4
    1796:	5f 92       	push	r5
    1798:	6f 92       	push	r6
    179a:	7f 92       	push	r7
    179c:	8f 92       	push	r8
    179e:	9f 92       	push	r9
    17a0:	af 92       	push	r10
    17a2:	bf 92       	push	r11
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	ca 1b       	sub	r28, r26
    17ba:	db 0b       	sbc	r29, r27
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	09 94       	ijmp

000017c8 <__epilogue_restores__>:
    17c8:	2a 88       	ldd	r2, Y+18	; 0x12
    17ca:	39 88       	ldd	r3, Y+17	; 0x11
    17cc:	48 88       	ldd	r4, Y+16	; 0x10
    17ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    17d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    17d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    17d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    17d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    17d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    17da:	b9 84       	ldd	r11, Y+9	; 0x09
    17dc:	c8 84       	ldd	r12, Y+8	; 0x08
    17de:	df 80       	ldd	r13, Y+7	; 0x07
    17e0:	ee 80       	ldd	r14, Y+6	; 0x06
    17e2:	fd 80       	ldd	r15, Y+5	; 0x05
    17e4:	0c 81       	ldd	r16, Y+4	; 0x04
    17e6:	1b 81       	ldd	r17, Y+3	; 0x03
    17e8:	aa 81       	ldd	r26, Y+2	; 0x02
    17ea:	b9 81       	ldd	r27, Y+1	; 0x01
    17ec:	ce 0f       	add	r28, r30
    17ee:	d1 1d       	adc	r29, r1
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	ed 01       	movw	r28, r26
    17fc:	08 95       	ret

000017fe <_exit>:
    17fe:	f8 94       	cli

00001800 <__stop_program>:
    1800:	ff cf       	rjmp	.-2      	; 0x1800 <__stop_program>
