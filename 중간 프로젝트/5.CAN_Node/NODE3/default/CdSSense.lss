
CdSSense.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00000572  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000572  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080018e  0080018e  00000694  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000138  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004cb  00000000  00000000  00000f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000242  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005e4  00000000  00000000  0000166a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  00001c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000016e  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f7  00000000  00000000  00001ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000049  00000000  00000000  000020d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_25>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e2 e7       	ldi	r30, 0x72	; 114
  a8:	f5 e0       	ldi	r31, 0x05	; 5
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ae 38       	cpi	r26, 0x8E	; 142
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	ae e8       	ldi	r26, 0x8E	; 142
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a6 3a       	cpi	r26, 0xA6	; 166
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 08 01 	call	0x210	; 0x210 <main>
  ce:	0c 94 b7 02 	jmp	0x56e	; 0x56e <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <delay>:
void delay(unsigned int k)
{
    unsigned int i;

	for(i=0;i<k;i++); 
}
  d6:	08 95       	ret

000000d8 <us_delay>:

void us_delay(unsigned int us_time)
{
	unsigned int i;

	for(i=0; i<us_time; i++) // 4 cycle +
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	08 c0       	rjmp	.+16     	; 0xee <us_delay+0x16>
	{
	    asm("PUSH R0"); 	// 2 cycle +
  de:	0f 92       	push	r0
		asm("POP R0"); 		// 2 cycle +
  e0:	0f 90       	pop	r0
		asm("PUSH R0"); 	// 2 cycle +
  e2:	0f 92       	push	r0
		asm("POP R0"); 		// 2 cycle + =12 cycle for 11.0592MHZ
  e4:	0f 90       	pop	r0
		asm("PUSH R0"); 	// 2 cycle +
  e6:	0f 92       	push	r0
		asm("POP R0"); 		// 2 cycle = 16 cycle = 1us for 16MHz
  e8:	0f 90       	pop	r0

void us_delay(unsigned int us_time)
{
	unsigned int i;

	for(i=0; i<us_time; i++) // 4 cycle +
  ea:	2f 5f       	subi	r18, 0xFF	; 255
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
  ee:	28 17       	cp	r18, r24
  f0:	39 07       	cpc	r19, r25
  f2:	a8 f3       	brcs	.-22     	; 0xde <us_delay+0x6>
		asm("PUSH R0"); 	// 2 cycle +
		asm("POP R0"); 		// 2 cycle + =12 cycle for 11.0592MHZ
		asm("PUSH R0"); 	// 2 cycle +
		asm("POP R0"); 		// 2 cycle = 16 cycle = 1us for 16MHz
	}
}
  f4:	08 95       	ret

000000f6 <ms_delay>:

void ms_delay(unsigned int ms_time)
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	8c 01       	movw	r16, r24
    unsigned int i;
    
    for(i=0; i<ms_time;i++)
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
 104:	05 c0       	rjmp	.+10     	; 0x110 <ms_delay+0x1a>
        us_delay(1000);
 106:	88 ee       	ldi	r24, 0xE8	; 232
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	0e 94 6c 00 	call	0xd8	; 0xd8 <us_delay>

void ms_delay(unsigned int ms_time)
{
    unsigned int i;
    
    for(i=0; i<ms_time;i++)
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	c0 17       	cp	r28, r16
 112:	d1 07       	cpc	r29, r17
 114:	c0 f3       	brcs	.-16     	; 0x106 <ms_delay+0x10>
        us_delay(1000);
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <initAdc>:
//=========================================================
// AD 변환 
//=========================================================
void initAdc(void)
{
   	ADMUX = 0x00;	    
 120:	10 92 7c 00 	sts	0x007C, r1
	DDRF  = 0x00;		
 124:	10 ba       	out	0x10, r1	; 16
	DIDR0 = 0x07;	// 디지털 입력 불가 PortF[3..0]
 126:	87 e0       	ldi	r24, 0x07	; 7
 128:	80 93 7e 00 	sts	0x007E, r24
   	ADCSRA= 0xC8;	  	
 12c:	88 ec       	ldi	r24, 0xC8	; 200
 12e:	80 93 7a 00 	sts	0x007A, r24

}
 132:	08 95       	ret

00000134 <__vector_25>:

SIGNAL(ADC_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
	ADdata= ADC;	// AD변환 데이터를 ADdata 에 저장 ( Register에 있는값을 전역변수 ADdata에 옮겨 사용하기 쉽게 이용한다. )
 142:	80 91 78 00 	lds	r24, 0x0078
 146:	90 91 79 00 	lds	r25, 0x0079
 14a:	90 93 a5 01 	sts	0x01A5, r25
 14e:	80 93 a4 01 	sts	0x01A4, r24
   	ADCSRA= 0xC8;   	    // ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블 
 152:	88 ec       	ldi	r24, 0xC8	; 200
 154:	80 93 7a 00 	sts	0x007A, r24
					// ADC 클럭 설정; XTAL의1/2(8MHz)
}
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <initPort>:

// 입출력 초기화 
void initPort(void)
{
	DDRC  = 0xff;	// LCD 데이터 및 명령 
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 16a:	18 b8       	out	0x08, r1	; 8
	DDRG  = 0x0f;	// LCD 제어 출력 (RS, RW, E)
 16c:	8f e0       	ldi	r24, 0x0F	; 15
 16e:	83 bb       	out	0x13, r24	; 19
	DDRF  = 0x00;	
 170:	10 ba       	out	0x10, r1	; 16

	DDRE  = 0x00;
 172:	1d b8       	out	0x0d, r1	; 13
}
 174:	08 95       	ret

00000176 <ArraySelect>:

// CdS센서의 AD변환 값에 따라서 array 배열의 행 주소 리턴  
unsigned char *ArraySelect(void)
{

	if(ADdata>1000) return array[0];
 176:	80 91 a4 01 	lds	r24, 0x01A4
 17a:	90 91 a5 01 	lds	r25, 0x01A5
 17e:	23 e0       	ldi	r18, 0x03	; 3
 180:	89 3e       	cpi	r24, 0xE9	; 233
 182:	92 07       	cpc	r25, r18
 184:	18 f0       	brcs	.+6      	; 0x18c <ArraySelect+0x16>
 186:	29 e2       	ldi	r18, 0x29	; 41
 188:	31 e0       	ldi	r19, 0x01	; 1
 18a:	3a c0       	rjmp	.+116    	; 0x200 <ArraySelect+0x8a>
	else if(ADdata>950) return array[1];
 18c:	23 e0       	ldi	r18, 0x03	; 3
 18e:	87 3b       	cpi	r24, 0xB7	; 183
 190:	92 07       	cpc	r25, r18
 192:	18 f0       	brcs	.+6      	; 0x19a <ArraySelect+0x24>
 194:	23 e3       	ldi	r18, 0x33	; 51
 196:	31 e0       	ldi	r19, 0x01	; 1
 198:	33 c0       	rjmp	.+102    	; 0x200 <ArraySelect+0x8a>
	else if(ADdata>900) return array[2];
 19a:	23 e0       	ldi	r18, 0x03	; 3
 19c:	85 38       	cpi	r24, 0x85	; 133
 19e:	92 07       	cpc	r25, r18
 1a0:	18 f0       	brcs	.+6      	; 0x1a8 <ArraySelect+0x32>
 1a2:	2d e3       	ldi	r18, 0x3D	; 61
 1a4:	31 e0       	ldi	r19, 0x01	; 1
 1a6:	2c c0       	rjmp	.+88     	; 0x200 <ArraySelect+0x8a>
	else if(ADdata>850) return array[3];
 1a8:	23 e0       	ldi	r18, 0x03	; 3
 1aa:	83 35       	cpi	r24, 0x53	; 83
 1ac:	92 07       	cpc	r25, r18
 1ae:	18 f0       	brcs	.+6      	; 0x1b6 <ArraySelect+0x40>
 1b0:	27 e4       	ldi	r18, 0x47	; 71
 1b2:	31 e0       	ldi	r19, 0x01	; 1
 1b4:	25 c0       	rjmp	.+74     	; 0x200 <ArraySelect+0x8a>
	else if(ADdata>800) return array[4];
 1b6:	23 e0       	ldi	r18, 0x03	; 3
 1b8:	81 32       	cpi	r24, 0x21	; 33
 1ba:	92 07       	cpc	r25, r18
 1bc:	18 f0       	brcs	.+6      	; 0x1c4 <ArraySelect+0x4e>
 1be:	21 e5       	ldi	r18, 0x51	; 81
 1c0:	31 e0       	ldi	r19, 0x01	; 1
 1c2:	1e c0       	rjmp	.+60     	; 0x200 <ArraySelect+0x8a>
	else if(ADdata>750) return array[5];
 1c4:	22 e0       	ldi	r18, 0x02	; 2
 1c6:	8f 3e       	cpi	r24, 0xEF	; 239
 1c8:	92 07       	cpc	r25, r18
 1ca:	18 f0       	brcs	.+6      	; 0x1d2 <ArraySelect+0x5c>
 1cc:	2b e5       	ldi	r18, 0x5B	; 91
 1ce:	31 e0       	ldi	r19, 0x01	; 1
 1d0:	17 c0       	rjmp	.+46     	; 0x200 <ArraySelect+0x8a>
	else if(ADdata>700) return array[6];
 1d2:	22 e0       	ldi	r18, 0x02	; 2
 1d4:	8d 3b       	cpi	r24, 0xBD	; 189
 1d6:	92 07       	cpc	r25, r18
 1d8:	18 f0       	brcs	.+6      	; 0x1e0 <ArraySelect+0x6a>
 1da:	25 e6       	ldi	r18, 0x65	; 101
 1dc:	31 e0       	ldi	r19, 0x01	; 1
 1de:	10 c0       	rjmp	.+32     	; 0x200 <ArraySelect+0x8a>
	else if(ADdata>650) return array[7];
 1e0:	22 e0       	ldi	r18, 0x02	; 2
 1e2:	8b 38       	cpi	r24, 0x8B	; 139
 1e4:	92 07       	cpc	r25, r18
 1e6:	18 f0       	brcs	.+6      	; 0x1ee <ArraySelect+0x78>
 1e8:	2f e6       	ldi	r18, 0x6F	; 111
 1ea:	31 e0       	ldi	r19, 0x01	; 1
 1ec:	09 c0       	rjmp	.+18     	; 0x200 <ArraySelect+0x8a>
	else if(ADdata>600) return array[8];
 1ee:	22 e0       	ldi	r18, 0x02	; 2
 1f0:	89 35       	cpi	r24, 0x59	; 89
 1f2:	92 07       	cpc	r25, r18
 1f4:	18 f0       	brcs	.+6      	; 0x1fc <ArraySelect+0x86>
 1f6:	29 e7       	ldi	r18, 0x79	; 121
 1f8:	31 e0       	ldi	r19, 0x01	; 1
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <ArraySelect+0x8a>

	return array[9];
 1fc:	23 e8       	ldi	r18, 0x83	; 131
 1fe:	31 e0       	ldi	r19, 0x01	; 1
}
 200:	c9 01       	movw	r24, r18
 202:	08 95       	ret

00000204 <ADC2Temp>:


unsigned int ADC2Temp(int get_ADC)
{
	unsigned int ADC_temp;
	ADC_temp = get_ADC/20;
 204:	64 e1       	ldi	r22, 0x14	; 20
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodhi4>

	return ADC_temp;
}
 20c:	cb 01       	movw	r24, r22
 20e:	08 95       	ret

00000210 <main>:

int main(void)
{
 210:	2f 92       	push	r2
 212:	3f 92       	push	r3
 214:	4f 92       	push	r4
 216:	5f 92       	push	r5
 218:	6f 92       	push	r6
 21a:	7f 92       	push	r7
 21c:	8f 92       	push	r8
 21e:	9f 92       	push	r9
 220:	af 92       	push	r10
 222:	bf 92       	push	r11
 224:	cf 92       	push	r12
 226:	df 92       	push	r13
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	df 93       	push	r29
 232:	cf 93       	push	r28
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	29 97       	sbiw	r28, 0x09	; 9
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61

	}

#elif Experiment == 3     //힌트 : 실험2와 같은 방식으로 구현한다.
	unsigned char temp;
	initPort();		// 입출력 포트 초기화
 244:	0e 94 b3 00 	call	0x166	; 0x166 <initPort>
    LCD_init();     // LCD 초기화
 248:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_init>
	initAdc();		// AD 변환 초기화
 24c:	0e 94 90 00 	call	0x120	; 0x120 <initAdc>

	sei();			// INT 인에이블 : 3장에서 배울예정. 인터럽트를 사용하기 위하여 전체인터럽트를 허용해주는 함수이다.
 250:	78 94       	sei

	LCD_cmd(0x01);	// LCD 화면 지우기 
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_cmd>
	ms_delay(50);	// 50ms 지연 
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 7b 00 	call	0xf6	; 0xf6 <ms_delay>

	LCD_Write(0,0, table1);	// 초기 글자 출력
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	49 e0       	ldi	r20, 0x09	; 9
 266:	51 e0       	ldi	r21, 0x01	; 1
 268:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write>
	LCD_Write(0,1, table2);
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	49 e1       	ldi	r20, 0x19	; 25
 272:	51 e0       	ldi	r21, 0x01	; 1
 274:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write>
	ms_delay(200);
 278:	88 ec       	ldi	r24, 0xC8	; 200
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 7b 00 	call	0xf6	; 0xf6 <ms_delay>

	LCD_cmd(0x01);	// LCD 화면 지우기 
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_cmd>
	ms_delay(100);
 286:	84 e6       	ldi	r24, 0x64	; 100
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 7b 00 	call	0xf6	; 0xf6 <ms_delay>
	{	
		/*****************************************
		 실험3 ADC2Temp() 함수를 이용하여 코드작성
		******************************************/
		temp = ADC2Temp(ADdata);
		char num[] = "00000000";
 28e:	4e 01       	movw	r8, r28
 290:	08 94       	sec
 292:	81 1c       	adc	r8, r1
 294:	91 1c       	adc	r9, r1
		num[7] = '0' + temp%10;
		num[6] = '0' + temp%100 /10;
		num[5] = '0' + temp%1000 /100;
 296:	28 ee       	ldi	r18, 0xE8	; 232
 298:	22 2e       	mov	r2, r18
 29a:	23 e0       	ldi	r18, 0x03	; 3
 29c:	32 2e       	mov	r3, r18
		num[4] = '0' + temp%10000 /1000;
		num[3] = '0' + temp%100000 /10000;
 29e:	90 ea       	ldi	r25, 0xA0	; 160
 2a0:	a9 2e       	mov	r10, r25
 2a2:	96 e8       	ldi	r25, 0x86	; 134
 2a4:	b9 2e       	mov	r11, r25
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	c9 2e       	mov	r12, r25
 2aa:	d1 2c       	mov	r13, r1
		num[2] = '0' + temp%1000000 /100000;
		num[1] = '0' + temp%10000000 /100000;
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	48 2e       	mov	r4, r24
 2b0:	86 e9       	ldi	r24, 0x96	; 150
 2b2:	58 2e       	mov	r5, r24
 2b4:	88 e9       	ldi	r24, 0x98	; 152
 2b6:	68 2e       	mov	r6, r24
 2b8:	71 2c       	mov	r7, r1


unsigned int ADC2Temp(int get_ADC)
{
	unsigned int ADC_temp;
	ADC_temp = get_ADC/20;
 2ba:	80 91 a4 01 	lds	r24, 0x01A4
 2be:	90 91 a5 01 	lds	r25, 0x01A5
 2c2:	64 e1       	ldi	r22, 0x14	; 20
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodhi4>
	while(1)
	{	
		/*****************************************
		 실험3 ADC2Temp() 함수를 이용하여 코드작성
		******************************************/
		temp = ADC2Temp(ADdata);
 2ca:	26 2f       	mov	r18, r22
		char num[] = "00000000";
 2cc:	f4 01       	movw	r30, r8
 2ce:	a0 e0       	ldi	r26, 0x00	; 0
 2d0:	b1 e0       	ldi	r27, 0x01	; 1
 2d2:	89 e0       	ldi	r24, 0x09	; 9
 2d4:	0d 90       	ld	r0, X+
 2d6:	01 92       	st	Z+, r0
 2d8:	81 50       	subi	r24, 0x01	; 1
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0xc4>
		num[7] = '0' + temp%10;
 2dc:	82 2f       	mov	r24, r18
 2de:	6a e0       	ldi	r22, 0x0A	; 10
 2e0:	0e 94 47 02 	call	0x48e	; 0x48e <__udivmodqi4>
 2e4:	90 5d       	subi	r25, 0xD0	; 208
 2e6:	98 87       	std	Y+8, r25	; 0x08
		num[6] = '0' + temp%100 /10;
 2e8:	82 2f       	mov	r24, r18
 2ea:	64 e6       	ldi	r22, 0x64	; 100
 2ec:	0e 94 47 02 	call	0x48e	; 0x48e <__udivmodqi4>
 2f0:	89 2f       	mov	r24, r25
 2f2:	6a e0       	ldi	r22, 0x0A	; 10
 2f4:	0e 94 47 02 	call	0x48e	; 0x48e <__udivmodqi4>
 2f8:	80 5d       	subi	r24, 0xD0	; 208
 2fa:	8f 83       	std	Y+7, r24	; 0x07
		num[5] = '0' + temp%1000 /100;
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	82 2f       	mov	r24, r18
 300:	94 2f       	mov	r25, r20
 302:	b1 01       	movw	r22, r2
 304:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodhi4>
 308:	64 e6       	ldi	r22, 0x64	; 100
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodhi4>
 310:	60 5d       	subi	r22, 0xD0	; 208
 312:	6e 83       	std	Y+6, r22	; 0x06
		num[4] = '0' + temp%10000 /1000;
 314:	82 2f       	mov	r24, r18
 316:	94 2f       	mov	r25, r20
 318:	60 e1       	ldi	r22, 0x10	; 16
 31a:	77 e2       	ldi	r23, 0x27	; 39
 31c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodhi4>
 320:	b1 01       	movw	r22, r2
 322:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divmodhi4>
 326:	60 5d       	subi	r22, 0xD0	; 208
 328:	6d 83       	std	Y+5, r22	; 0x05
		num[3] = '0' + temp%100000 /10000;
 32a:	e2 2e       	mov	r14, r18
 32c:	ff 24       	eor	r15, r15
 32e:	00 e0       	ldi	r16, 0x00	; 0
 330:	10 e0       	ldi	r17, 0x00	; 0
 332:	c8 01       	movw	r24, r16
 334:	b7 01       	movw	r22, r14
 336:	a6 01       	movw	r20, r12
 338:	95 01       	movw	r18, r10
 33a:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodsi4>
 33e:	20 e1       	ldi	r18, 0x10	; 16
 340:	37 e2       	ldi	r19, 0x27	; 39
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodsi4>
 34a:	20 5d       	subi	r18, 0xD0	; 208
 34c:	2c 83       	std	Y+4, r18	; 0x04
		num[2] = '0' + temp%1000000 /100000;
 34e:	c8 01       	movw	r24, r16
 350:	b7 01       	movw	r22, r14
 352:	20 e4       	ldi	r18, 0x40	; 64
 354:	32 e4       	ldi	r19, 0x42	; 66
 356:	4f e0       	ldi	r20, 0x0F	; 15
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodsi4>
 35e:	a6 01       	movw	r20, r12
 360:	95 01       	movw	r18, r10
 362:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodsi4>
 366:	20 5d       	subi	r18, 0xD0	; 208
 368:	2b 83       	std	Y+3, r18	; 0x03
		num[1] = '0' + temp%10000000 /100000;
 36a:	c8 01       	movw	r24, r16
 36c:	b7 01       	movw	r22, r14
 36e:	a3 01       	movw	r20, r6
 370:	92 01       	movw	r18, r4
 372:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodsi4>
 376:	a6 01       	movw	r20, r12
 378:	95 01       	movw	r18, r10
 37a:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodsi4>
 37e:	20 5d       	subi	r18, 0xD0	; 208
 380:	2a 83       	std	Y+2, r18	; 0x02
		num[0] = '0' + temp%100000000 /10000000;
 382:	c8 01       	movw	r24, r16
 384:	b7 01       	movw	r22, r14
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	31 ee       	ldi	r19, 0xE1	; 225
 38a:	45 ef       	ldi	r20, 0xF5	; 245
 38c:	55 e0       	ldi	r21, 0x05	; 5
 38e:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodsi4>
 392:	a3 01       	movw	r20, r6
 394:	92 01       	movw	r18, r4
 396:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodsi4>
 39a:	20 5d       	subi	r18, 0xD0	; 208
 39c:	29 83       	std	Y+1, r18	; 0x01
		LCD_Write(0,1, num);
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	a4 01       	movw	r20, r8
 3a4:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write>
 3a8:	88 cf       	rjmp	.-240    	; 0x2ba <main+0xaa>

000003aa <E_Pulse>:
#define EN_0      (PORTG &= 0xFB)

//LCD Functions =================================================
void E_Pulse(void)
{
	EN_1;
 3aa:	a2 9a       	sbi	0x14, 2	; 20

	us_delay(100);
 3ac:	84 e6       	ldi	r24, 0x64	; 100
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 6c 00 	call	0xd8	; 0xd8 <us_delay>

	EN_0;
 3b4:	a2 98       	cbi	0x14, 2	; 20
}
 3b6:	08 95       	ret

000003b8 <LCD_init>:

void LCD_init(void)
{
	ms_delay(40);
 3b8:	88 e2       	ldi	r24, 0x28	; 40
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 7b 00 	call	0xf6	; 0xf6 <ms_delay>

	PORTC = 0x38;	// Function Set
 3c0:	88 e3       	ldi	r24, 0x38	; 56
 3c2:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
 3c4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <E_Pulse>
    us_delay(40);
 3c8:	88 e2       	ldi	r24, 0x28	; 40
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 6c 00 	call	0xd8	; 0xd8 <us_delay>

	PORTC = 0x0c; // DisPlay ON/OFF Control
 3d0:	8c e0       	ldi	r24, 0x0C	; 12
 3d2:	88 b9       	out	0x08, r24	; 8
	us_delay(40);
 3d4:	88 e2       	ldi	r24, 0x28	; 40
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 6c 00 	call	0xd8	; 0xd8 <us_delay>
	E_Pulse();
 3dc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <E_Pulse>
	
	PORTC = 0x01; // Display Clear
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	88 b9       	out	0x08, r24	; 8
	ms_delay(2);
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 7b 00 	call	0xf6	; 0xf6 <ms_delay>
	E_Pulse();
 3ec:	0e 94 d5 01 	call	0x3aa	; 0x3aa <E_Pulse>

	PORTC = 0x06; // Entry Mode Set
 3f0:	86 e0       	ldi	r24, 0x06	; 6
 3f2:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
 3f4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <E_Pulse>
}
 3f8:	08 95       	ret

000003fa <LCD_cmd>:

void LCD_cmd(unsigned char cmd)
{
	LCD_RS_0;
 3fa:	a0 98       	cbi	0x14, 0	; 20
	LCD_RW_0;
 3fc:	a1 98       	cbi	0x14, 1	; 20
	PORTC=cmd;
 3fe:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
 400:	0e 94 d5 01 	call	0x3aa	; 0x3aa <E_Pulse>
}	
 404:	08 95       	ret

00000406 <Write_Char>:

void Write_Char(unsigned char buf)
{
	LCD_RS_1;
 406:	a0 9a       	sbi	0x14, 0	; 20
	LCD_RW_0;
 408:	a1 98       	cbi	0x14, 1	; 20
	PORTC=buf;
 40a:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
 40c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <E_Pulse>
}	
 410:	08 95       	ret

00000412 <LCD_Disp>:

void LCD_Disp(char x,char y)
{
	LCD_RS_0;
 412:	a0 98       	cbi	0x14, 0	; 20
	LCD_RW_0;
 414:	a1 98       	cbi	0x14, 1	; 20

	if(y==0) PORTC = x + 0x80;
 416:	66 23       	and	r22, r22
 418:	11 f4       	brne	.+4      	; 0x41e <LCD_Disp+0xc>
 41a:	80 58       	subi	r24, 0x80	; 128
 41c:	03 c0       	rjmp	.+6      	; 0x424 <LCD_Disp+0x12>
	else if(y==1) PORTC = x + 0xc0;
 41e:	61 30       	cpi	r22, 0x01	; 1
 420:	11 f4       	brne	.+4      	; 0x426 <LCD_Disp+0x14>
 422:	80 54       	subi	r24, 0x40	; 64
 424:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
 426:	0e 94 d5 01 	call	0x3aa	; 0x3aa <E_Pulse>
}
 42a:	08 95       	ret

0000042c <LCD_Write>:
 
void LCD_Write(char x, char y,char *str)
{
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	df 93       	push	r29
 436:	cf 93       	push	r28
 438:	00 d0       	rcall	.+0      	; 0x43a <LCD_Write+0xe>
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
	LCD_Disp(x,y);
 43e:	49 83       	std	Y+1, r20	; 0x01
 440:	5a 83       	std	Y+2, r21	; 0x02
 442:	0e 94 09 02 	call	0x412	; 0x412 <LCD_Disp>
 446:	49 81       	ldd	r20, Y+1	; 0x01
 448:	5a 81       	ldd	r21, Y+2	; 0x02
 44a:	8a 01       	movw	r16, r20
	while(*str)
 44c:	02 c0       	rjmp	.+4      	; 0x452 <LCD_Write+0x26>
	Write_Char(*str++);
 44e:	0e 94 03 02 	call	0x406	; 0x406 <Write_Char>
}
 
void LCD_Write(char x, char y,char *str)
{
	LCD_Disp(x,y);
	while(*str)
 452:	f8 01       	movw	r30, r16
 454:	81 91       	ld	r24, Z+
 456:	8f 01       	movw	r16, r30
 458:	88 23       	and	r24, r24
 45a:	c9 f7       	brne	.-14     	; 0x44e <LCD_Write+0x22>
	Write_Char(*str++);
}
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	cf 91       	pop	r28
 462:	df 91       	pop	r29
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	ff 90       	pop	r15
 46a:	ef 90       	pop	r14
 46c:	08 95       	ret

0000046e <LCD_Write_char>:

void LCD_Write_char(char x, char y, unsigned char ch)
{
 46e:	df 93       	push	r29
 470:	cf 93       	push	r28
 472:	0f 92       	push	r0
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
	LCD_Disp(x,y);
 478:	49 83       	std	Y+1, r20	; 0x01
 47a:	0e 94 09 02 	call	0x412	; 0x412 <LCD_Disp>
	Write_Char(ch);
 47e:	49 81       	ldd	r20, Y+1	; 0x01
 480:	84 2f       	mov	r24, r20
 482:	0e 94 03 02 	call	0x406	; 0x406 <Write_Char>
}
 486:	0f 90       	pop	r0
 488:	cf 91       	pop	r28
 48a:	df 91       	pop	r29
 48c:	08 95       	ret

0000048e <__udivmodqi4>:
 48e:	99 1b       	sub	r25, r25
 490:	79 e0       	ldi	r23, 0x09	; 9
 492:	04 c0       	rjmp	.+8      	; 0x49c <__udivmodqi4_ep>

00000494 <__udivmodqi4_loop>:
 494:	99 1f       	adc	r25, r25
 496:	96 17       	cp	r25, r22
 498:	08 f0       	brcs	.+2      	; 0x49c <__udivmodqi4_ep>
 49a:	96 1b       	sub	r25, r22

0000049c <__udivmodqi4_ep>:
 49c:	88 1f       	adc	r24, r24
 49e:	7a 95       	dec	r23
 4a0:	c9 f7       	brne	.-14     	; 0x494 <__udivmodqi4_loop>
 4a2:	80 95       	com	r24
 4a4:	08 95       	ret

000004a6 <__divmodhi4>:
 4a6:	97 fb       	bst	r25, 7
 4a8:	09 2e       	mov	r0, r25
 4aa:	07 26       	eor	r0, r23
 4ac:	0a d0       	rcall	.+20     	; 0x4c2 <__divmodhi4_neg1>
 4ae:	77 fd       	sbrc	r23, 7
 4b0:	04 d0       	rcall	.+8      	; 0x4ba <__divmodhi4_neg2>
 4b2:	27 d0       	rcall	.+78     	; 0x502 <__udivmodhi4>
 4b4:	06 d0       	rcall	.+12     	; 0x4c2 <__divmodhi4_neg1>
 4b6:	00 20       	and	r0, r0
 4b8:	1a f4       	brpl	.+6      	; 0x4c0 <__divmodhi4_exit>

000004ba <__divmodhi4_neg2>:
 4ba:	70 95       	com	r23
 4bc:	61 95       	neg	r22
 4be:	7f 4f       	sbci	r23, 0xFF	; 255

000004c0 <__divmodhi4_exit>:
 4c0:	08 95       	ret

000004c2 <__divmodhi4_neg1>:
 4c2:	f6 f7       	brtc	.-4      	; 0x4c0 <__divmodhi4_exit>
 4c4:	90 95       	com	r25
 4c6:	81 95       	neg	r24
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ca:	08 95       	ret

000004cc <__divmodsi4>:
 4cc:	97 fb       	bst	r25, 7
 4ce:	09 2e       	mov	r0, r25
 4d0:	05 26       	eor	r0, r21
 4d2:	0e d0       	rcall	.+28     	; 0x4f0 <__divmodsi4_neg1>
 4d4:	57 fd       	sbrc	r21, 7
 4d6:	04 d0       	rcall	.+8      	; 0x4e0 <__divmodsi4_neg2>
 4d8:	28 d0       	rcall	.+80     	; 0x52a <__udivmodsi4>
 4da:	0a d0       	rcall	.+20     	; 0x4f0 <__divmodsi4_neg1>
 4dc:	00 1c       	adc	r0, r0
 4de:	38 f4       	brcc	.+14     	; 0x4ee <__divmodsi4_exit>

000004e0 <__divmodsi4_neg2>:
 4e0:	50 95       	com	r21
 4e2:	40 95       	com	r20
 4e4:	30 95       	com	r19
 4e6:	21 95       	neg	r18
 4e8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ea:	4f 4f       	sbci	r20, 0xFF	; 255
 4ec:	5f 4f       	sbci	r21, 0xFF	; 255

000004ee <__divmodsi4_exit>:
 4ee:	08 95       	ret

000004f0 <__divmodsi4_neg1>:
 4f0:	f6 f7       	brtc	.-4      	; 0x4ee <__divmodsi4_exit>
 4f2:	90 95       	com	r25
 4f4:	80 95       	com	r24
 4f6:	70 95       	com	r23
 4f8:	61 95       	neg	r22
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	8f 4f       	sbci	r24, 0xFF	; 255
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	08 95       	ret

00000502 <__udivmodhi4>:
 502:	aa 1b       	sub	r26, r26
 504:	bb 1b       	sub	r27, r27
 506:	51 e1       	ldi	r21, 0x11	; 17
 508:	07 c0       	rjmp	.+14     	; 0x518 <__udivmodhi4_ep>

0000050a <__udivmodhi4_loop>:
 50a:	aa 1f       	adc	r26, r26
 50c:	bb 1f       	adc	r27, r27
 50e:	a6 17       	cp	r26, r22
 510:	b7 07       	cpc	r27, r23
 512:	10 f0       	brcs	.+4      	; 0x518 <__udivmodhi4_ep>
 514:	a6 1b       	sub	r26, r22
 516:	b7 0b       	sbc	r27, r23

00000518 <__udivmodhi4_ep>:
 518:	88 1f       	adc	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	5a 95       	dec	r21
 51e:	a9 f7       	brne	.-22     	; 0x50a <__udivmodhi4_loop>
 520:	80 95       	com	r24
 522:	90 95       	com	r25
 524:	bc 01       	movw	r22, r24
 526:	cd 01       	movw	r24, r26
 528:	08 95       	ret

0000052a <__udivmodsi4>:
 52a:	a1 e2       	ldi	r26, 0x21	; 33
 52c:	1a 2e       	mov	r1, r26
 52e:	aa 1b       	sub	r26, r26
 530:	bb 1b       	sub	r27, r27
 532:	fd 01       	movw	r30, r26
 534:	0d c0       	rjmp	.+26     	; 0x550 <__udivmodsi4_ep>

00000536 <__udivmodsi4_loop>:
 536:	aa 1f       	adc	r26, r26
 538:	bb 1f       	adc	r27, r27
 53a:	ee 1f       	adc	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	a2 17       	cp	r26, r18
 540:	b3 07       	cpc	r27, r19
 542:	e4 07       	cpc	r30, r20
 544:	f5 07       	cpc	r31, r21
 546:	20 f0       	brcs	.+8      	; 0x550 <__udivmodsi4_ep>
 548:	a2 1b       	sub	r26, r18
 54a:	b3 0b       	sbc	r27, r19
 54c:	e4 0b       	sbc	r30, r20
 54e:	f5 0b       	sbc	r31, r21

00000550 <__udivmodsi4_ep>:
 550:	66 1f       	adc	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	1a 94       	dec	r1
 55a:	69 f7       	brne	.-38     	; 0x536 <__udivmodsi4_loop>
 55c:	60 95       	com	r22
 55e:	70 95       	com	r23
 560:	80 95       	com	r24
 562:	90 95       	com	r25
 564:	9b 01       	movw	r18, r22
 566:	ac 01       	movw	r20, r24
 568:	bd 01       	movw	r22, r26
 56a:	cf 01       	movw	r24, r30
 56c:	08 95       	ret

0000056e <_exit>:
 56e:	f8 94       	cli

00000570 <__stop_program>:
 570:	ff cf       	rjmp	.-2      	; 0x570 <__stop_program>
