
CAN_NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a6  00800100  000024a4  00002538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  008002a6  008002a6  000026de  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000026e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00003364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000368  00000000  00000000  00003520  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c91  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001acd  00000000  00000000  00007519  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019a6  00000000  00000000  00008fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000704  00000000  00000000  0000a98c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000799  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000266e  00000000  00000000  0000b829  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000de97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__vector_5>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_16>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	12 e0       	ldi	r17, 0x02	; 2
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 ea       	ldi	r30, 0xA4	; 164
      a8:	f4 e2       	ldi	r31, 0x24	; 36
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 3a       	cpi	r26, 0xA6	; 166
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a6 ea       	ldi	r26, 0xA6	; 166
      be:	b2 e0       	ldi	r27, 0x02	; 2
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	af 3c       	cpi	r26, 0xCF	; 207
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 9b 0c 	call	0x1936	; 0x1936 <main>
      ce:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <can_init>:
//***************************************************************
void can_init (char baudRate)	// CAN초기화 
{
	unsigned char i, j;
	
	CANGCON |= (1<<SWRES);	// CAN 제어기 리셋
      d6:	90 91 d8 00 	lds	r25, 0x00D8
      da:	91 60       	ori	r25, 0x01	; 1
      dc:	90 93 d8 00 	sts	0x00D8, r25
							// CAN General Control Register
  							
	//보레이트 설정 ==============================================
	switch(baudRate){
      e0:	83 30       	cpi	r24, 0x03	; 3
      e2:	89 f0       	breq	.+34     	; 0x106 <can_init+0x30>
      e4:	84 30       	cpi	r24, 0x04	; 4
      e6:	28 f4       	brcc	.+10     	; 0xf2 <can_init+0x1c>
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	51 f0       	breq	.+20     	; 0x100 <can_init+0x2a>
      ec:	82 30       	cpi	r24, 0x02	; 2
      ee:	d1 f4       	brne	.+52     	; 0x124 <can_init+0x4e>
      f0:	11 c0       	rjmp	.+34     	; 0x114 <can_init+0x3e>
      f2:	85 30       	cpi	r24, 0x05	; 5
      f4:	61 f0       	breq	.+24     	; 0x10e <can_init+0x38>
      f6:	85 30       	cpi	r24, 0x05	; 5
      f8:	40 f0       	brcs	.+16     	; 0x10a <can_init+0x34>
      fa:	86 30       	cpi	r24, 0x06	; 6
      fc:	99 f4       	brne	.+38     	; 0x124 <can_init+0x4e>
      fe:	09 c0       	rjmp	.+18     	; 0x112 <can_init+0x3c>
		case b1M:
			CANBT1= 0x00;
     100:	10 92 e2 00 	sts	0x00E2, r1
     104:	09 c0       	rjmp	.+18     	; 0x118 <can_init+0x42>
			CANBT1= 0x02;
			CANBT2= 0x0c;
			CANBT3= 0x37;			
			break;
		case b250k:
			CANBT1= 0x06;	// CAN보레이트 설정 
     106:	86 e0       	ldi	r24, 0x06	; 6
     108:	05 c0       	rjmp	.+10     	; 0x114 <can_init+0x3e>
			CANBT2= 0x0c;	// bit timing: datasheet 264 (check table)
			CANBT3= 0x37;	// 250kbps, 16 MHz CPU Clock(0.250usec)
			break;
		case b200k:
			CANBT1= 0x08;
     10a:	88 e0       	ldi	r24, 0x08	; 8
     10c:	03 c0       	rjmp	.+6      	; 0x114 <can_init+0x3e>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;
		case b125k:
			CANBT1= 0x0E;
     10e:	8e e0       	ldi	r24, 0x0E	; 14
     110:	01 c0       	rjmp	.+2      	; 0x114 <can_init+0x3e>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;

		case b100k:
			CANBT1= 0x12;
     112:	82 e1       	ldi	r24, 0x12	; 18
     114:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0c;
     118:	8c e0       	ldi	r24, 0x0C	; 12
     11a:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x37;													
     11e:	87 e3       	ldi	r24, 0x37	; 55
     120:	80 93 e4 00 	sts	0x00E4, r24
// 6. CAN MOb 인터럽트 클리어(CAN MOb 인터럽트 사용하지 않음)
// 7. CAN 제어기 인에이블 모드 설정 
// 8. CAN 제어기 동작 확인 후 초기화 완료  									
//***************************************************************
void can_init (char baudRate)	// CAN초기화 
{
     124:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
	{
		CANPAGE = (i<<4);	// MOBNB3~0
     126:	98 2f       	mov	r25, r24
     128:	92 95       	swap	r25
     12a:	90 7f       	andi	r25, 0xF0	; 240
     12c:	90 93 ed 00 	sts	0x00ED, r25
							// MOb Number Select(0~14)
		CANCDMOB = 0;		// ALL Disable MOb
     130:	10 92 ef 00 	sts	0x00EF, r1
		CANSTMOB = 0;		// Clear status
     134:	10 92 ee 00 	sts	0x00EE, r1
		CANIDT1 = 0;		// Clear ID
     138:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;		// Clear ID
     13c:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;		// Clear ID
     140:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;		// Clear ID
     144:	10 92 f0 00 	sts	0x00F0, r1
		CANIDM1 = 0;		// Clear mask
     148:	10 92 f7 00 	sts	0x00F7, r1
		CANIDM2 = 0;		// Clear mask
     14c:	10 92 f6 00 	sts	0x00F6, r1
		CANIDM3 = 0;		// Clear mask
     150:	10 92 f5 00 	sts	0x00F5, r1
		CANIDM4 = 0;		// Clear mask
     154:	10 92 f4 00 	sts	0x00F4, r1

		for(j=0; j<8; j++)
			CANMSG = 0;		// CAN Data Message Register
     158:	10 92 fa 00 	sts	0x00FA, r1
     15c:	10 92 fa 00 	sts	0x00FA, r1
     160:	10 92 fa 00 	sts	0x00FA, r1
     164:	10 92 fa 00 	sts	0x00FA, r1
     168:	10 92 fa 00 	sts	0x00FA, r1
     16c:	10 92 fa 00 	sts	0x00FA, r1
     170:	10 92 fa 00 	sts	0x00FA, r1
     174:	10 92 fa 00 	sts	0x00FA, r1
			CANBT2= 0x0c;
			CANBT3= 0x37;													
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
     178:	8f 5f       	subi	r24, 0xFF	; 255
     17a:	8f 30       	cpi	r24, 0x0F	; 15
     17c:	a1 f6       	brne	.-88     	; 0x126 <can_init+0x50>
			CANMSG = 0;		// CAN Data Message Register
							// Clear data
	}
							
							// Clear CAN interrupt registers
	CANGIE = 0;				// CAN General Interrupt Enable Register 
     17e:	10 92 db 00 	sts	0x00DB, r1
							// None Interrupts
	CANIE1 = 0;				// CAN Enable INT MOb Registers 1
     182:	10 92 df 00 	sts	0x00DF, r1
							// None Interrupts on MObs
	CANIE2 = 0;				// CAN Enable INT MOb Registers 2
     186:	10 92 de 00 	sts	0x00DE, r1
							// None Interrupts on MObs
	CANSIT1 = 0;			// CAN Status INT MOb Registers 1
     18a:	10 92 e1 00 	sts	0x00E1, r1
							// None Interrupts on MObs
	CANSIT2 = 0;			// CAN Status INT MOb Registers 2
     18e:	10 92 e0 00 	sts	0x00E0, r1
							// None Interrupts on MObs

	//CANGCON = (1<<TTC );	// TTC mode *******************************************
	
	CANGCON |= (1<<ENASTB);	// CAN General Control Register 
     192:	80 91 d8 00 	lds	r24, 0x00D8
     196:	82 60       	ori	r24, 0x02	; 2
     198:	80 93 d8 00 	sts	0x00D8, r24
							// Enable Mode (11 Recessive Bits has Been read)
							// Start CAN interface

	while (!(CANGSTA & (1<<ENFG))); // CAN General Status Register (Enable Flag)
     19c:	80 91 d9 00 	lds	r24, 0x00D9
     1a0:	82 ff       	sbrs	r24, 2
     1a2:	fc cf       	rjmp	.-8      	; 0x19c <can_init+0xc6>
									// Wait until module ready
}
     1a4:	08 95       	ret

000001a6 <can_init_8Mhz>:
//***************************************************************
void can_init_8Mhz(char baudRate)	// CAN초기화 
{
	unsigned char i, j;
	
	CANGCON |= (1<<SWRES);	// CAN 제어기 리셋
     1a6:	90 91 d8 00 	lds	r25, 0x00D8
     1aa:	91 60       	ori	r25, 0x01	; 1
     1ac:	90 93 d8 00 	sts	0x00D8, r25
							// CAN General Control Register
  							
	//보레이트 설정 ==============================================
	switch(baudRate){
     1b0:	83 30       	cpi	r24, 0x03	; 3
     1b2:	c1 f0       	breq	.+48     	; 0x1e4 <can_init_8Mhz+0x3e>
     1b4:	84 30       	cpi	r24, 0x04	; 4
     1b6:	28 f4       	brcc	.+10     	; 0x1c2 <can_init_8Mhz+0x1c>
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	51 f0       	breq	.+20     	; 0x1d0 <can_init_8Mhz+0x2a>
     1bc:	82 30       	cpi	r24, 0x02	; 2
     1be:	39 f5       	brne	.+78     	; 0x20e <can_init_8Mhz+0x68>
     1c0:	0e c0       	rjmp	.+28     	; 0x1de <can_init_8Mhz+0x38>
     1c2:	85 30       	cpi	r24, 0x05	; 5
     1c4:	c9 f0       	breq	.+50     	; 0x1f8 <can_init_8Mhz+0x52>
     1c6:	85 30       	cpi	r24, 0x05	; 5
     1c8:	78 f0       	brcs	.+30     	; 0x1e8 <can_init_8Mhz+0x42>
     1ca:	86 30       	cpi	r24, 0x06	; 6
     1cc:	01 f5       	brne	.+64     	; 0x20e <can_init_8Mhz+0x68>
     1ce:	16 c0       	rjmp	.+44     	; 0x1fc <can_init_8Mhz+0x56>
		case b1M:
			CANBT1= 0x00;
     1d0:	10 92 e2 00 	sts	0x00E2, r1
			CANBT2= 0x04;
     1d4:	84 e0       	ldi	r24, 0x04	; 4
     1d6:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x13;
     1da:	83 e1       	ldi	r24, 0x13	; 19
     1dc:	16 c0       	rjmp	.+44     	; 0x20a <can_init_8Mhz+0x64>
			break;
		case b500k:
			CANBT1= 0x00;
     1de:	10 92 e2 00 	sts	0x00E2, r1
     1e2:	0f c0       	rjmp	.+30     	; 0x202 <can_init_8Mhz+0x5c>
			CANBT2= 0x0c;
			CANBT3= 0x37;			
			break;
		case b250k:
			CANBT1= 0x02;	// CAN baud rate set
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	0b c0       	rjmp	.+22     	; 0x1fe <can_init_8Mhz+0x58>
			CANBT2= 0x0c;	// bit timing: datasheet 264 (check table)
			CANBT3= 0x37;	// 250kbps 8 MHz CPU Clock(0.250usec)
			break;
		case b200k:
			CANBT1= 0x02;
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0e;
     1ee:	8e e0       	ldi	r24, 0x0E	; 14
     1f0:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x4b;
     1f4:	8b e4       	ldi	r24, 0x4B	; 75
     1f6:	09 c0       	rjmp	.+18     	; 0x20a <can_init_8Mhz+0x64>
			break;
		case b125k:
			CANBT1= 0x06;
     1f8:	86 e0       	ldi	r24, 0x06	; 6
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <can_init_8Mhz+0x58>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;
		case b100k:
			CANBT1= 0x08;
     1fc:	88 e0       	ldi	r24, 0x08	; 8
     1fe:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0c;
     202:	8c e0       	ldi	r24, 0x0C	; 12
     204:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x37;													
     208:	87 e3       	ldi	r24, 0x37	; 55
     20a:	80 93 e4 00 	sts	0x00E4, r24
// 6. CAN MOb 인터럽트 클리어(CAN MOb 인터럽트 사용하지 않음)
// 7. CAN 제어기 인에이블 모드 설정 
// 8. CAN 제어기 동작 확인 후 초기화 완료  									
//***************************************************************
void can_init_8Mhz(char baudRate)	// CAN초기화 
{
     20e:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
	{
		CANPAGE = (i<<4);	// MOBNB3~0
     210:	98 2f       	mov	r25, r24
     212:	92 95       	swap	r25
     214:	90 7f       	andi	r25, 0xF0	; 240
     216:	90 93 ed 00 	sts	0x00ED, r25
							// MOb Number Select(0~14)
		CANCDMOB = 0;		// ALL Disable MOb
     21a:	10 92 ef 00 	sts	0x00EF, r1
		CANSTMOB = 0;		// Clear status
     21e:	10 92 ee 00 	sts	0x00EE, r1
		CANIDT1 = 0;		// Clear ID
     222:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;		// Clear ID
     226:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;		// Clear ID
     22a:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;		// Clear ID
     22e:	10 92 f0 00 	sts	0x00F0, r1
		CANIDM1 = 0;		// Clear mask
     232:	10 92 f7 00 	sts	0x00F7, r1
		CANIDM2 = 0;		// Clear mask
     236:	10 92 f6 00 	sts	0x00F6, r1
		CANIDM3 = 0;		// Clear mask
     23a:	10 92 f5 00 	sts	0x00F5, r1
		CANIDM4 = 0;		// Clear mask
     23e:	10 92 f4 00 	sts	0x00F4, r1

		for(j=0; j<8; j++)
			CANMSG = 0;		// CAN Data Message Register
     242:	10 92 fa 00 	sts	0x00FA, r1
     246:	10 92 fa 00 	sts	0x00FA, r1
     24a:	10 92 fa 00 	sts	0x00FA, r1
     24e:	10 92 fa 00 	sts	0x00FA, r1
     252:	10 92 fa 00 	sts	0x00FA, r1
     256:	10 92 fa 00 	sts	0x00FA, r1
     25a:	10 92 fa 00 	sts	0x00FA, r1
     25e:	10 92 fa 00 	sts	0x00FA, r1
			CANBT2= 0x0c;
			CANBT3= 0x37;													
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	8f 30       	cpi	r24, 0x0F	; 15
     266:	a1 f6       	brne	.-88     	; 0x210 <can_init_8Mhz+0x6a>
			CANMSG = 0;		// CAN Data Message Register
							// Clear data
	}
							
							// Clear CAN interrupt registers
	CANGIE = 0;				// CAN General Interrupt Enable Register 
     268:	10 92 db 00 	sts	0x00DB, r1
							// None Interrupts
	CANIE1 = 0;				// CAN Enable INT MOb Registers 1
     26c:	10 92 df 00 	sts	0x00DF, r1
							// None Interrupts on MObs
	CANIE2 = 0;				// CAN Enable INT MOb Registers 2
     270:	10 92 de 00 	sts	0x00DE, r1
							// None Interrupts on MObs
	CANSIT1 = 0;			// CAN Status INT MOb Registers 1
     274:	10 92 e1 00 	sts	0x00E1, r1
							// None Interrupts on MObs
	CANSIT2 = 0;			// CAN Status INT MOb Registers 2
     278:	10 92 e0 00 	sts	0x00E0, r1
							// None Interrupts on MObs

	CANGCON = (1<<TTC );	// TTC mode *******************************************
     27c:	80 e2       	ldi	r24, 0x20	; 32
     27e:	80 93 d8 00 	sts	0x00D8, r24
	
	CANGCON |= (1<<ENASTB);	// CAN General Control Register 
     282:	80 91 d8 00 	lds	r24, 0x00D8
     286:	82 60       	ori	r24, 0x02	; 2
     288:	80 93 d8 00 	sts	0x00D8, r24
							// Enable Mode (11 Recessive Bits has Been read)
							// Start CAN interface

	while (!(CANGSTA & (1<<ENFG))); // CAN General Status Register (Enable Flag)
     28c:	80 91 d9 00 	lds	r24, 0x00D9
     290:	82 ff       	sbrs	r24, 2
     292:	fc cf       	rjmp	.-8      	; 0x28c <can_init_8Mhz+0xe6>
									// Wait until module ready
}
     294:	08 95       	ret

00000296 <can_tx>:
//		obj; MOb 번호 
//		msg; 메시지 구조체 
//		rtr; RTR r결정(0; 데이터 프레임, 1; 리모트 프레임)	
//***************************************************************
char can_tx (unsigned char obj, struct MOb *msg, char rtr)	// CAN transmission
{
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	fb 01       	movw	r30, r22
	//usart1_transmit_string("\rCAn loop in\n");

	char send_result = _SEND_FAIL;
	unsigned char i;	
	unsigned long can_id= msg->id;
     29c:	00 81       	ld	r16, Z
     29e:	11 81       	ldd	r17, Z+1	; 0x01
     2a0:	22 81       	ldd	r18, Z+2	; 0x02
     2a2:	33 81       	ldd	r19, Z+3	; 0x03
	
								// Enable MOb1, auto increment index, start with index = 0
	CANPAGE = (obj<<4);			// CAN Page MOb Register
     2a4:	82 95       	swap	r24
     2a6:	80 7f       	andi	r24, 0xF0	; 240
     2a8:	80 93 ed 00 	sts	0x00ED, r24
								// MOb Number Select

	//usart1_transmit_string("\rPAGE Clear\n");

	CANSTMOB = 0x00;
     2ac:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;
     2b0:	10 92 ef 00 	sts	0x00EF, r1
	
	//usart1_transmit_string("\rMOb Clear\n");

	if(msg->ide== 0x00)	// standard
     2b4:	85 81       	ldd	r24, Z+5	; 0x05
     2b6:	88 23       	and	r24, r24
     2b8:	a1 f4       	brne	.+40     	; 0x2e2 <can_tx+0x4c>
	{
		CANIDT1= (unsigned char)(can_id>>3);
     2ba:	d9 01       	movw	r26, r18
     2bc:	c8 01       	movw	r24, r16
     2be:	53 e0       	ldi	r21, 0x03	; 3
     2c0:	b6 95       	lsr	r27
     2c2:	a7 95       	ror	r26
     2c4:	97 95       	ror	r25
     2c6:	87 95       	ror	r24
     2c8:	5a 95       	dec	r21
     2ca:	d1 f7       	brne	.-12     	; 0x2c0 <can_tx+0x2a>
     2cc:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(can_id<<5);
     2d0:	02 95       	swap	r16
     2d2:	00 0f       	add	r16, r16
     2d4:	00 7e       	andi	r16, 0xE0	; 224
     2d6:	00 93 f2 00 	sts	0x00F2, r16

		CANCDMOB &= ~0x10;		// Set IDE bit 2.0A 11bits
     2da:	80 91 ef 00 	lds	r24, 0x00EF
     2de:	8f 7e       	andi	r24, 0xEF	; 239
     2e0:	29 c0       	rjmp	.+82     	; 0x334 <can_tx+0x9e>
		//usart1_transmit_string("\rstandard\n");
	}
	else	// extended
	{
		CANIDT1= (unsigned char)(can_id>>21);
     2e2:	d9 01       	movw	r26, r18
     2e4:	c8 01       	movw	r24, r16
     2e6:	55 e1       	ldi	r21, 0x15	; 21
     2e8:	b6 95       	lsr	r27
     2ea:	a7 95       	ror	r26
     2ec:	97 95       	ror	r25
     2ee:	87 95       	ror	r24
     2f0:	5a 95       	dec	r21
     2f2:	d1 f7       	brne	.-12     	; 0x2e8 <can_tx+0x52>
     2f4:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(can_id>>13);
     2f8:	d9 01       	movw	r26, r18
     2fa:	c8 01       	movw	r24, r16
     2fc:	6d e0       	ldi	r22, 0x0D	; 13
     2fe:	b6 95       	lsr	r27
     300:	a7 95       	ror	r26
     302:	97 95       	ror	r25
     304:	87 95       	ror	r24
     306:	6a 95       	dec	r22
     308:	d1 f7       	brne	.-12     	; 0x2fe <can_tx+0x68>
     30a:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(can_id>>5);
     30e:	d9 01       	movw	r26, r18
     310:	c8 01       	movw	r24, r16
     312:	75 e0       	ldi	r23, 0x05	; 5
     314:	b6 95       	lsr	r27
     316:	a7 95       	ror	r26
     318:	97 95       	ror	r25
     31a:	87 95       	ror	r24
     31c:	7a 95       	dec	r23
     31e:	d1 f7       	brne	.-12     	; 0x314 <can_tx+0x7e>
     320:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(can_id<<3);
     324:	00 0f       	add	r16, r16
     326:	00 0f       	add	r16, r16
     328:	00 0f       	add	r16, r16
     32a:	00 93 f0 00 	sts	0x00F0, r16

		CANCDMOB |= 0x10;		// Set IDE bit 2.0B 29bits
     32e:	80 91 ef 00 	lds	r24, 0x00EF
     332:	80 61       	ori	r24, 0x10	; 16
     334:	80 93 ef 00 	sts	0x00EF, r24
	//	usart1_transmit_string("\rExtended\n");
	}

	CANCDMOB |= (msg->dlc<<DLC0);	// set data length
     338:	80 91 ef 00 	lds	r24, 0x00EF
     33c:	96 81       	ldd	r25, Z+6	; 0x06
     33e:	89 2b       	or	r24, r25
     340:	80 93 ef 00 	sts	0x00EF, r24

	//usart1_transmit_string("\rDLC Clear\n");	

	CANIDT4 |= (rtr & 0x04);     // RTRTAG 설정;
     344:	80 91 f0 00 	lds	r24, 0x00F0
     348:	44 70       	andi	r20, 0x04	; 4
     34a:	48 2b       	or	r20, r24
     34c:	40 93 f0 00 	sts	0x00F0, r20

	CANIDT4 &= ~0x02;		   // RB1TAG=0;
     350:	80 91 f0 00 	lds	r24, 0x00F0
     354:	8d 7f       	andi	r24, 0xFD	; 253
     356:	80 93 f0 00 	sts	0x00F0, r24
	CANIDT4 &= ~0x01;		   // RB0TAG=1;
     35a:	80 91 f0 00 	lds	r24, 0x00F0
     35e:	8e 7f       	andi	r24, 0xFE	; 254
     360:	80 93 f0 00 	sts	0x00F0, r24

	//usart1_transmit_string("\rRTR Clear\n");	

	//put data in mailbox
	for(i=0; i<msg->dlc; i++)
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	09 c0       	rjmp	.+18     	; 0x37a <can_tx+0xe4>
		CANMSG = msg->data[i];	// full message 
     368:	df 01       	movw	r26, r30
     36a:	a8 0f       	add	r26, r24
     36c:	b1 1d       	adc	r27, r1
     36e:	17 96       	adiw	r26, 0x07	; 7
     370:	9c 91       	ld	r25, X
     372:	17 97       	sbiw	r26, 0x07	; 7
     374:	90 93 fa 00 	sts	0x00FA, r25
	CANIDT4 &= ~0x01;		   // RB0TAG=1;

	//usart1_transmit_string("\rRTR Clear\n");	

	//put data in mailbox
	for(i=0; i<msg->dlc; i++)
     378:	8f 5f       	subi	r24, 0xFF	; 255
     37a:	96 81       	ldd	r25, Z+6	; 0x06
     37c:	89 17       	cp	r24, r25
     37e:	a0 f3       	brcs	.-24     	; 0x368 <can_tx+0xd2>
		CANMSG = msg->data[i];	// full message 

	//usart1_transmit_string("\rMSG Clear\n");	

	//enable transmission		
	CANCDMOB |= (1<<CONMOB0);
     380:	80 91 ef 00 	lds	r24, 0x00EF
     384:	80 64       	ori	r24, 0x40	; 64
     386:	80 93 ef 00 	sts	0x00EF, r24

	//usart1_transmit_string("\renable transmissionr\n");	

	while (!(CANSTMOB & (1<<TXOK)));	// check tx ok
     38a:	80 91 ee 00 	lds	r24, 0x00EE
     38e:	86 ff       	sbrs	r24, 6
     390:	fc cf       	rjmp	.-8      	; 0x38a <can_tx+0xf4>

	// monitoring with serial com
	//usart1_transmit_string("\rTXOK\n");

	//reset flag
	CANSTMOB &= ~(1<<TXOK);
     392:	80 91 ee 00 	lds	r24, 0x00EE
     396:	8f 7b       	andi	r24, 0xBF	; 191
     398:	80 93 ee 00 	sts	0x00EE, r24

	return(send_result);
}
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	08 95       	ret

000003a4 <can_rx>:
// 5. IDE 수신 처리 
// 6. DLC 수신 처리 
// 7. Data 수신 처리 
//***************************************************************
char can_rx(unsigned char obj, struct MOb *msg)		
{
     3a4:	cf 92       	push	r12
     3a6:	df 92       	push	r13
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	fb 01       	movw	r30, r22
	char rece_result = _RECE_FAIL;
	unsigned char i;	
	unsigned long can_id= 0;
	
	CANPAGE = (obj<<4);				// 수신 MOb 선택 
     3b2:	82 95       	swap	r24
     3b4:	80 7f       	andi	r24, 0xF0	; 240
     3b6:	80 93 ed 00 	sts	0x00ED, r24
	//usart1_transmit_string("\rRX MOb #");
	//usart1_transmit(obj+0x30);
	//usart1_transmit_string("\r\n");

	// 수신 완료될 때까지 대기함 
	while(!(CANSTMOB&(1<<RXOK)));
     3ba:	80 91 ee 00 	lds	r24, 0x00EE
     3be:	85 ff       	sbrs	r24, 5
     3c0:	fc cf       	rjmp	.-8      	; 0x3ba <can_rx+0x16>
	// get CANIDT and CANCDMOB and CANMSg
	//usart1_transmit_string("\rRXOK\n");
	rece_result = _RECE_OK;

	// 표준 혹은 확장 포맷에 맞추어 ID, IDE 결정 
	if((CANCDMOB & 0x10) == 0x00){			// IDE standard ?
     3c2:	80 91 ef 00 	lds	r24, 0x00EF
     3c6:	84 fd       	sbrc	r24, 4
     3c8:	1b c0       	rjmp	.+54     	; 0x400 <can_rx+0x5c>
		msg->ide= STD;
     3ca:	15 82       	std	Z+5, r1	; 0x05
		can_id  = ((unsigned long)CANIDT1)<<8;
     3cc:	80 91 f3 00 	lds	r24, 0x00F3
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	a0 e0       	ldi	r26, 0x00	; 0
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	ba 2f       	mov	r27, r26
     3d8:	a9 2f       	mov	r26, r25
     3da:	98 2f       	mov	r25, r24
     3dc:	88 27       	eor	r24, r24
		can_id |= ((unsigned long)CANIDT2);
     3de:	40 91 f2 00 	lds	r20, 0x00F2
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	84 2b       	or	r24, r20
     3ea:	95 2b       	or	r25, r21
     3ec:	a6 2b       	or	r26, r22
     3ee:	b7 2b       	or	r27, r23
		can_id>>=5;
     3f0:	35 e0       	ldi	r19, 0x05	; 5
     3f2:	b6 95       	lsr	r27
     3f4:	a7 95       	ror	r26
     3f6:	97 95       	ror	r25
     3f8:	87 95       	ror	r24
     3fa:	3a 95       	dec	r19
     3fc:	d1 f7       	brne	.-12     	; 0x3f2 <can_rx+0x4e>
     3fe:	35 c0       	rjmp	.+106    	; 0x46a <can_rx+0xc6>
		//usart1_transmit_string("\rRx Standard\n");
	}
	else{
		msg->ide= EXT;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	85 83       	std	Z+5, r24	; 0x05
		can_id  = ((unsigned long)CANIDT1)<<24;
     404:	80 91 f3 00 	lds	r24, 0x00F3
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	a0 e0       	ldi	r26, 0x00	; 0
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	b8 2f       	mov	r27, r24
     410:	aa 27       	eor	r26, r26
     412:	99 27       	eor	r25, r25
     414:	88 27       	eor	r24, r24
		can_id |= ((unsigned long)CANIDT2)<<16;
     416:	c0 90 f2 00 	lds	r12, 0x00F2
		can_id |= ((unsigned long)CANIDT3)<<8;
     41a:	40 91 f1 00 	lds	r20, 0x00F1
		can_id |= ((unsigned long)CANIDT4);
     41e:	00 91 f0 00 	lds	r16, 0x00F0
		//usart1_transmit_string("\rRx Standard\n");
	}
	else{
		msg->ide= EXT;
		can_id  = ((unsigned long)CANIDT1)<<24;
		can_id |= ((unsigned long)CANIDT2)<<16;
     422:	dd 24       	eor	r13, r13
     424:	ee 24       	eor	r14, r14
     426:	ff 24       	eor	r15, r15
     428:	76 01       	movw	r14, r12
     42a:	dd 24       	eor	r13, r13
     42c:	cc 24       	eor	r12, r12
     42e:	8c 29       	or	r24, r12
     430:	9d 29       	or	r25, r13
     432:	ae 29       	or	r26, r14
     434:	bf 29       	or	r27, r15
		can_id |= ((unsigned long)CANIDT3)<<8;
		can_id |= ((unsigned long)CANIDT4);
     436:	10 e0       	ldi	r17, 0x00	; 0
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
	}
	else{
		msg->ide= EXT;
		can_id  = ((unsigned long)CANIDT1)<<24;
		can_id |= ((unsigned long)CANIDT2)<<16;
		can_id |= ((unsigned long)CANIDT3)<<8;
     43c:	80 2b       	or	r24, r16
     43e:	91 2b       	or	r25, r17
     440:	a2 2b       	or	r26, r18
     442:	b3 2b       	or	r27, r19
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	76 2f       	mov	r23, r22
     44c:	65 2f       	mov	r22, r21
     44e:	54 2f       	mov	r21, r20
     450:	44 27       	eor	r20, r20
		can_id |= ((unsigned long)CANIDT4);
     452:	84 2b       	or	r24, r20
     454:	95 2b       	or	r25, r21
     456:	a6 2b       	or	r26, r22
     458:	b7 2b       	or	r27, r23
		can_id>>=3;
     45a:	68 94       	set
     45c:	12 f8       	bld	r1, 2
     45e:	b6 95       	lsr	r27
     460:	a7 95       	ror	r26
     462:	97 95       	ror	r25
     464:	87 95       	ror	r24
     466:	16 94       	lsr	r1
     468:	d1 f7       	brne	.-12     	; 0x45e <can_rx+0xba>
		//usart1_transmit_string("\rRx Extended\n");
	}
	msg->id= can_id;			// 구조체 변수로 CANID 대입 
     46a:	80 83       	st	Z, r24
     46c:	91 83       	std	Z+1, r25	; 0x01
     46e:	a2 83       	std	Z+2, r26	; 0x02
     470:	b3 83       	std	Z+3, r27	; 0x03

	msg->rtr= CANIDT4 & 0x04;   
     472:	80 91 f0 00 	lds	r24, 0x00F0
     476:	84 70       	andi	r24, 0x04	; 4
     478:	84 83       	std	Z+4, r24	; 0x04

	msg->dlc= CANCDMOB & 0x0f;	// 수신 메시지 길이 구조체 변수에 대입 
     47a:	80 91 ef 00 	lds	r24, 0x00EF
     47e:	8f 70       	andi	r24, 0x0F	; 15
     480:	86 83       	std	Z+6, r24	; 0x06

	// get data
	for(i=0; i<(CANCDMOB&0xf); i++){
     482:	40 e0       	ldi	r20, 0x00	; 0
     484:	09 c0       	rjmp	.+18     	; 0x498 <can_rx+0xf4>
		msg->data[i] = CANMSG;	// 메시지 데이터 배열에 저장 
     486:	80 91 fa 00 	lds	r24, 0x00FA
     48a:	2e 0f       	add	r18, r30
     48c:	3f 1f       	adc	r19, r31
     48e:	d9 01       	movw	r26, r18
     490:	17 96       	adiw	r26, 0x07	; 7
     492:	8c 93       	st	X, r24
     494:	17 97       	sbiw	r26, 0x07	; 7
	msg->rtr= CANIDT4 & 0x04;   

	msg->dlc= CANCDMOB & 0x0f;	// 수신 메시지 길이 구조체 변수에 대입 

	// get data
	for(i=0; i<(CANCDMOB&0xf); i++){
     496:	4f 5f       	subi	r20, 0xFF	; 255
     498:	24 2f       	mov	r18, r20
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	80 91 ef 00 	lds	r24, 0x00EF
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	8f 70       	andi	r24, 0x0F	; 15
     4a4:	90 70       	andi	r25, 0x00	; 0
     4a6:	28 17       	cp	r18, r24
     4a8:	39 07       	cpc	r19, r25
     4aa:	6c f3       	brlt	.-38     	; 0x486 <can_rx+0xe2>
		msg->data[i] = CANMSG;	// 메시지 데이터 배열에 저장 
	}

	// rx init 
	CANSTMOB = 0x00;			// 상태 초기 화 
     4ac:	10 92 ee 00 	sts	0x00EE, r1

	// enable reception mode and ide set
	CANCDMOB |= (1<<CONMOB1); 	// 수신 IDE 유지하고 수신 모드 설정
     4b0:	80 91 ef 00 	lds	r24, 0x00EF
     4b4:	80 68       	ori	r24, 0x80	; 128
     4b6:	80 93 ef 00 	sts	0x00EF, r24

	// reset flag
	CANSTMOB &= ~(1<<RXOK);		// 수신대기 
     4ba:	80 91 ee 00 	lds	r24, 0x00EE
     4be:	8f 7d       	andi	r24, 0xDF	; 223
     4c0:	80 93 ee 00 	sts	0x00EE, r24

	return(rece_result);
}
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	08 95       	ret

000004d4 <can_rx_set>:
//		idmask; CAN ID 수신 마스크 
//		rtrIdemask; RTR 비트와 IDE 마스크 			
//****************************************************************/
void can_rx_set(char obj, unsigned long id, char ide, unsigned char dlc, 
				unsigned long idmask, unsigned char rtrIdemask)
{
     4d4:	af 92       	push	r10
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
	CANPAGE = obj<<4;		// set MOb number
     4e0:	82 95       	swap	r24
     4e2:	80 7f       	andi	r24, 0xF0	; 240
     4e4:	80 93 ed 00 	sts	0x00ED, r24

	CANSTMOB = 0x00;		// clear status
     4e8:	10 92 ee 00 	sts	0x00EE, r1

	if(ide== STD)			// standard
	{
		CANIDT1= (unsigned char)(id>>3);
     4ec:	db 01       	movw	r26, r22
     4ee:	ca 01       	movw	r24, r20
{
	CANPAGE = obj<<4;		// set MOb number

	CANSTMOB = 0x00;		// clear status

	if(ide== STD)			// standard
     4f0:	22 23       	and	r18, r18
     4f2:	29 f5       	brne	.+74     	; 0x53e <can_rx_set+0x6a>
	{
		CANIDT1= (unsigned char)(id>>3);
     4f4:	f3 e0       	ldi	r31, 0x03	; 3
     4f6:	b6 95       	lsr	r27
     4f8:	a7 95       	ror	r26
     4fa:	97 95       	ror	r25
     4fc:	87 95       	ror	r24
     4fe:	fa 95       	dec	r31
     500:	d1 f7       	brne	.-12     	; 0x4f6 <can_rx_set+0x22>
     502:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id<<5);
     506:	42 95       	swap	r20
     508:	44 0f       	add	r20, r20
     50a:	40 7e       	andi	r20, 0xE0	; 224
     50c:	40 93 f2 00 	sts	0x00F2, r20

		CANIDM1= (unsigned char)(idmask>>3);
     510:	d7 01       	movw	r26, r14
     512:	c6 01       	movw	r24, r12
     514:	23 e0       	ldi	r18, 0x03	; 3
     516:	b6 95       	lsr	r27
     518:	a7 95       	ror	r26
     51a:	97 95       	ror	r25
     51c:	87 95       	ror	r24
     51e:	2a 95       	dec	r18
     520:	d1 f7       	brne	.-12     	; 0x516 <can_rx_set+0x42>
     522:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask<<5);
     526:	c2 94       	swap	r12
     528:	cc 0c       	add	r12, r12
     52a:	30 ee       	ldi	r19, 0xE0	; 224
     52c:	c3 22       	and	r12, r19
     52e:	c0 92 f6 00 	sts	0x00F6, r12
		CANIDM4=0;
     532:	10 92 f4 00 	sts	0x00F4, r1

		CANCDMOB &= ~0x10;	// clear IDE =0, standard 11 bits
     536:	80 91 ef 00 	lds	r24, 0x00EF
     53a:	8f 7e       	andi	r24, 0xEF	; 239
     53c:	4d c0       	rjmp	.+154    	; 0x5d8 <can_rx_set+0x104>

		//usart1_transmit_string("\rRx Standard Set\n");
	}
	else					// extended
	{
		CANIDT1= (unsigned char)(id>>21);
     53e:	e5 e1       	ldi	r30, 0x15	; 21
     540:	b6 95       	lsr	r27
     542:	a7 95       	ror	r26
     544:	97 95       	ror	r25
     546:	87 95       	ror	r24
     548:	ea 95       	dec	r30
     54a:	d1 f7       	brne	.-12     	; 0x540 <can_rx_set+0x6c>
     54c:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id>>13);
     550:	db 01       	movw	r26, r22
     552:	ca 01       	movw	r24, r20
     554:	fd e0       	ldi	r31, 0x0D	; 13
     556:	b6 95       	lsr	r27
     558:	a7 95       	ror	r26
     55a:	97 95       	ror	r25
     55c:	87 95       	ror	r24
     55e:	fa 95       	dec	r31
     560:	d1 f7       	brne	.-12     	; 0x556 <can_rx_set+0x82>
     562:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(id>>5);
     566:	db 01       	movw	r26, r22
     568:	ca 01       	movw	r24, r20
     56a:	25 e0       	ldi	r18, 0x05	; 5
     56c:	b6 95       	lsr	r27
     56e:	a7 95       	ror	r26
     570:	97 95       	ror	r25
     572:	87 95       	ror	r24
     574:	2a 95       	dec	r18
     576:	d1 f7       	brne	.-12     	; 0x56c <can_rx_set+0x98>
     578:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(id<<3);
     57c:	44 0f       	add	r20, r20
     57e:	44 0f       	add	r20, r20
     580:	44 0f       	add	r20, r20
     582:	40 93 f0 00 	sts	0x00F0, r20

		CANIDM1= (unsigned char)(idmask>>21);
     586:	d7 01       	movw	r26, r14
     588:	c6 01       	movw	r24, r12
     58a:	35 e1       	ldi	r19, 0x15	; 21
     58c:	b6 95       	lsr	r27
     58e:	a7 95       	ror	r26
     590:	97 95       	ror	r25
     592:	87 95       	ror	r24
     594:	3a 95       	dec	r19
     596:	d1 f7       	brne	.-12     	; 0x58c <can_rx_set+0xb8>
     598:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask>>13);
     59c:	d7 01       	movw	r26, r14
     59e:	c6 01       	movw	r24, r12
     5a0:	4d e0       	ldi	r20, 0x0D	; 13
     5a2:	b6 95       	lsr	r27
     5a4:	a7 95       	ror	r26
     5a6:	97 95       	ror	r25
     5a8:	87 95       	ror	r24
     5aa:	4a 95       	dec	r20
     5ac:	d1 f7       	brne	.-12     	; 0x5a2 <can_rx_set+0xce>
     5ae:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM3= (unsigned char)(idmask>>5);
     5b2:	d7 01       	movw	r26, r14
     5b4:	c6 01       	movw	r24, r12
     5b6:	e5 e0       	ldi	r30, 0x05	; 5
     5b8:	b6 95       	lsr	r27
     5ba:	a7 95       	ror	r26
     5bc:	97 95       	ror	r25
     5be:	87 95       	ror	r24
     5c0:	ea 95       	dec	r30
     5c2:	d1 f7       	brne	.-12     	; 0x5b8 <can_rx_set+0xe4>
     5c4:	80 93 f5 00 	sts	0x00F5, r24
		CANIDM4= (unsigned char)(idmask<<3);
     5c8:	cc 0c       	add	r12, r12
     5ca:	cc 0c       	add	r12, r12
     5cc:	cc 0c       	add	r12, r12
     5ce:	c0 92 f4 00 	sts	0x00F4, r12

		CANCDMOB |= 0x10;	// set IDE =1, extended 29 bits
     5d2:	80 91 ef 00 	lds	r24, 0x00EF
     5d6:	80 61       	ori	r24, 0x10	; 16
     5d8:	80 93 ef 00 	sts	0x00EF, r24

		//usart1_transmit_string("\rRx Extended Set\n");
	}
	CANCDMOB |= (dlc & 0x0f);		// set data length
     5dc:	80 91 ef 00 	lds	r24, 0x00EF
     5e0:	0f 70       	andi	r16, 0x0F	; 15
     5e2:	08 2b       	or	r16, r24
     5e4:	00 93 ef 00 	sts	0x00EF, r16

	CANIDM4 |= (unsigned char)(rtrIdemask & 0x07);
     5e8:	90 91 f4 00 	lds	r25, 0x00F4
     5ec:	8a 2d       	mov	r24, r10
     5ee:	87 70       	andi	r24, 0x07	; 7
     5f0:	89 2b       	or	r24, r25
     5f2:	80 93 f4 00 	sts	0x00F4, r24
//	CANIDM4 &= ~0x04;		// RTRMSK= 1/0 enable comparison (Data receive)
//	CANIDM4 &= ~0x02;		// recommended
	CANIDM4 &= ~0x01;		// IDEMSK= 1/0 enable comparison (IDE receive)
     5f6:	80 91 f4 00 	lds	r24, 0x00F4
     5fa:	8e 7f       	andi	r24, 0xFE	; 254
     5fc:	80 93 f4 00 	sts	0x00F4, r24

	CANCDMOB |= 0x80;		// receive enable 
     600:	80 91 ef 00 	lds	r24, 0x00EF
     604:	80 68       	ori	r24, 0x80	; 128
     606:	80 93 ef 00 	sts	0x00EF, r24
}
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	af 90       	pop	r10
     616:	08 95       	ret

00000618 <can_int_rx_set>:
//  7. 수신 모드 설정 
//****************************************************************/
void can_int_rx_set(char obj, unsigned long id, char rplvIde, 
					unsigned char dlc, unsigned long idmask, 
					unsigned char rtrIdemask)
{
     618:	af 92       	push	r10
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	38 2f       	mov	r19, r24
	CANPAGE = obj<<4;		// set MOb number
     626:	82 95       	swap	r24
     628:	80 7f       	andi	r24, 0xF0	; 240
     62a:	80 93 ed 00 	sts	0x00ED, r24

	CANSTMOB = 0x00;		// clear status
     62e:	10 92 ee 00 	sts	0x00EE, r1

	if(rplvIde & 0x02)	
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
     632:	80 91 ef 00 	lds	r24, 0x00EF
{
	CANPAGE = obj<<4;		// set MOb number

	CANSTMOB = 0x00;		// clear status

	if(rplvIde & 0x02)	
     636:	21 ff       	sbrs	r18, 1
     638:	02 c0       	rjmp	.+4      	; 0x63e <can_int_rx_set+0x26>
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
     63a:	80 62       	ori	r24, 0x20	; 32
     63c:	01 c0       	rjmp	.+2      	; 0x640 <can_int_rx_set+0x28>
	else
		CANCDMOB &= ~0x20;			// RPLV clear
     63e:	8f 7d       	andi	r24, 0xDF	; 223
     640:	80 93 ef 00 	sts	0x00EF, r24

	if(( rplvIde & 0x01) == STD)			// standard
	{
		CANIDT1= (unsigned char)(id>>3);
     644:	db 01       	movw	r26, r22
     646:	ca 01       	movw	r24, r20
	if(rplvIde & 0x02)	
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
	else
		CANCDMOB &= ~0x20;			// RPLV clear

	if(( rplvIde & 0x01) == STD)			// standard
     648:	20 fd       	sbrc	r18, 0
     64a:	25 c0       	rjmp	.+74     	; 0x696 <can_int_rx_set+0x7e>
	{
		CANIDT1= (unsigned char)(id>>3);
     64c:	23 e0       	ldi	r18, 0x03	; 3
     64e:	b6 95       	lsr	r27
     650:	a7 95       	ror	r26
     652:	97 95       	ror	r25
     654:	87 95       	ror	r24
     656:	2a 95       	dec	r18
     658:	d1 f7       	brne	.-12     	; 0x64e <can_int_rx_set+0x36>
     65a:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id<<5);
     65e:	42 95       	swap	r20
     660:	44 0f       	add	r20, r20
     662:	40 7e       	andi	r20, 0xE0	; 224
     664:	40 93 f2 00 	sts	0x00F2, r20

		CANIDM1= (unsigned char)(idmask>>3);
     668:	d7 01       	movw	r26, r14
     66a:	c6 01       	movw	r24, r12
     66c:	43 e0       	ldi	r20, 0x03	; 3
     66e:	b6 95       	lsr	r27
     670:	a7 95       	ror	r26
     672:	97 95       	ror	r25
     674:	87 95       	ror	r24
     676:	4a 95       	dec	r20
     678:	d1 f7       	brne	.-12     	; 0x66e <can_int_rx_set+0x56>
     67a:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask<<5);
     67e:	c2 94       	swap	r12
     680:	cc 0c       	add	r12, r12
     682:	50 ee       	ldi	r21, 0xE0	; 224
     684:	c5 22       	and	r12, r21
     686:	c0 92 f6 00 	sts	0x00F6, r12
		CANIDM4=0;
     68a:	10 92 f4 00 	sts	0x00F4, r1

		CANCDMOB &= ~0x10;	// clear IDE =0, standard 11 bits
     68e:	80 91 ef 00 	lds	r24, 0x00EF
     692:	8f 7e       	andi	r24, 0xEF	; 239
     694:	4d c0       	rjmp	.+154    	; 0x730 <can_int_rx_set+0x118>

		//usart1_transmit_string("\rRx Standard Set\n");
	}
	else					// extended
	{
		CANIDT1= (unsigned char)(id>>21);
     696:	e5 e1       	ldi	r30, 0x15	; 21
     698:	b6 95       	lsr	r27
     69a:	a7 95       	ror	r26
     69c:	97 95       	ror	r25
     69e:	87 95       	ror	r24
     6a0:	ea 95       	dec	r30
     6a2:	d1 f7       	brne	.-12     	; 0x698 <can_int_rx_set+0x80>
     6a4:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id>>13);
     6a8:	db 01       	movw	r26, r22
     6aa:	ca 01       	movw	r24, r20
     6ac:	fd e0       	ldi	r31, 0x0D	; 13
     6ae:	b6 95       	lsr	r27
     6b0:	a7 95       	ror	r26
     6b2:	97 95       	ror	r25
     6b4:	87 95       	ror	r24
     6b6:	fa 95       	dec	r31
     6b8:	d1 f7       	brne	.-12     	; 0x6ae <can_int_rx_set+0x96>
     6ba:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(id>>5);
     6be:	db 01       	movw	r26, r22
     6c0:	ca 01       	movw	r24, r20
     6c2:	25 e0       	ldi	r18, 0x05	; 5
     6c4:	b6 95       	lsr	r27
     6c6:	a7 95       	ror	r26
     6c8:	97 95       	ror	r25
     6ca:	87 95       	ror	r24
     6cc:	2a 95       	dec	r18
     6ce:	d1 f7       	brne	.-12     	; 0x6c4 <can_int_rx_set+0xac>
     6d0:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(id<<3);
     6d4:	44 0f       	add	r20, r20
     6d6:	44 0f       	add	r20, r20
     6d8:	44 0f       	add	r20, r20
     6da:	40 93 f0 00 	sts	0x00F0, r20

		CANIDM1= (unsigned char)(idmask>>21);
     6de:	d7 01       	movw	r26, r14
     6e0:	c6 01       	movw	r24, r12
     6e2:	45 e1       	ldi	r20, 0x15	; 21
     6e4:	b6 95       	lsr	r27
     6e6:	a7 95       	ror	r26
     6e8:	97 95       	ror	r25
     6ea:	87 95       	ror	r24
     6ec:	4a 95       	dec	r20
     6ee:	d1 f7       	brne	.-12     	; 0x6e4 <can_int_rx_set+0xcc>
     6f0:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask>>13);
     6f4:	d7 01       	movw	r26, r14
     6f6:	c6 01       	movw	r24, r12
     6f8:	ed e0       	ldi	r30, 0x0D	; 13
     6fa:	b6 95       	lsr	r27
     6fc:	a7 95       	ror	r26
     6fe:	97 95       	ror	r25
     700:	87 95       	ror	r24
     702:	ea 95       	dec	r30
     704:	d1 f7       	brne	.-12     	; 0x6fa <can_int_rx_set+0xe2>
     706:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM3= (unsigned char)(idmask>>5);
     70a:	d7 01       	movw	r26, r14
     70c:	c6 01       	movw	r24, r12
     70e:	f5 e0       	ldi	r31, 0x05	; 5
     710:	b6 95       	lsr	r27
     712:	a7 95       	ror	r26
     714:	97 95       	ror	r25
     716:	87 95       	ror	r24
     718:	fa 95       	dec	r31
     71a:	d1 f7       	brne	.-12     	; 0x710 <can_int_rx_set+0xf8>
     71c:	80 93 f5 00 	sts	0x00F5, r24
		CANIDM4= (unsigned char)(idmask<<3);
     720:	cc 0c       	add	r12, r12
     722:	cc 0c       	add	r12, r12
     724:	cc 0c       	add	r12, r12
     726:	c0 92 f4 00 	sts	0x00F4, r12

		CANCDMOB |= 0x10;	// set IDE =1, extended 29 bits
     72a:	80 91 ef 00 	lds	r24, 0x00EF
     72e:	80 61       	ori	r24, 0x10	; 16
     730:	80 93 ef 00 	sts	0x00EF, r24

		//usart1_transmit_string("\rRx Extended Set\n");
	}
	CANCDMOB |= (dlc & 0x0f);		// set data length
     734:	80 91 ef 00 	lds	r24, 0x00EF
     738:	0f 70       	andi	r16, 0x0F	; 15
     73a:	08 2b       	or	r16, r24
     73c:	00 93 ef 00 	sts	0x00EF, r16

	CANIDM4 |= (unsigned char)(rtrIdemask & 0x07);
     740:	90 91 f4 00 	lds	r25, 0x00F4
     744:	8a 2d       	mov	r24, r10
     746:	87 70       	andi	r24, 0x07	; 7
     748:	89 2b       	or	r24, r25
     74a:	80 93 f4 00 	sts	0x00F4, r24
//	CANIDM4 &= ~0x02;		// recommended
//	CANIDM4 &= ~0x01;		// IDEMSK= 1/0 enable comparison (IDE receive)


//  인터럽트 인에이블(인터럽트 설정)
	CANGIE |= 0xa0; 		// Enable all interrupt and Enable Rx interrupt
     74e:	80 91 db 00 	lds	r24, 0x00DB
     752:	80 6a       	ori	r24, 0xA0	; 160
     754:	80 93 db 00 	sts	0x00DB, r24

	if(obj<8) 
     758:	38 30       	cpi	r19, 0x08	; 8
     75a:	50 f4       	brcc	.+20     	; 0x770 <can_int_rx_set+0x158>
		CANIE2 = (1<<obj);		// 해당 MOb의 인터럽트를 인에이블 시킴 
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	02 c0       	rjmp	.+4      	; 0x766 <can_int_rx_set+0x14e>
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	3a 95       	dec	r19
     768:	e2 f7       	brpl	.-8      	; 0x762 <can_int_rx_set+0x14a>
     76a:	80 93 de 00 	sts	0x00DE, r24
     76e:	0d c0       	rjmp	.+26     	; 0x78a <can_int_rx_set+0x172>
	else        
		CANIE1 = (1<<(obj-8));	// 
     770:	23 2f       	mov	r18, r19
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	28 50       	subi	r18, 0x08	; 8
     776:	30 40       	sbci	r19, 0x00	; 0
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	02 c0       	rjmp	.+4      	; 0x782 <can_int_rx_set+0x16a>
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	2a 95       	dec	r18
     784:	e2 f7       	brpl	.-8      	; 0x77e <can_int_rx_set+0x166>
     786:	80 93 df 00 	sts	0x00DF, r24

	CANCDMOB |= 0x80;			// 수신 인에이블 
     78a:	80 91 ef 00 	lds	r24, 0x00EF
     78e:	80 68       	ori	r24, 0x80	; 128
     790:	80 93 ef 00 	sts	0x00EF, r24
	sei();
     794:	78 94       	sei
}
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	df 90       	pop	r13
     79e:	cf 90       	pop	r12
     7a0:	af 90       	pop	r10
     7a2:	08 95       	ret

000007a4 <initPort>:
struct MOb msg3 = {3, 0x03, EXT, 8, {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}};////////////


void initPort(void)
{
   DDRC  = 0xff;   // LCD 데이터 및 명령 
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	87 b9       	out	0x07, r24	; 7
   DDRG  = 0x0f;   // LCD 제어 출력 (RS, RW, E)
     7a8:	9f e0       	ldi	r25, 0x0F	; 15
     7aa:	93 bb       	out	0x13, r25	; 19
   DDRD  = 0x00;   // SW 입력설정
     7ac:	1a b8       	out	0x0a, r1	; 10
   DDRE  = 0xf0;   // Motor를 이용하기 위한 포트. 필요한 핀 출력 설정
     7ae:	90 ef       	ldi	r25, 0xF0	; 240
     7b0:	9d b9       	out	0x0d, r25	; 13
   PORTE = 0xff;
     7b2:	8e b9       	out	0x0e, r24	; 14
}
     7b4:	08 95       	ret

000007b6 <initMotor>:

// DC모터 초기화
void initMotor(void)
{
   TCCR3A=   0b10001010;   // COM3A[1:0]=10,  비교일치시 클리어
     7b6:	8a e8       	ldi	r24, 0x8A	; 138
     7b8:	80 93 90 00 	sts	0x0090, r24
            //               TOP 셋 
            // WGM3[3:0] :     Phase correct PWM mode 
            //                 TOP값은 ICR 레지스터가 결정
   TCCR3B=   0b00010011;   // 64 분주 
     7bc:	83 e1       	ldi	r24, 0x13	; 19
     7be:	80 93 91 00 	sts	0x0091, r24
                
                
   ICR3 = FREQ_CLKIO/2/PRESCALE/1000*DC_PERIOD;   
     7c2:	85 e3       	ldi	r24, 0x35	; 53
     7c4:	9c e0       	ldi	r25, 0x0C	; 12
     7c6:	90 93 97 00 	sts	0x0097, r25
     7ca:	80 93 96 00 	sts	0x0096, r24
               // 최고값(Top)3125, 40Hz(25msec) 

   OCR3C = 70;
     7ce:	86 e4       	ldi	r24, 0x46	; 70
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	90 93 9d 00 	sts	0x009D, r25
     7d6:	80 93 9c 00 	sts	0x009C, r24
}
     7da:	08 95       	ret

000007dc <CtrlDcMotor>:
// DC모터 속도 제어와 모터 회전 방향 제어 
void CtrlDcMotor(unsigned int speed, unsigned int dir)
{
   unsigned int level=5;

   PORTE&=0xFC;
     7dc:	2e b1       	in	r18, 0x0e	; 14
     7de:	2c 7f       	andi	r18, 0xFC	; 252
     7e0:	2e b9       	out	0x0e, r18	; 14

   // DC모터 회전 방향 결정
   if(dir==0)      // 시계 방향 회전
     7e2:	61 15       	cp	r22, r1
     7e4:	71 05       	cpc	r23, r1
     7e6:	a9 f4       	brne	.+42     	; 0x812 <CtrlDcMotor+0x36>
   {
      // speed에 따른 속도 제어
      OCR3A=(speed*FREQ_CLKIO/2/PRESCALE/1000*DC_PERIOD)/level;
     7e8:	bc 01       	movw	r22, r24
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	25 e3       	ldi	r18, 0x35	; 53
     7f0:	3c e0       	ldi	r19, 0x0C	; 12
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__mulsi3>
     7fa:	25 e0       	ldi	r18, 0x05	; 5
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodsi4>
     806:	30 93 99 00 	sts	0x0099, r19
     80a:	20 93 98 00 	sts	0x0098, r18
      PORTE|=0x01;   
     80e:	70 9a       	sbi	0x0e, 0	; 14
     810:	08 95       	ret
   }
   else if(dir==1)   // 반시계 방향 회전 
     812:	61 30       	cpi	r22, 0x01	; 1
     814:	71 05       	cpc	r23, r1
     816:	a9 f4       	brne	.+42     	; 0x842 <CtrlDcMotor+0x66>
   {
      // speed에 따른 속도 제어
      OCR3A=(speed*FREQ_CLKIO/2/PRESCALE/1000*DC_PERIOD)/level;
     818:	bc 01       	movw	r22, r24
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	25 e3       	ldi	r18, 0x35	; 53
     820:	3c e0       	ldi	r19, 0x0C	; 12
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__mulsi3>
     82a:	25 e0       	ldi	r18, 0x05	; 5
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodsi4>
     836:	30 93 99 00 	sts	0x0099, r19
     83a:	20 93 98 00 	sts	0x0098, r18
      PORTE|=0x02;
     83e:	71 9a       	sbi	0x0e, 1	; 14
     840:	08 95       	ret
   }
   else         // 모터 정지 
   {
      OCR3A=100;
     842:	84 e6       	ldi	r24, 0x64	; 100
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	90 93 99 00 	sts	0x0099, r25
     84a:	80 93 98 00 	sts	0x0098, r24
      OCR3B=100;
     84e:	90 93 9b 00 	sts	0x009B, r25
     852:	80 93 9a 00 	sts	0x009A, r24
     856:	08 95       	ret

00000858 <ButtonInput>:
   unsigned char in;
   unsigned char up;
   unsigned char down;
      
   // 마스크를 이용해 포트D 입력에서 0번핀 입력 추출 
   in = PIND & BUTTON0_MASK;
     858:	89 b1       	in	r24, 0x09	; 9

   if(in>0) up=0;   // S2버튼 안 눌러짐 
   else up=1;      // S2버튼 눌러짐

   // 마스크를 이용해 포트D 입력에서 1번핀 입력 추출 
   in = PIND & BUTTON1_MASK;
     85a:	29 b1       	in	r18, 0x09	; 9

   if(in>0) down=0;   // S3버튼 안 눌러짐   
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	21 fd       	sbrc	r18, 1
     860:	90 e0       	ldi	r25, 0x00	; 0
   else down=1;      // S3버튼 눌러짐

   if((up==1) && (down==0)) return SPEED_UP;   // S2버튼 누른 경우
     862:	80 fd       	sbrc	r24, 0
     864:	04 c0       	rjmp	.+8      	; 0x86e <ButtonInput+0x16>
      OCR3A=100;
      OCR3B=100;
   }
}
// 포터D의 0번(S3)과 1번(S2) 핀에서 입력 받음 
unsigned char ButtonInput(void)
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	99 23       	and	r25, r25
     86a:	31 f0       	breq	.+12     	; 0x878 <ButtonInput+0x20>
     86c:	02 c0       	rjmp	.+4      	; 0x872 <ButtonInput+0x1a>

   if(in>0) down=0;   // S3버튼 안 눌러짐   
   else down=1;      // S3버튼 눌러짐

   if((up==1) && (down==0)) return SPEED_UP;   // S2버튼 누른 경우
   if((up==0) && (down==1)) return SPEED_DOWN;   // S3버튼 누른 경우
     86e:	91 30       	cpi	r25, 0x01	; 1
     870:	11 f0       	breq	.+4      	; 0x876 <ButtonInput+0x1e>

   return SPEED_NO_CHANGE;
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	08 95       	ret

   if(in>0) down=0;   // S3버튼 안 눌러짐   
   else down=1;      // S3버튼 눌러짐

   if((up==1) && (down==0)) return SPEED_UP;   // S2버튼 누른 경우
   if((up==0) && (down==1)) return SPEED_DOWN;   // S3버튼 누른 경우
     876:	82 e0       	ldi	r24, 0x02	; 2

   return SPEED_NO_CHANGE;
}
     878:	08 95       	ret

0000087a <DcMotorSpeedControl>:

// 모터 속도값 제어 함수 (버튼 입력에 따른)
unsigned char DcMotorSpeedControl(unsigned char bt_in, unsigned char speed)
{
   // S2 버튼이 눌러지면 
   if(bt_in==SPEED_UP) 
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	21 f4       	brne	.+8      	; 0x886 <DcMotorSpeedControl+0xc>
   {
      if(speed==SPEED_MAX) return speed;
     87e:	65 30       	cpi	r22, 0x05	; 5
     880:	31 f0       	breq	.+12     	; 0x88e <DcMotorSpeedControl+0x14>
      return (++speed);   // 속도 1 증가 
     882:	6f 5f       	subi	r22, 0xFF	; 255
     884:	04 c0       	rjmp	.+8      	; 0x88e <DcMotorSpeedControl+0x14>
   }
   // S3 버튼이 눌러지면
   if(bt_in==SPEED_DOWN)
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	11 f4       	brne	.+4      	; 0x88e <DcMotorSpeedControl+0x14>
   {
      if(speed==SPEED_MIN) return speed;
     88a:	61 11       	cpse	r22, r1
      return (--speed);   // 속도 1 감소 
     88c:	61 50       	subi	r22, 0x01	; 1
   }
   return speed;
}
     88e:	86 2f       	mov	r24, r22
     890:	08 95       	ret

00000892 <init_EXT_INT>:


// ultra sound 
void init_EXT_INT(void)
{
   EIMSK |= (1<<INT4);      // INT4 Interrupt Set
     892:	ec 9a       	sbi	0x1d, 4	; 29
   EICRB |= (1<<ISC41)|(1<<ISC40);      //INT4 Rising Edge /INT Set
     894:	ea e6       	ldi	r30, 0x6A	; 106
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	83 60       	ori	r24, 0x03	; 3
     89c:	80 83       	st	Z, r24
   EIFR   = 1<<INT4;      // Interrupt Flag
     89e:	80 e1       	ldi	r24, 0x10	; 16
     8a0:	8c bb       	out	0x1c, r24	; 28
}
     8a2:	08 95       	ret

000008a4 <init_TIMER0_COMPA>:

void init_TIMER0_COMPA(void)
{
   TCCR0A |= (1<<WGM01);      // CTC Mode
     8a4:	84 b5       	in	r24, 0x24	; 36
     8a6:	88 60       	ori	r24, 0x08	; 8
     8a8:	84 bd       	out	0x24, r24	; 36
   TCCR0A |= (1<<CS01);   // clk/8 Prescaler
     8aa:	84 b5       	in	r24, 0x24	; 36
     8ac:	82 60       	ori	r24, 0x02	; 2
     8ae:	84 bd       	out	0x24, r24	; 36
   TCNT0 = 0;
     8b0:	16 bc       	out	0x26, r1	; 38
   OCR0A = 19;      // 1cycle -> 20us으로 세팅 1cycle = 1/(16Mhz/(2*8*( OCR0A+1)))
     8b2:	83 e1       	ldi	r24, 0x13	; 19
     8b4:	87 bd       	out	0x27, r24	; 39
   TIMSK0 = (1<<OCIE0A);      //T/C0 Output Compare Match INT
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	80 93 6e 00 	sts	0x006E, r24
   TIFR0 = 0x00;
     8bc:	15 ba       	out	0x15, r1	; 21
}
     8be:	08 95       	ret

000008c0 <__vector_16>:

SIGNAL(TIMER0_COMP_vect)   
{
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	8f 93       	push	r24
     8cc:	9f 93       	push	r25
   tick++;
     8ce:	80 91 be 02 	lds	r24, 0x02BE
     8d2:	90 91 bf 02 	lds	r25, 0x02BF
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	90 93 bf 02 	sts	0x02BF, r25
     8dc:	80 93 be 02 	sts	0x02BE, r24
}
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti

000008ee <__vector_5>:

SIGNAL(INT4_vect)
{
     8ee:	1f 92       	push	r1
     8f0:	0f 92       	push	r0
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	0f 92       	push	r0
     8f6:	11 24       	eor	r1, r1
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	8f 93       	push	r24
     8fe:	9f 93       	push	r25
   unsigned short pulse_tick;

   pulse_tick = tick;
     900:	20 91 be 02 	lds	r18, 0x02BE
     904:	30 91 bf 02 	lds	r19, 0x02BF

   if(EICRB & 0x03)
     908:	80 91 6a 00 	lds	r24, 0x006A
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	83 70       	andi	r24, 0x03	; 3
     910:	90 70       	andi	r25, 0x00	; 0
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	49 f0       	breq	.+18     	; 0x928 <__vector_5+0x3a>
   {
      EICRB &= 0x00;   //  low state
     916:	80 91 6a 00 	lds	r24, 0x006A
     91a:	10 92 6a 00 	sts	0x006A, r1
      tick = 0;   
     91e:	10 92 bf 02 	sts	0x02BF, r1
     922:	10 92 be 02 	sts	0x02BE, r1
     926:	09 c0       	rjmp	.+18     	; 0x93a <__vector_5+0x4c>
   }
   else
   {
      EICRB |= (1<<ISC41)|(1<<ISC40);// INT4 Rising Edge / INT Set
     928:	80 91 6a 00 	lds	r24, 0x006A
     92c:	83 60       	ori	r24, 0x03	; 3
     92e:	80 93 6a 00 	sts	0x006A, r24
      pulse_end = pulse_tick;   
     932:	30 93 bb 02 	sts	0x02BB, r19
     936:	20 93 ba 02 	sts	0x02BA, r18
   }
}
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	3f 91       	pop	r19
     940:	2f 91       	pop	r18
     942:	0f 90       	pop	r0
     944:	0f be       	out	0x3f, r0	; 63
     946:	0f 90       	pop	r0
     948:	1f 90       	pop	r1
     94a:	18 95       	reti

0000094c <delay>:
void delay(unsigned int k)
{
    unsigned int i;

   for(i=0;i<k;i++); 
}
     94c:	08 95       	ret

0000094e <us_delay>:

void us_delay(unsigned int us_time)
{
   unsigned int i;

   for(i=0; i<us_time; i++) // 4 cycle +
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	08 c0       	rjmp	.+16     	; 0x964 <us_delay+0x16>
   {
       asm("PUSH R0");    // 2 cycle +
     954:	0f 92       	push	r0
      asm("POP R0");       // 2 cycle +
     956:	0f 90       	pop	r0
      asm("PUSH R0");    // 2 cycle +
     958:	0f 92       	push	r0
      asm("POP R0");       // 2 cycle + =12 cycle for 11.0592MHZ
     95a:	0f 90       	pop	r0
      asm("PUSH R0");    // 2 cycle +
     95c:	0f 92       	push	r0
      asm("POP R0");       // 2 cycle = 16 cycle = 1us for 16MHz
     95e:	0f 90       	pop	r0

void us_delay(unsigned int us_time)
{
   unsigned int i;

   for(i=0; i<us_time; i++) // 4 cycle +
     960:	2f 5f       	subi	r18, 0xFF	; 255
     962:	3f 4f       	sbci	r19, 0xFF	; 255
     964:	28 17       	cp	r18, r24
     966:	39 07       	cpc	r19, r25
     968:	a9 f7       	brne	.-22     	; 0x954 <us_delay+0x6>
      asm("PUSH R0");    // 2 cycle +
      asm("POP R0");       // 2 cycle + =12 cycle for 11.0592MHZ
      asm("PUSH R0");    // 2 cycle +
      asm("POP R0");       // 2 cycle = 16 cycle = 1us for 16MHz
   }
}
     96a:	08 95       	ret

0000096c <ms_delay>:

void ms_delay(unsigned int ms_time)
{
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	8c 01       	movw	r16, r24
    unsigned int i;
    
    for(i=0; i<ms_time;i++)
     976:	c0 e0       	ldi	r28, 0x00	; 0
     978:	d0 e0       	ldi	r29, 0x00	; 0
     97a:	05 c0       	rjmp	.+10     	; 0x986 <ms_delay+0x1a>
        us_delay(1000);
     97c:	88 ee       	ldi	r24, 0xE8	; 232
     97e:	93 e0       	ldi	r25, 0x03	; 3
     980:	0e 94 a7 04 	call	0x94e	; 0x94e <us_delay>

void ms_delay(unsigned int ms_time)
{
    unsigned int i;
    
    for(i=0; i<ms_time;i++)
     984:	21 96       	adiw	r28, 0x01	; 1
     986:	c0 17       	cp	r28, r16
     988:	d1 07       	cpc	r29, r17
     98a:	c1 f7       	brne	.-16     	; 0x97c <ms_delay+0x10>
        us_delay(1000);
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <E_Pulse>:
#define EN_0      (PORTG &= 0xFB)

//LCD Functions =================================================
void E_Pulse(void)
{
	EN_1;
     996:	a2 9a       	sbi	0x14, 2	; 20

	us_delay(100);
     998:	84 e6       	ldi	r24, 0x64	; 100
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 a7 04 	call	0x94e	; 0x94e <us_delay>

	EN_0;
     9a0:	a2 98       	cbi	0x14, 2	; 20
}
     9a2:	08 95       	ret

000009a4 <LCD_init>:

void LCD_init(void)
{
	ms_delay(40);
     9a4:	88 e2       	ldi	r24, 0x28	; 40
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 b6 04 	call	0x96c	; 0x96c <ms_delay>

	PORTC = 0x38;	// Function Set
     9ac:	88 e3       	ldi	r24, 0x38	; 56
     9ae:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
     9b0:	0e 94 cb 04 	call	0x996	; 0x996 <E_Pulse>
    us_delay(40);
     9b4:	88 e2       	ldi	r24, 0x28	; 40
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 a7 04 	call	0x94e	; 0x94e <us_delay>

	PORTC = 0x0c; // DisPlay ON/OFF Control
     9bc:	8c e0       	ldi	r24, 0x0C	; 12
     9be:	88 b9       	out	0x08, r24	; 8
	us_delay(40);
     9c0:	88 e2       	ldi	r24, 0x28	; 40
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 a7 04 	call	0x94e	; 0x94e <us_delay>
	E_Pulse();
     9c8:	0e 94 cb 04 	call	0x996	; 0x996 <E_Pulse>
	
	PORTC = 0x01; // Display Clear
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	88 b9       	out	0x08, r24	; 8
	ms_delay(2);
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 b6 04 	call	0x96c	; 0x96c <ms_delay>
	E_Pulse();
     9d8:	0e 94 cb 04 	call	0x996	; 0x996 <E_Pulse>

	PORTC = 0x06; // Entry Mode Set
     9dc:	86 e0       	ldi	r24, 0x06	; 6
     9de:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
     9e0:	0e 94 cb 04 	call	0x996	; 0x996 <E_Pulse>
}
     9e4:	08 95       	ret

000009e6 <LCD_cmd>:

void LCD_cmd(unsigned char cmd)
{
	LCD_RS_0;
     9e6:	a0 98       	cbi	0x14, 0	; 20
	LCD_RW_0;
     9e8:	a1 98       	cbi	0x14, 1	; 20
	PORTC=cmd;
     9ea:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
     9ec:	0e 94 cb 04 	call	0x996	; 0x996 <E_Pulse>
}	
     9f0:	08 95       	ret

000009f2 <Write_Char>:

void Write_Char(unsigned char buf)
{
	LCD_RS_1;
     9f2:	a0 9a       	sbi	0x14, 0	; 20
	LCD_RW_0;
     9f4:	a1 98       	cbi	0x14, 1	; 20
	PORTC=buf;
     9f6:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
     9f8:	0e 94 cb 04 	call	0x996	; 0x996 <E_Pulse>
}	
     9fc:	08 95       	ret

000009fe <LCD_Disp>:

void LCD_Disp(char x,char y)
{
	LCD_RS_0;
     9fe:	a0 98       	cbi	0x14, 0	; 20
	LCD_RW_0;
     a00:	a1 98       	cbi	0x14, 1	; 20

	if(y==0) PORTC = x + 0x80;
     a02:	66 23       	and	r22, r22
     a04:	11 f4       	brne	.+4      	; 0xa0a <LCD_Disp+0xc>
     a06:	80 58       	subi	r24, 0x80	; 128
     a08:	03 c0       	rjmp	.+6      	; 0xa10 <LCD_Disp+0x12>
	else if(y==1) PORTC = x + 0xc0;
     a0a:	61 30       	cpi	r22, 0x01	; 1
     a0c:	11 f4       	brne	.+4      	; 0xa12 <LCD_Disp+0x14>
     a0e:	80 54       	subi	r24, 0x40	; 64
     a10:	88 b9       	out	0x08, r24	; 8
	E_Pulse();
     a12:	0e 94 cb 04 	call	0x996	; 0x996 <E_Pulse>
}
     a16:	08 95       	ret

00000a18 <LCD_Write>:
 
void LCD_Write(char x, char y,char *str)
{
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	00 d0       	rcall	.+0      	; 0xa22 <LCD_Write+0xa>
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
	LCD_Disp(x,y);
     a26:	49 83       	std	Y+1, r20	; 0x01
     a28:	5a 83       	std	Y+2, r21	; 0x02
     a2a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_Disp>
     a2e:	49 81       	ldd	r20, Y+1	; 0x01
     a30:	04 2f       	mov	r16, r20
     a32:	5a 81       	ldd	r21, Y+2	; 0x02
     a34:	15 2f       	mov	r17, r21
	while(*str)
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <LCD_Write+0x24>
	Write_Char(*str++);
     a38:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <Write_Char>
}
 
void LCD_Write(char x, char y,char *str)
{
	LCD_Disp(x,y);
	while(*str)
     a3c:	f8 01       	movw	r30, r16
     a3e:	81 91       	ld	r24, Z+
     a40:	8f 01       	movw	r16, r30
     a42:	88 23       	and	r24, r24
     a44:	c9 f7       	brne	.-14     	; 0xa38 <LCD_Write+0x20>
	Write_Char(*str++);
}
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <LCD_Write_char>:

void LCD_Write_char(char x, char y, unsigned char ch)
{
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	0f 92       	push	r0
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
	LCD_Disp(x,y);
     a5e:	49 83       	std	Y+1, r20	; 0x01
     a60:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_Disp>
	Write_Char(ch);
     a64:	49 81       	ldd	r20, Y+1	; 0x01
     a66:	84 2f       	mov	r24, r20
     a68:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <Write_Char>
}
     a6c:	0f 90       	pop	r0
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <__fixunssfsi>:
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	6b 01       	movw	r12, r22
     a82:	7c 01       	movw	r14, r24
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	5f e4       	ldi	r21, 0x4F	; 79
     a8c:	0e 94 04 09 	call	0x1208	; 0x1208 <__gesf2>
     a90:	87 fd       	sbrc	r24, 7
     a92:	11 c0       	rjmp	.+34     	; 0xab6 <__fixunssfsi+0x42>
     a94:	c7 01       	movw	r24, r14
     a96:	b6 01       	movw	r22, r12
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	5f e4       	ldi	r21, 0x4F	; 79
     aa0:	0e 94 ef 06 	call	0xdde	; 0xdde <__subsf3>
     aa4:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__fixsfsi>
     aa8:	8b 01       	movw	r16, r22
     aaa:	9c 01       	movw	r18, r24
     aac:	00 50       	subi	r16, 0x00	; 0
     aae:	10 40       	sbci	r17, 0x00	; 0
     ab0:	20 40       	sbci	r18, 0x00	; 0
     ab2:	30 48       	sbci	r19, 0x80	; 128
     ab4:	06 c0       	rjmp	.+12     	; 0xac2 <__fixunssfsi+0x4e>
     ab6:	c7 01       	movw	r24, r14
     ab8:	b6 01       	movw	r22, r12
     aba:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__fixsfsi>
     abe:	8b 01       	movw	r16, r22
     ac0:	9c 01       	movw	r18, r24
     ac2:	b8 01       	movw	r22, r16
     ac4:	c9 01       	movw	r24, r18
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	df 90       	pop	r13
     ad0:	cf 90       	pop	r12
     ad2:	08 95       	ret

00000ad4 <_fpadd_parts>:
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	e0 e7       	ldi	r30, 0x70	; 112
     ada:	f5 e0       	ldi	r31, 0x05	; 5
     adc:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__prologue_saves__+0x4>
     ae0:	ec 01       	movw	r28, r24
     ae2:	4b 01       	movw	r8, r22
     ae4:	fa 01       	movw	r30, r20
     ae6:	88 81       	ld	r24, Y
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	08 f4       	brcc	.+2      	; 0xaee <_fpadd_parts+0x1a>
     aec:	3e c1       	rjmp	.+636    	; 0xd6a <_fpadd_parts+0x296>
     aee:	db 01       	movw	r26, r22
     af0:	9c 91       	ld	r25, X
     af2:	92 30       	cpi	r25, 0x02	; 2
     af4:	08 f4       	brcc	.+2      	; 0xaf8 <_fpadd_parts+0x24>
     af6:	36 c1       	rjmp	.+620    	; 0xd64 <_fpadd_parts+0x290>
     af8:	84 30       	cpi	r24, 0x04	; 4
     afa:	59 f4       	brne	.+22     	; 0xb12 <_fpadd_parts+0x3e>
     afc:	94 30       	cpi	r25, 0x04	; 4
     afe:	09 f0       	breq	.+2      	; 0xb02 <_fpadd_parts+0x2e>
     b00:	34 c1       	rjmp	.+616    	; 0xd6a <_fpadd_parts+0x296>
     b02:	99 81       	ldd	r25, Y+1	; 0x01
     b04:	11 96       	adiw	r26, 0x01	; 1
     b06:	8c 91       	ld	r24, X
     b08:	11 97       	sbiw	r26, 0x01	; 1
     b0a:	98 17       	cp	r25, r24
     b0c:	09 f0       	breq	.+2      	; 0xb10 <_fpadd_parts+0x3c>
     b0e:	27 c1       	rjmp	.+590    	; 0xd5e <_fpadd_parts+0x28a>
     b10:	2c c1       	rjmp	.+600    	; 0xd6a <_fpadd_parts+0x296>
     b12:	94 30       	cpi	r25, 0x04	; 4
     b14:	09 f4       	brne	.+2      	; 0xb18 <_fpadd_parts+0x44>
     b16:	26 c1       	rjmp	.+588    	; 0xd64 <_fpadd_parts+0x290>
     b18:	92 30       	cpi	r25, 0x02	; 2
     b1a:	a9 f4       	brne	.+42     	; 0xb46 <_fpadd_parts+0x72>
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	09 f0       	breq	.+2      	; 0xb22 <_fpadd_parts+0x4e>
     b20:	24 c1       	rjmp	.+584    	; 0xd6a <_fpadd_parts+0x296>
     b22:	ce 01       	movw	r24, r28
     b24:	28 e0       	ldi	r18, 0x08	; 8
     b26:	dc 01       	movw	r26, r24
     b28:	0d 90       	ld	r0, X+
     b2a:	cd 01       	movw	r24, r26
     b2c:	da 01       	movw	r26, r20
     b2e:	0d 92       	st	X+, r0
     b30:	ad 01       	movw	r20, r26
     b32:	21 50       	subi	r18, 0x01	; 1
     b34:	c1 f7       	brne	.-16     	; 0xb26 <_fpadd_parts+0x52>
     b36:	d4 01       	movw	r26, r8
     b38:	11 96       	adiw	r26, 0x01	; 1
     b3a:	8c 91       	ld	r24, X
     b3c:	11 97       	sbiw	r26, 0x01	; 1
     b3e:	99 81       	ldd	r25, Y+1	; 0x01
     b40:	89 23       	and	r24, r25
     b42:	81 83       	std	Z+1, r24	; 0x01
     b44:	11 c1       	rjmp	.+546    	; 0xd68 <_fpadd_parts+0x294>
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	09 f4       	brne	.+2      	; 0xb4c <_fpadd_parts+0x78>
     b4a:	0c c1       	rjmp	.+536    	; 0xd64 <_fpadd_parts+0x290>
     b4c:	aa 80       	ldd	r10, Y+2	; 0x02
     b4e:	bb 80       	ldd	r11, Y+3	; 0x03
     b50:	db 01       	movw	r26, r22
     b52:	12 96       	adiw	r26, 0x02	; 2
     b54:	4d 91       	ld	r20, X+
     b56:	5c 91       	ld	r21, X
     b58:	13 97       	sbiw	r26, 0x03	; 3
     b5a:	cc 80       	ldd	r12, Y+4	; 0x04
     b5c:	dd 80       	ldd	r13, Y+5	; 0x05
     b5e:	ee 80       	ldd	r14, Y+6	; 0x06
     b60:	ff 80       	ldd	r15, Y+7	; 0x07
     b62:	14 96       	adiw	r26, 0x04	; 4
     b64:	0d 91       	ld	r16, X+
     b66:	1d 91       	ld	r17, X+
     b68:	2d 91       	ld	r18, X+
     b6a:	3c 91       	ld	r19, X
     b6c:	17 97       	sbiw	r26, 0x07	; 7
     b6e:	c5 01       	movw	r24, r10
     b70:	84 1b       	sub	r24, r20
     b72:	95 0b       	sbc	r25, r21
     b74:	dc 01       	movw	r26, r24
     b76:	97 ff       	sbrs	r25, 7
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <_fpadd_parts+0xae>
     b7a:	aa 27       	eor	r26, r26
     b7c:	bb 27       	eor	r27, r27
     b7e:	a8 1b       	sub	r26, r24
     b80:	b9 0b       	sbc	r27, r25
     b82:	a0 32       	cpi	r26, 0x20	; 32
     b84:	b1 05       	cpc	r27, r1
     b86:	0c f0       	brlt	.+2      	; 0xb8a <_fpadd_parts+0xb6>
     b88:	67 c0       	rjmp	.+206    	; 0xc58 <_fpadd_parts+0x184>
     b8a:	18 16       	cp	r1, r24
     b8c:	19 06       	cpc	r1, r25
     b8e:	84 f5       	brge	.+96     	; 0xbf0 <_fpadd_parts+0x11c>
     b90:	28 01       	movw	r4, r16
     b92:	39 01       	movw	r6, r18
     b94:	0a 2e       	mov	r0, r26
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <_fpadd_parts+0xcc>
     b98:	76 94       	lsr	r7
     b9a:	67 94       	ror	r6
     b9c:	57 94       	ror	r5
     b9e:	47 94       	ror	r4
     ba0:	0a 94       	dec	r0
     ba2:	d2 f7       	brpl	.-12     	; 0xb98 <_fpadd_parts+0xc4>
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	04 c0       	rjmp	.+8      	; 0xbb6 <_fpadd_parts+0xe2>
     bae:	44 0f       	add	r20, r20
     bb0:	55 1f       	adc	r21, r21
     bb2:	66 1f       	adc	r22, r22
     bb4:	77 1f       	adc	r23, r23
     bb6:	aa 95       	dec	r26
     bb8:	d2 f7       	brpl	.-12     	; 0xbae <_fpadd_parts+0xda>
     bba:	41 50       	subi	r20, 0x01	; 1
     bbc:	50 40       	sbci	r21, 0x00	; 0
     bbe:	60 40       	sbci	r22, 0x00	; 0
     bc0:	70 40       	sbci	r23, 0x00	; 0
     bc2:	40 23       	and	r20, r16
     bc4:	51 23       	and	r21, r17
     bc6:	62 23       	and	r22, r18
     bc8:	73 23       	and	r23, r19
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	41 15       	cp	r20, r1
     bd4:	51 05       	cpc	r21, r1
     bd6:	61 05       	cpc	r22, r1
     bd8:	71 05       	cpc	r23, r1
     bda:	19 f4       	brne	.+6      	; 0xbe2 <_fpadd_parts+0x10e>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	dc 01       	movw	r26, r24
     be2:	8c 01       	movw	r16, r24
     be4:	9d 01       	movw	r18, r26
     be6:	04 29       	or	r16, r4
     be8:	15 29       	or	r17, r5
     bea:	26 29       	or	r18, r6
     bec:	37 29       	or	r19, r7
     bee:	3f c0       	rjmp	.+126    	; 0xc6e <_fpadd_parts+0x19a>
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	e9 f1       	breq	.+122    	; 0xc6e <_fpadd_parts+0x19a>
     bf4:	aa 0e       	add	r10, r26
     bf6:	bb 1e       	adc	r11, r27
     bf8:	26 01       	movw	r4, r12
     bfa:	37 01       	movw	r6, r14
     bfc:	0a 2e       	mov	r0, r26
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <_fpadd_parts+0x134>
     c00:	76 94       	lsr	r7
     c02:	67 94       	ror	r6
     c04:	57 94       	ror	r5
     c06:	47 94       	ror	r4
     c08:	0a 94       	dec	r0
     c0a:	d2 f7       	brpl	.-12     	; 0xc00 <_fpadd_parts+0x12c>
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <_fpadd_parts+0x14a>
     c16:	44 0f       	add	r20, r20
     c18:	55 1f       	adc	r21, r21
     c1a:	66 1f       	adc	r22, r22
     c1c:	77 1f       	adc	r23, r23
     c1e:	aa 95       	dec	r26
     c20:	d2 f7       	brpl	.-12     	; 0xc16 <_fpadd_parts+0x142>
     c22:	41 50       	subi	r20, 0x01	; 1
     c24:	50 40       	sbci	r21, 0x00	; 0
     c26:	60 40       	sbci	r22, 0x00	; 0
     c28:	70 40       	sbci	r23, 0x00	; 0
     c2a:	4c 21       	and	r20, r12
     c2c:	5d 21       	and	r21, r13
     c2e:	6e 21       	and	r22, r14
     c30:	7f 21       	and	r23, r15
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	a0 e0       	ldi	r26, 0x00	; 0
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	41 15       	cp	r20, r1
     c3c:	51 05       	cpc	r21, r1
     c3e:	61 05       	cpc	r22, r1
     c40:	71 05       	cpc	r23, r1
     c42:	19 f4       	brne	.+6      	; 0xc4a <_fpadd_parts+0x176>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	dc 01       	movw	r26, r24
     c4a:	6c 01       	movw	r12, r24
     c4c:	7d 01       	movw	r14, r26
     c4e:	c4 28       	or	r12, r4
     c50:	d5 28       	or	r13, r5
     c52:	e6 28       	or	r14, r6
     c54:	f7 28       	or	r15, r7
     c56:	0b c0       	rjmp	.+22     	; 0xc6e <_fpadd_parts+0x19a>
     c58:	4a 15       	cp	r20, r10
     c5a:	5b 05       	cpc	r21, r11
     c5c:	24 f4       	brge	.+8      	; 0xc66 <_fpadd_parts+0x192>
     c5e:	00 e0       	ldi	r16, 0x00	; 0
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	98 01       	movw	r18, r16
     c64:	04 c0       	rjmp	.+8      	; 0xc6e <_fpadd_parts+0x19a>
     c66:	5a 01       	movw	r10, r20
     c68:	cc 24       	eor	r12, r12
     c6a:	dd 24       	eor	r13, r13
     c6c:	76 01       	movw	r14, r12
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	d4 01       	movw	r26, r8
     c72:	11 96       	adiw	r26, 0x01	; 1
     c74:	9c 91       	ld	r25, X
     c76:	11 97       	sbiw	r26, 0x01	; 1
     c78:	89 17       	cp	r24, r25
     c7a:	09 f4       	brne	.+2      	; 0xc7e <_fpadd_parts+0x1aa>
     c7c:	45 c0       	rjmp	.+138    	; 0xd08 <_fpadd_parts+0x234>
     c7e:	88 23       	and	r24, r24
     c80:	29 f0       	breq	.+10     	; 0xc8c <_fpadd_parts+0x1b8>
     c82:	0c 19       	sub	r16, r12
     c84:	1d 09       	sbc	r17, r13
     c86:	2e 09       	sbc	r18, r14
     c88:	3f 09       	sbc	r19, r15
     c8a:	08 c0       	rjmp	.+16     	; 0xc9c <_fpadd_parts+0x1c8>
     c8c:	d7 01       	movw	r26, r14
     c8e:	c6 01       	movw	r24, r12
     c90:	80 1b       	sub	r24, r16
     c92:	91 0b       	sbc	r25, r17
     c94:	a2 0b       	sbc	r26, r18
     c96:	b3 0b       	sbc	r27, r19
     c98:	8c 01       	movw	r16, r24
     c9a:	9d 01       	movw	r18, r26
     c9c:	37 fd       	sbrc	r19, 7
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <_fpadd_parts+0x1d4>
     ca0:	11 82       	std	Z+1, r1	; 0x01
     ca2:	b3 82       	std	Z+3, r11	; 0x03
     ca4:	a2 82       	std	Z+2, r10	; 0x02
     ca6:	0b c0       	rjmp	.+22     	; 0xcbe <_fpadd_parts+0x1ea>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	81 83       	std	Z+1, r24	; 0x01
     cac:	b3 82       	std	Z+3, r11	; 0x03
     cae:	a2 82       	std	Z+2, r10	; 0x02
     cb0:	30 95       	com	r19
     cb2:	20 95       	com	r18
     cb4:	10 95       	com	r17
     cb6:	01 95       	neg	r16
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
     cba:	2f 4f       	sbci	r18, 0xFF	; 255
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	04 83       	std	Z+4, r16	; 0x04
     cc0:	15 83       	std	Z+5, r17	; 0x05
     cc2:	26 83       	std	Z+6, r18	; 0x06
     cc4:	37 83       	std	Z+7, r19	; 0x07
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <_fpadd_parts+0x20e>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	aa 1f       	adc	r26, r26
     cce:	bb 1f       	adc	r27, r27
     cd0:	84 83       	std	Z+4, r24	; 0x04
     cd2:	95 83       	std	Z+5, r25	; 0x05
     cd4:	a6 83       	std	Z+6, r26	; 0x06
     cd6:	b7 83       	std	Z+7, r27	; 0x07
     cd8:	82 81       	ldd	r24, Z+2	; 0x02
     cda:	93 81       	ldd	r25, Z+3	; 0x03
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	93 83       	std	Z+3, r25	; 0x03
     ce0:	82 83       	std	Z+2, r24	; 0x02
     ce2:	84 81       	ldd	r24, Z+4	; 0x04
     ce4:	95 81       	ldd	r25, Z+5	; 0x05
     ce6:	a6 81       	ldd	r26, Z+6	; 0x06
     ce8:	b7 81       	ldd	r27, Z+7	; 0x07
     cea:	ac 01       	movw	r20, r24
     cec:	bd 01       	movw	r22, r26
     cee:	41 50       	subi	r20, 0x01	; 1
     cf0:	50 40       	sbci	r21, 0x00	; 0
     cf2:	60 40       	sbci	r22, 0x00	; 0
     cf4:	70 40       	sbci	r23, 0x00	; 0
     cf6:	4f 3f       	cpi	r20, 0xFF	; 255
     cf8:	2f ef       	ldi	r18, 0xFF	; 255
     cfa:	52 07       	cpc	r21, r18
     cfc:	2f ef       	ldi	r18, 0xFF	; 255
     cfe:	62 07       	cpc	r22, r18
     d00:	2f e3       	ldi	r18, 0x3F	; 63
     d02:	72 07       	cpc	r23, r18
     d04:	08 f3       	brcs	.-62     	; 0xcc8 <_fpadd_parts+0x1f4>
     d06:	0b c0       	rjmp	.+22     	; 0xd1e <_fpadd_parts+0x24a>
     d08:	81 83       	std	Z+1, r24	; 0x01
     d0a:	b3 82       	std	Z+3, r11	; 0x03
     d0c:	a2 82       	std	Z+2, r10	; 0x02
     d0e:	0c 0d       	add	r16, r12
     d10:	1d 1d       	adc	r17, r13
     d12:	2e 1d       	adc	r18, r14
     d14:	3f 1d       	adc	r19, r15
     d16:	04 83       	std	Z+4, r16	; 0x04
     d18:	15 83       	std	Z+5, r17	; 0x05
     d1a:	26 83       	std	Z+6, r18	; 0x06
     d1c:	37 83       	std	Z+7, r19	; 0x07
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	80 83       	st	Z, r24
     d22:	44 81       	ldd	r20, Z+4	; 0x04
     d24:	55 81       	ldd	r21, Z+5	; 0x05
     d26:	66 81       	ldd	r22, Z+6	; 0x06
     d28:	77 81       	ldd	r23, Z+7	; 0x07
     d2a:	77 ff       	sbrs	r23, 7
     d2c:	1d c0       	rjmp	.+58     	; 0xd68 <_fpadd_parts+0x294>
     d2e:	db 01       	movw	r26, r22
     d30:	ca 01       	movw	r24, r20
     d32:	81 70       	andi	r24, 0x01	; 1
     d34:	90 70       	andi	r25, 0x00	; 0
     d36:	a0 70       	andi	r26, 0x00	; 0
     d38:	b0 70       	andi	r27, 0x00	; 0
     d3a:	76 95       	lsr	r23
     d3c:	67 95       	ror	r22
     d3e:	57 95       	ror	r21
     d40:	47 95       	ror	r20
     d42:	84 2b       	or	r24, r20
     d44:	95 2b       	or	r25, r21
     d46:	a6 2b       	or	r26, r22
     d48:	b7 2b       	or	r27, r23
     d4a:	84 83       	std	Z+4, r24	; 0x04
     d4c:	95 83       	std	Z+5, r25	; 0x05
     d4e:	a6 83       	std	Z+6, r26	; 0x06
     d50:	b7 83       	std	Z+7, r27	; 0x07
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	93 81       	ldd	r25, Z+3	; 0x03
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	93 83       	std	Z+3, r25	; 0x03
     d5a:	82 83       	std	Z+2, r24	; 0x02
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <_fpadd_parts+0x294>
     d5e:	ce e9       	ldi	r28, 0x9E	; 158
     d60:	d1 e0       	ldi	r29, 0x01	; 1
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <_fpadd_parts+0x296>
     d64:	e4 01       	movw	r28, r8
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <_fpadd_parts+0x296>
     d68:	ef 01       	movw	r28, r30
     d6a:	ce 01       	movw	r24, r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	e0 e1       	ldi	r30, 0x10	; 16
     d72:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__epilogue_restores__+0x4>

00000d76 <__addsf3>:
     d76:	a0 e2       	ldi	r26, 0x20	; 32
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 ec       	ldi	r30, 0xC1	; 193
     d7c:	f6 e0       	ldi	r31, 0x06	; 6
     d7e:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__prologue_saves__+0x20>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	8d 83       	std	Y+5, r24	; 0x05
     d88:	9e 83       	std	Y+6, r25	; 0x06
     d8a:	af 83       	std	Y+7, r26	; 0x07
     d8c:	b8 87       	std	Y+8, r27	; 0x08
     d8e:	29 83       	std	Y+1, r18	; 0x01
     d90:	3a 83       	std	Y+2, r19	; 0x02
     d92:	4b 83       	std	Y+3, r20	; 0x03
     d94:	5c 83       	std	Y+4, r21	; 0x04
     d96:	ce 01       	movw	r24, r28
     d98:	05 96       	adiw	r24, 0x05	; 5
     d9a:	be 01       	movw	r22, r28
     d9c:	67 5e       	subi	r22, 0xE7	; 231
     d9e:	7f 4f       	sbci	r23, 0xFF	; 255
     da0:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     da4:	ce 01       	movw	r24, r28
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	be 01       	movw	r22, r28
     daa:	6f 5e       	subi	r22, 0xEF	; 239
     dac:	7f 4f       	sbci	r23, 0xFF	; 255
     dae:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     db2:	ce 01       	movw	r24, r28
     db4:	49 96       	adiw	r24, 0x19	; 25
     db6:	be 01       	movw	r22, r28
     db8:	6f 5e       	subi	r22, 0xEF	; 239
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	ae 01       	movw	r20, r28
     dbe:	47 5f       	subi	r20, 0xF7	; 247
     dc0:	5f 4f       	sbci	r21, 0xFF	; 255
     dc2:	0e 94 6a 05 	call	0xad4	; 0xad4 <_fpadd_parts>
     dc6:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__pack_f>
     dca:	46 2f       	mov	r20, r22
     dcc:	57 2f       	mov	r21, r23
     dce:	68 2f       	mov	r22, r24
     dd0:	79 2f       	mov	r23, r25
     dd2:	cb 01       	movw	r24, r22
     dd4:	ba 01       	movw	r22, r20
     dd6:	a0 96       	adiw	r28, 0x20	; 32
     dd8:	e2 e0       	ldi	r30, 0x02	; 2
     dda:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__epilogue_restores__+0x20>

00000dde <__subsf3>:
     dde:	a0 e2       	ldi	r26, 0x20	; 32
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e5 ef       	ldi	r30, 0xF5	; 245
     de4:	f6 e0       	ldi	r31, 0x06	; 6
     de6:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__prologue_saves__+0x20>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	8d 83       	std	Y+5, r24	; 0x05
     df0:	9e 83       	std	Y+6, r25	; 0x06
     df2:	af 83       	std	Y+7, r26	; 0x07
     df4:	b8 87       	std	Y+8, r27	; 0x08
     df6:	29 83       	std	Y+1, r18	; 0x01
     df8:	3a 83       	std	Y+2, r19	; 0x02
     dfa:	4b 83       	std	Y+3, r20	; 0x03
     dfc:	5c 83       	std	Y+4, r21	; 0x04
     dfe:	ce 01       	movw	r24, r28
     e00:	05 96       	adiw	r24, 0x05	; 5
     e02:	be 01       	movw	r22, r28
     e04:	67 5e       	subi	r22, 0xE7	; 231
     e06:	7f 4f       	sbci	r23, 0xFF	; 255
     e08:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	be 01       	movw	r22, r28
     e12:	6f 5e       	subi	r22, 0xEF	; 239
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     e1a:	8a 89       	ldd	r24, Y+18	; 0x12
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	89 27       	eor	r24, r25
     e20:	8a 8b       	std	Y+18, r24	; 0x12
     e22:	ce 01       	movw	r24, r28
     e24:	49 96       	adiw	r24, 0x19	; 25
     e26:	be 01       	movw	r22, r28
     e28:	6f 5e       	subi	r22, 0xEF	; 239
     e2a:	7f 4f       	sbci	r23, 0xFF	; 255
     e2c:	ae 01       	movw	r20, r28
     e2e:	47 5f       	subi	r20, 0xF7	; 247
     e30:	5f 4f       	sbci	r21, 0xFF	; 255
     e32:	0e 94 6a 05 	call	0xad4	; 0xad4 <_fpadd_parts>
     e36:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__pack_f>
     e3a:	46 2f       	mov	r20, r22
     e3c:	57 2f       	mov	r21, r23
     e3e:	68 2f       	mov	r22, r24
     e40:	79 2f       	mov	r23, r25
     e42:	cb 01       	movw	r24, r22
     e44:	ba 01       	movw	r22, r20
     e46:	a0 96       	adiw	r28, 0x20	; 32
     e48:	e2 e0       	ldi	r30, 0x02	; 2
     e4a:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__epilogue_restores__+0x20>

00000e4e <__mulsf3>:
     e4e:	a0 e2       	ldi	r26, 0x20	; 32
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ed e2       	ldi	r30, 0x2D	; 45
     e54:	f7 e0       	ldi	r31, 0x07	; 7
     e56:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__prologue_saves__+0x4>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	8d 83       	std	Y+5, r24	; 0x05
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	af 83       	std	Y+7, r26	; 0x07
     e64:	b8 87       	std	Y+8, r27	; 0x08
     e66:	29 83       	std	Y+1, r18	; 0x01
     e68:	3a 83       	std	Y+2, r19	; 0x02
     e6a:	4b 83       	std	Y+3, r20	; 0x03
     e6c:	5c 83       	std	Y+4, r21	; 0x04
     e6e:	ce 01       	movw	r24, r28
     e70:	05 96       	adiw	r24, 0x05	; 5
     e72:	be 01       	movw	r22, r28
     e74:	67 5e       	subi	r22, 0xE7	; 231
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     e7c:	ce 01       	movw	r24, r28
     e7e:	01 96       	adiw	r24, 0x01	; 1
     e80:	be 01       	movw	r22, r28
     e82:	6f 5e       	subi	r22, 0xEF	; 239
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     e8a:	99 8d       	ldd	r25, Y+25	; 0x19
     e8c:	92 30       	cpi	r25, 0x02	; 2
     e8e:	78 f0       	brcs	.+30     	; 0xeae <__mulsf3+0x60>
     e90:	89 89       	ldd	r24, Y+17	; 0x11
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	c0 f0       	brcs	.+48     	; 0xec6 <__mulsf3+0x78>
     e96:	94 30       	cpi	r25, 0x04	; 4
     e98:	19 f4       	brne	.+6      	; 0xea0 <__mulsf3+0x52>
     e9a:	82 30       	cpi	r24, 0x02	; 2
     e9c:	41 f4       	brne	.+16     	; 0xeae <__mulsf3+0x60>
     e9e:	ca c0       	rjmp	.+404    	; 0x1034 <__mulsf3+0x1e6>
     ea0:	84 30       	cpi	r24, 0x04	; 4
     ea2:	19 f4       	brne	.+6      	; 0xeaa <__mulsf3+0x5c>
     ea4:	92 30       	cpi	r25, 0x02	; 2
     ea6:	79 f4       	brne	.+30     	; 0xec6 <__mulsf3+0x78>
     ea8:	c5 c0       	rjmp	.+394    	; 0x1034 <__mulsf3+0x1e6>
     eaa:	92 30       	cpi	r25, 0x02	; 2
     eac:	51 f4       	brne	.+20     	; 0xec2 <__mulsf3+0x74>
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	2a 8d       	ldd	r18, Y+26	; 0x1a
     eb2:	9a 89       	ldd	r25, Y+18	; 0x12
     eb4:	29 17       	cp	r18, r25
     eb6:	09 f4       	brne	.+2      	; 0xeba <__mulsf3+0x6c>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	8a 8f       	std	Y+26, r24	; 0x1a
     ebc:	ce 01       	movw	r24, r28
     ebe:	49 96       	adiw	r24, 0x19	; 25
     ec0:	bb c0       	rjmp	.+374    	; 0x1038 <__mulsf3+0x1ea>
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	51 f4       	brne	.+20     	; 0xeda <__mulsf3+0x8c>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	2a 8d       	ldd	r18, Y+26	; 0x1a
     eca:	9a 89       	ldd	r25, Y+18	; 0x12
     ecc:	29 17       	cp	r18, r25
     ece:	09 f4       	brne	.+2      	; 0xed2 <__mulsf3+0x84>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	8a 8b       	std	Y+18, r24	; 0x12
     ed4:	ce 01       	movw	r24, r28
     ed6:	41 96       	adiw	r24, 0x11	; 17
     ed8:	af c0       	rjmp	.+350    	; 0x1038 <__mulsf3+0x1ea>
     eda:	4d 8c       	ldd	r4, Y+29	; 0x1d
     edc:	5e 8c       	ldd	r5, Y+30	; 0x1e
     ede:	6f 8c       	ldd	r6, Y+31	; 0x1f
     ee0:	78 a0       	lds	r23, 0x88
     ee2:	0d 89       	ldd	r16, Y+21	; 0x15
     ee4:	1e 89       	ldd	r17, Y+22	; 0x16
     ee6:	2f 89       	ldd	r18, Y+23	; 0x17
     ee8:	38 8d       	ldd	r19, Y+24	; 0x18
     eea:	e0 e2       	ldi	r30, 0x20	; 32
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	ba 01       	movw	r22, r20
     ef4:	88 24       	eor	r8, r8
     ef6:	99 24       	eor	r9, r9
     ef8:	54 01       	movw	r10, r8
     efa:	cc 24       	eor	r12, r12
     efc:	dd 24       	eor	r13, r13
     efe:	76 01       	movw	r14, r12
     f00:	c2 01       	movw	r24, r4
     f02:	81 70       	andi	r24, 0x01	; 1
     f04:	90 70       	andi	r25, 0x00	; 0
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	d1 f0       	breq	.+52     	; 0xf3e <__mulsf3+0xf0>
     f0a:	c0 0e       	add	r12, r16
     f0c:	d1 1e       	adc	r13, r17
     f0e:	e2 1e       	adc	r14, r18
     f10:	f3 1e       	adc	r15, r19
     f12:	db 01       	movw	r26, r22
     f14:	ca 01       	movw	r24, r20
     f16:	88 0d       	add	r24, r8
     f18:	99 1d       	adc	r25, r9
     f1a:	aa 1d       	adc	r26, r10
     f1c:	bb 1d       	adc	r27, r11
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	c0 16       	cp	r12, r16
     f28:	d1 06       	cpc	r13, r17
     f2a:	e2 06       	cpc	r14, r18
     f2c:	f3 06       	cpc	r15, r19
     f2e:	18 f0       	brcs	.+6      	; 0xf36 <__mulsf3+0xe8>
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	ba 01       	movw	r22, r20
     f36:	48 0f       	add	r20, r24
     f38:	59 1f       	adc	r21, r25
     f3a:	6a 1f       	adc	r22, r26
     f3c:	7b 1f       	adc	r23, r27
     f3e:	88 0c       	add	r8, r8
     f40:	99 1c       	adc	r9, r9
     f42:	aa 1c       	adc	r10, r10
     f44:	bb 1c       	adc	r11, r11
     f46:	37 ff       	sbrs	r19, 7
     f48:	08 c0       	rjmp	.+16     	; 0xf5a <__mulsf3+0x10c>
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a0 e0       	ldi	r26, 0x00	; 0
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	88 2a       	or	r8, r24
     f54:	99 2a       	or	r9, r25
     f56:	aa 2a       	or	r10, r26
     f58:	bb 2a       	or	r11, r27
     f5a:	00 0f       	add	r16, r16
     f5c:	11 1f       	adc	r17, r17
     f5e:	22 1f       	adc	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	76 94       	lsr	r7
     f64:	67 94       	ror	r6
     f66:	57 94       	ror	r5
     f68:	47 94       	ror	r4
     f6a:	31 97       	sbiw	r30, 0x01	; 1
     f6c:	49 f6       	brne	.-110    	; 0xf00 <__mulsf3+0xb2>
     f6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f70:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f72:	2b 89       	ldd	r18, Y+19	; 0x13
     f74:	3c 89       	ldd	r19, Y+20	; 0x14
     f76:	82 0f       	add	r24, r18
     f78:	93 1f       	adc	r25, r19
     f7a:	02 96       	adiw	r24, 0x02	; 2
     f7c:	9c 87       	std	Y+12, r25	; 0x0c
     f7e:	8b 87       	std	Y+11, r24	; 0x0b
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	2a 8d       	ldd	r18, Y+26	; 0x1a
     f84:	9a 89       	ldd	r25, Y+18	; 0x12
     f86:	29 17       	cp	r18, r25
     f88:	09 f4       	brne	.+2      	; 0xf8c <__mulsf3+0x13e>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	8a 87       	std	Y+10, r24	; 0x0a
     f8e:	2b 85       	ldd	r18, Y+11	; 0x0b
     f90:	3c 85       	ldd	r19, Y+12	; 0x0c
     f92:	17 c0       	rjmp	.+46     	; 0xfc2 <__mulsf3+0x174>
     f94:	ca 01       	movw	r24, r20
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	90 70       	andi	r25, 0x00	; 0
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	61 f0       	breq	.+24     	; 0xfb6 <__mulsf3+0x168>
     f9e:	f6 94       	lsr	r15
     fa0:	e7 94       	ror	r14
     fa2:	d7 94       	ror	r13
     fa4:	c7 94       	ror	r12
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e0       	ldi	r26, 0x00	; 0
     fac:	b0 e8       	ldi	r27, 0x80	; 128
     fae:	c8 2a       	or	r12, r24
     fb0:	d9 2a       	or	r13, r25
     fb2:	ea 2a       	or	r14, r26
     fb4:	fb 2a       	or	r15, r27
     fb6:	76 95       	lsr	r23
     fb8:	67 95       	ror	r22
     fba:	57 95       	ror	r21
     fbc:	47 95       	ror	r20
     fbe:	2f 5f       	subi	r18, 0xFF	; 255
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	77 fd       	sbrc	r23, 7
     fc4:	e7 cf       	rjmp	.-50     	; 0xf94 <__mulsf3+0x146>
     fc6:	c9 01       	movw	r24, r18
     fc8:	0b c0       	rjmp	.+22     	; 0xfe0 <__mulsf3+0x192>
     fca:	44 0f       	add	r20, r20
     fcc:	55 1f       	adc	r21, r21
     fce:	66 1f       	adc	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	f7 fc       	sbrc	r15, 7
     fd4:	41 60       	ori	r20, 0x01	; 1
     fd6:	cc 0c       	add	r12, r12
     fd8:	dd 1c       	adc	r13, r13
     fda:	ee 1c       	adc	r14, r14
     fdc:	ff 1c       	adc	r15, r15
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	40 30       	cpi	r20, 0x00	; 0
     fe2:	a0 e0       	ldi	r26, 0x00	; 0
     fe4:	5a 07       	cpc	r21, r26
     fe6:	a0 e0       	ldi	r26, 0x00	; 0
     fe8:	6a 07       	cpc	r22, r26
     fea:	a0 e4       	ldi	r26, 0x40	; 64
     fec:	7a 07       	cpc	r23, r26
     fee:	68 f3       	brcs	.-38     	; 0xfca <__mulsf3+0x17c>
     ff0:	8b 87       	std	Y+11, r24	; 0x0b
     ff2:	9c 87       	std	Y+12, r25	; 0x0c
     ff4:	db 01       	movw	r26, r22
     ff6:	ca 01       	movw	r24, r20
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	61 f4       	brne	.+24     	; 0x1022 <__mulsf3+0x1d4>
    100a:	47 fd       	sbrc	r20, 7
    100c:	0a c0       	rjmp	.+20     	; 0x1022 <__mulsf3+0x1d4>
    100e:	c1 14       	cp	r12, r1
    1010:	d1 04       	cpc	r13, r1
    1012:	e1 04       	cpc	r14, r1
    1014:	f1 04       	cpc	r15, r1
    1016:	29 f0       	breq	.+10     	; 0x1022 <__mulsf3+0x1d4>
    1018:	40 5c       	subi	r20, 0xC0	; 192
    101a:	5f 4f       	sbci	r21, 0xFF	; 255
    101c:	6f 4f       	sbci	r22, 0xFF	; 255
    101e:	7f 4f       	sbci	r23, 0xFF	; 255
    1020:	40 78       	andi	r20, 0x80	; 128
    1022:	4d 87       	std	Y+13, r20	; 0x0d
    1024:	5e 87       	std	Y+14, r21	; 0x0e
    1026:	6f 87       	std	Y+15, r22	; 0x0f
    1028:	78 8b       	std	Y+16, r23	; 0x10
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	89 87       	std	Y+9, r24	; 0x09
    102e:	ce 01       	movw	r24, r28
    1030:	09 96       	adiw	r24, 0x09	; 9
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <__mulsf3+0x1ea>
    1034:	8e e9       	ldi	r24, 0x9E	; 158
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__pack_f>
    103c:	46 2f       	mov	r20, r22
    103e:	57 2f       	mov	r21, r23
    1040:	68 2f       	mov	r22, r24
    1042:	79 2f       	mov	r23, r25
    1044:	cb 01       	movw	r24, r22
    1046:	ba 01       	movw	r22, r20
    1048:	a0 96       	adiw	r28, 0x20	; 32
    104a:	e0 e1       	ldi	r30, 0x10	; 16
    104c:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__epilogue_restores__+0x4>

00001050 <__divsf3>:
    1050:	a8 e1       	ldi	r26, 0x18	; 24
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ee e2       	ldi	r30, 0x2E	; 46
    1056:	f8 e0       	ldi	r31, 0x08	; 8
    1058:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__prologue_saves__+0x14>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	8d 83       	std	Y+5, r24	; 0x05
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	af 83       	std	Y+7, r26	; 0x07
    1066:	b8 87       	std	Y+8, r27	; 0x08
    1068:	29 83       	std	Y+1, r18	; 0x01
    106a:	3a 83       	std	Y+2, r19	; 0x02
    106c:	4b 83       	std	Y+3, r20	; 0x03
    106e:	5c 83       	std	Y+4, r21	; 0x04
    1070:	ce 01       	movw	r24, r28
    1072:	05 96       	adiw	r24, 0x05	; 5
    1074:	be 01       	movw	r22, r28
    1076:	6f 5e       	subi	r22, 0xEF	; 239
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    107e:	ce 01       	movw	r24, r28
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	be 01       	movw	r22, r28
    1084:	67 5f       	subi	r22, 0xF7	; 247
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    108c:	99 89       	ldd	r25, Y+17	; 0x11
    108e:	92 30       	cpi	r25, 0x02	; 2
    1090:	08 f4       	brcc	.+2      	; 0x1094 <__divsf3+0x44>
    1092:	75 c0       	rjmp	.+234    	; 0x117e <__stack+0x7f>
    1094:	89 85       	ldd	r24, Y+9	; 0x09
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	08 f4       	brcc	.+2      	; 0x109c <__divsf3+0x4c>
    109a:	74 c0       	rjmp	.+232    	; 0x1184 <__stack+0x85>
    109c:	2a 89       	ldd	r18, Y+18	; 0x12
    109e:	3a 85       	ldd	r19, Y+10	; 0x0a
    10a0:	23 27       	eor	r18, r19
    10a2:	2a 8b       	std	Y+18, r18	; 0x12
    10a4:	94 30       	cpi	r25, 0x04	; 4
    10a6:	11 f0       	breq	.+4      	; 0x10ac <__divsf3+0x5c>
    10a8:	92 30       	cpi	r25, 0x02	; 2
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <__divsf3+0x64>
    10ac:	98 17       	cp	r25, r24
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <__divsf3+0x62>
    10b0:	66 c0       	rjmp	.+204    	; 0x117e <__stack+0x7f>
    10b2:	6b c0       	rjmp	.+214    	; 0x118a <__stack+0x8b>
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	39 f4       	brne	.+14     	; 0x10c6 <__divsf3+0x76>
    10b8:	1d 8a       	std	Y+21, r1	; 0x15
    10ba:	1e 8a       	std	Y+22, r1	; 0x16
    10bc:	1f 8a       	std	Y+23, r1	; 0x17
    10be:	18 8e       	std	Y+24, r1	; 0x18
    10c0:	1c 8a       	std	Y+20, r1	; 0x14
    10c2:	1b 8a       	std	Y+19, r1	; 0x13
    10c4:	5c c0       	rjmp	.+184    	; 0x117e <__stack+0x7f>
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	19 f4       	brne	.+6      	; 0x10d0 <__divsf3+0x80>
    10ca:	84 e0       	ldi	r24, 0x04	; 4
    10cc:	89 8b       	std	Y+17, r24	; 0x11
    10ce:	57 c0       	rjmp	.+174    	; 0x117e <__stack+0x7f>
    10d0:	2b 89       	ldd	r18, Y+19	; 0x13
    10d2:	3c 89       	ldd	r19, Y+20	; 0x14
    10d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10d8:	28 1b       	sub	r18, r24
    10da:	39 0b       	sbc	r19, r25
    10dc:	3c 8b       	std	Y+20, r19	; 0x14
    10de:	2b 8b       	std	Y+19, r18	; 0x13
    10e0:	8d 89       	ldd	r24, Y+21	; 0x15
    10e2:	9e 89       	ldd	r25, Y+22	; 0x16
    10e4:	af 89       	ldd	r26, Y+23	; 0x17
    10e6:	b8 8d       	ldd	r27, Y+24	; 0x18
    10e8:	cd 84       	ldd	r12, Y+13	; 0x0d
    10ea:	de 84       	ldd	r13, Y+14	; 0x0e
    10ec:	ef 84       	ldd	r14, Y+15	; 0x0f
    10ee:	f8 88       	ldd	r15, Y+16	; 0x10
    10f0:	8c 15       	cp	r24, r12
    10f2:	9d 05       	cpc	r25, r13
    10f4:	ae 05       	cpc	r26, r14
    10f6:	bf 05       	cpc	r27, r15
    10f8:	40 f4       	brcc	.+16     	; 0x110a <__stack+0xb>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	aa 1f       	adc	r26, r26
    1100:	bb 1f       	adc	r27, r27
    1102:	21 50       	subi	r18, 0x01	; 1
    1104:	30 40       	sbci	r19, 0x00	; 0
    1106:	3c 8b       	std	Y+20, r19	; 0x14
    1108:	2b 8b       	std	Y+19, r18	; 0x13
    110a:	ef e1       	ldi	r30, 0x1F	; 31
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	00 e0       	ldi	r16, 0x00	; 0
    1110:	10 e0       	ldi	r17, 0x00	; 0
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e4       	ldi	r19, 0x40	; 64
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	ba 01       	movw	r22, r20
    111c:	8c 15       	cp	r24, r12
    111e:	9d 05       	cpc	r25, r13
    1120:	ae 05       	cpc	r26, r14
    1122:	bf 05       	cpc	r27, r15
    1124:	40 f0       	brcs	.+16     	; 0x1136 <__stack+0x37>
    1126:	40 2b       	or	r20, r16
    1128:	51 2b       	or	r21, r17
    112a:	62 2b       	or	r22, r18
    112c:	73 2b       	or	r23, r19
    112e:	8c 19       	sub	r24, r12
    1130:	9d 09       	sbc	r25, r13
    1132:	ae 09       	sbc	r26, r14
    1134:	bf 09       	sbc	r27, r15
    1136:	36 95       	lsr	r19
    1138:	27 95       	ror	r18
    113a:	17 95       	ror	r17
    113c:	07 95       	ror	r16
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	aa 1f       	adc	r26, r26
    1144:	bb 1f       	adc	r27, r27
    1146:	31 97       	sbiw	r30, 0x01	; 1
    1148:	49 f7       	brne	.-46     	; 0x111c <__stack+0x1d>
    114a:	8a 01       	movw	r16, r20
    114c:	9b 01       	movw	r18, r22
    114e:	0f 77       	andi	r16, 0x7F	; 127
    1150:	10 70       	andi	r17, 0x00	; 0
    1152:	20 70       	andi	r18, 0x00	; 0
    1154:	30 70       	andi	r19, 0x00	; 0
    1156:	00 34       	cpi	r16, 0x40	; 64
    1158:	11 05       	cpc	r17, r1
    115a:	21 05       	cpc	r18, r1
    115c:	31 05       	cpc	r19, r1
    115e:	59 f4       	brne	.+22     	; 0x1176 <__stack+0x77>
    1160:	47 fd       	sbrc	r20, 7
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <__stack+0x77>
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	a1 05       	cpc	r26, r1
    1168:	b1 05       	cpc	r27, r1
    116a:	29 f0       	breq	.+10     	; 0x1176 <__stack+0x77>
    116c:	40 5c       	subi	r20, 0xC0	; 192
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	6f 4f       	sbci	r22, 0xFF	; 255
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	40 78       	andi	r20, 0x80	; 128
    1176:	4d 8b       	std	Y+21, r20	; 0x15
    1178:	5e 8b       	std	Y+22, r21	; 0x16
    117a:	6f 8b       	std	Y+23, r22	; 0x17
    117c:	78 8f       	std	Y+24, r23	; 0x18
    117e:	ce 01       	movw	r24, r28
    1180:	41 96       	adiw	r24, 0x11	; 17
    1182:	05 c0       	rjmp	.+10     	; 0x118e <__stack+0x8f>
    1184:	ce 01       	movw	r24, r28
    1186:	09 96       	adiw	r24, 0x09	; 9
    1188:	02 c0       	rjmp	.+4      	; 0x118e <__stack+0x8f>
    118a:	8e e9       	ldi	r24, 0x9E	; 158
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__pack_f>
    1192:	46 2f       	mov	r20, r22
    1194:	57 2f       	mov	r21, r23
    1196:	68 2f       	mov	r22, r24
    1198:	79 2f       	mov	r23, r25
    119a:	cb 01       	movw	r24, r22
    119c:	ba 01       	movw	r22, r20
    119e:	68 96       	adiw	r28, 0x18	; 24
    11a0:	e8 e0       	ldi	r30, 0x08	; 8
    11a2:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__epilogue_restores__+0x14>

000011a6 <__gtsf2>:
    11a6:	a8 e1       	ldi	r26, 0x18	; 24
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e9 ed       	ldi	r30, 0xD9	; 217
    11ac:	f8 e0       	ldi	r31, 0x08	; 8
    11ae:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__prologue_saves__+0x20>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	8d 83       	std	Y+5, r24	; 0x05
    11b8:	9e 83       	std	Y+6, r25	; 0x06
    11ba:	af 83       	std	Y+7, r26	; 0x07
    11bc:	b8 87       	std	Y+8, r27	; 0x08
    11be:	29 83       	std	Y+1, r18	; 0x01
    11c0:	3a 83       	std	Y+2, r19	; 0x02
    11c2:	4b 83       	std	Y+3, r20	; 0x03
    11c4:	5c 83       	std	Y+4, r21	; 0x04
    11c6:	ce 01       	movw	r24, r28
    11c8:	05 96       	adiw	r24, 0x05	; 5
    11ca:	be 01       	movw	r22, r28
    11cc:	6f 5e       	subi	r22, 0xEF	; 239
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	be 01       	movw	r22, r28
    11da:	67 5f       	subi	r22, 0xF7	; 247
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    11e2:	89 89       	ldd	r24, Y+17	; 0x11
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	58 f0       	brcs	.+22     	; 0x11fe <__gtsf2+0x58>
    11e8:	89 85       	ldd	r24, Y+9	; 0x09
    11ea:	82 30       	cpi	r24, 0x02	; 2
    11ec:	40 f0       	brcs	.+16     	; 0x11fe <__gtsf2+0x58>
    11ee:	ce 01       	movw	r24, r28
    11f0:	41 96       	adiw	r24, 0x11	; 17
    11f2:	be 01       	movw	r22, r28
    11f4:	67 5f       	subi	r22, 0xF7	; 247
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    11fc:	01 c0       	rjmp	.+2      	; 0x1200 <__gtsf2+0x5a>
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	68 96       	adiw	r28, 0x18	; 24
    1202:	e2 e0       	ldi	r30, 0x02	; 2
    1204:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__epilogue_restores__+0x20>

00001208 <__gesf2>:
    1208:	a8 e1       	ldi	r26, 0x18	; 24
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	ea e0       	ldi	r30, 0x0A	; 10
    120e:	f9 e0       	ldi	r31, 0x09	; 9
    1210:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__prologue_saves__+0x20>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	8d 83       	std	Y+5, r24	; 0x05
    121a:	9e 83       	std	Y+6, r25	; 0x06
    121c:	af 83       	std	Y+7, r26	; 0x07
    121e:	b8 87       	std	Y+8, r27	; 0x08
    1220:	29 83       	std	Y+1, r18	; 0x01
    1222:	3a 83       	std	Y+2, r19	; 0x02
    1224:	4b 83       	std	Y+3, r20	; 0x03
    1226:	5c 83       	std	Y+4, r21	; 0x04
    1228:	ce 01       	movw	r24, r28
    122a:	05 96       	adiw	r24, 0x05	; 5
    122c:	be 01       	movw	r22, r28
    122e:	6f 5e       	subi	r22, 0xEF	; 239
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    1236:	ce 01       	movw	r24, r28
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	be 01       	movw	r22, r28
    123c:	67 5f       	subi	r22, 0xF7	; 247
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    1244:	89 89       	ldd	r24, Y+17	; 0x11
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	58 f0       	brcs	.+22     	; 0x1260 <__gesf2+0x58>
    124a:	89 85       	ldd	r24, Y+9	; 0x09
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	40 f0       	brcs	.+16     	; 0x1260 <__gesf2+0x58>
    1250:	ce 01       	movw	r24, r28
    1252:	41 96       	adiw	r24, 0x11	; 17
    1254:	be 01       	movw	r22, r28
    1256:	67 5f       	subi	r22, 0xF7	; 247
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <__gesf2+0x5a>
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	68 96       	adiw	r28, 0x18	; 24
    1264:	e2 e0       	ldi	r30, 0x02	; 2
    1266:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__epilogue_restores__+0x20>

0000126a <__ltsf2>:
    126a:	a8 e1       	ldi	r26, 0x18	; 24
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	eb e3       	ldi	r30, 0x3B	; 59
    1270:	f9 e0       	ldi	r31, 0x09	; 9
    1272:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__prologue_saves__+0x20>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	8d 83       	std	Y+5, r24	; 0x05
    127c:	9e 83       	std	Y+6, r25	; 0x06
    127e:	af 83       	std	Y+7, r26	; 0x07
    1280:	b8 87       	std	Y+8, r27	; 0x08
    1282:	29 83       	std	Y+1, r18	; 0x01
    1284:	3a 83       	std	Y+2, r19	; 0x02
    1286:	4b 83       	std	Y+3, r20	; 0x03
    1288:	5c 83       	std	Y+4, r21	; 0x04
    128a:	ce 01       	movw	r24, r28
    128c:	05 96       	adiw	r24, 0x05	; 5
    128e:	be 01       	movw	r22, r28
    1290:	6f 5e       	subi	r22, 0xEF	; 239
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    1298:	ce 01       	movw	r24, r28
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	be 01       	movw	r22, r28
    129e:	67 5f       	subi	r22, 0xF7	; 247
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    12a6:	89 89       	ldd	r24, Y+17	; 0x11
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	58 f0       	brcs	.+22     	; 0x12c2 <__ltsf2+0x58>
    12ac:	89 85       	ldd	r24, Y+9	; 0x09
    12ae:	82 30       	cpi	r24, 0x02	; 2
    12b0:	40 f0       	brcs	.+16     	; 0x12c2 <__ltsf2+0x58>
    12b2:	ce 01       	movw	r24, r28
    12b4:	41 96       	adiw	r24, 0x11	; 17
    12b6:	be 01       	movw	r22, r28
    12b8:	67 5f       	subi	r22, 0xF7	; 247
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <__ltsf2+0x5a>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	68 96       	adiw	r28, 0x18	; 24
    12c6:	e2 e0       	ldi	r30, 0x02	; 2
    12c8:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__epilogue_restores__+0x20>

000012cc <__floatsisf>:
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	28 97       	sbiw	r28, 0x08	; 8
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	6b 01       	movw	r12, r22
    12ea:	7c 01       	movw	r14, r24
    12ec:	83 e0       	ldi	r24, 0x03	; 3
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	d7 01       	movw	r26, r14
    12f2:	c6 01       	movw	r24, r12
    12f4:	88 27       	eor	r24, r24
    12f6:	b7 fd       	sbrc	r27, 7
    12f8:	83 95       	inc	r24
    12fa:	99 27       	eor	r25, r25
    12fc:	aa 27       	eor	r26, r26
    12fe:	bb 27       	eor	r27, r27
    1300:	28 2f       	mov	r18, r24
    1302:	8a 83       	std	Y+2, r24	; 0x02
    1304:	c1 14       	cp	r12, r1
    1306:	d1 04       	cpc	r13, r1
    1308:	e1 04       	cpc	r14, r1
    130a:	f1 04       	cpc	r15, r1
    130c:	19 f4       	brne	.+6      	; 0x1314 <__floatsisf+0x48>
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	35 c0       	rjmp	.+106    	; 0x137e <__floatsisf+0xb2>
    1314:	8e e1       	ldi	r24, 0x1E	; 30
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
    131c:	22 23       	and	r18, r18
    131e:	89 f0       	breq	.+34     	; 0x1342 <__floatsisf+0x76>
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	c8 16       	cp	r12, r24
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	d8 06       	cpc	r13, r24
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	e8 06       	cpc	r14, r24
    132c:	80 e8       	ldi	r24, 0x80	; 128
    132e:	f8 06       	cpc	r15, r24
    1330:	59 f1       	breq	.+86     	; 0x1388 <__floatsisf+0xbc>
    1332:	f0 94       	com	r15
    1334:	e0 94       	com	r14
    1336:	d0 94       	com	r13
    1338:	c0 94       	com	r12
    133a:	c1 1c       	adc	r12, r1
    133c:	d1 1c       	adc	r13, r1
    133e:	e1 1c       	adc	r14, r1
    1340:	f1 1c       	adc	r15, r1
    1342:	cd 82       	std	Y+5, r12	; 0x05
    1344:	de 82       	std	Y+6, r13	; 0x06
    1346:	ef 82       	std	Y+7, r14	; 0x07
    1348:	f8 86       	std	Y+8, r15	; 0x08
    134a:	c7 01       	movw	r24, r14
    134c:	b6 01       	movw	r22, r12
    134e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__clzsi2>
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	18 16       	cp	r1, r24
    1356:	19 06       	cpc	r1, r25
    1358:	94 f4       	brge	.+36     	; 0x137e <__floatsisf+0xb2>
    135a:	08 2e       	mov	r0, r24
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <__floatsisf+0x9a>
    135e:	cc 0c       	add	r12, r12
    1360:	dd 1c       	adc	r13, r13
    1362:	ee 1c       	adc	r14, r14
    1364:	ff 1c       	adc	r15, r15
    1366:	0a 94       	dec	r0
    1368:	d2 f7       	brpl	.-12     	; 0x135e <__floatsisf+0x92>
    136a:	cd 82       	std	Y+5, r12	; 0x05
    136c:	de 82       	std	Y+6, r13	; 0x06
    136e:	ef 82       	std	Y+7, r14	; 0x07
    1370:	f8 86       	std	Y+8, r15	; 0x08
    1372:	2e e1       	ldi	r18, 0x1E	; 30
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	28 1b       	sub	r18, r24
    1378:	39 0b       	sbc	r19, r25
    137a:	3c 83       	std	Y+4, r19	; 0x04
    137c:	2b 83       	std	Y+3, r18	; 0x03
    137e:	ce 01       	movw	r24, r28
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__pack_f>
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <__floatsisf+0xc4>
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	9f ec       	ldi	r25, 0xCF	; 207
    1390:	38 2f       	mov	r19, r24
    1392:	29 2f       	mov	r18, r25
    1394:	86 2f       	mov	r24, r22
    1396:	97 2f       	mov	r25, r23
    1398:	a3 2f       	mov	r26, r19
    139a:	b2 2f       	mov	r27, r18
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	28 96       	adiw	r28, 0x08	; 8
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	df 90       	pop	r13
    13b6:	cf 90       	pop	r12
    13b8:	08 95       	ret

000013ba <__fixsfsi>:
    13ba:	ac e0       	ldi	r26, 0x0C	; 12
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 ee       	ldi	r30, 0xE3	; 227
    13c0:	f9 e0       	ldi	r31, 0x09	; 9
    13c2:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__prologue_saves__+0x1c>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	ab 83       	std	Y+3, r26	; 0x03
    13d0:	bc 83       	std	Y+4, r27	; 0x04
    13d2:	ce 01       	movw	r24, r28
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	be 01       	movw	r22, r28
    13d8:	6b 5f       	subi	r22, 0xFB	; 251
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	82 30       	cpi	r24, 0x02	; 2
    13e4:	69 f1       	breq	.+90     	; 0x1440 <__fixsfsi+0x86>
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	58 f1       	brcs	.+86     	; 0x1440 <__fixsfsi+0x86>
    13ea:	84 30       	cpi	r24, 0x04	; 4
    13ec:	39 f0       	breq	.+14     	; 0x13fc <__fixsfsi+0x42>
    13ee:	2f 81       	ldd	r18, Y+7	; 0x07
    13f0:	38 85       	ldd	r19, Y+8	; 0x08
    13f2:	37 fd       	sbrc	r19, 7
    13f4:	25 c0       	rjmp	.+74     	; 0x1440 <__fixsfsi+0x86>
    13f6:	2f 31       	cpi	r18, 0x1F	; 31
    13f8:	31 05       	cpc	r19, r1
    13fa:	44 f0       	brlt	.+16     	; 0x140c <__fixsfsi+0x52>
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	88 23       	and	r24, r24
    1400:	19 f1       	breq	.+70     	; 0x1448 <__fixsfsi+0x8e>
    1402:	00 e0       	ldi	r16, 0x00	; 0
    1404:	10 e0       	ldi	r17, 0x00	; 0
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e8       	ldi	r19, 0x80	; 128
    140a:	22 c0       	rjmp	.+68     	; 0x1450 <__fixsfsi+0x96>
    140c:	8e e1       	ldi	r24, 0x1E	; 30
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	82 1b       	sub	r24, r18
    1412:	93 0b       	sbc	r25, r19
    1414:	09 85       	ldd	r16, Y+9	; 0x09
    1416:	1a 85       	ldd	r17, Y+10	; 0x0a
    1418:	2b 85       	ldd	r18, Y+11	; 0x0b
    141a:	3c 85       	ldd	r19, Y+12	; 0x0c
    141c:	04 c0       	rjmp	.+8      	; 0x1426 <__fixsfsi+0x6c>
    141e:	36 95       	lsr	r19
    1420:	27 95       	ror	r18
    1422:	17 95       	ror	r17
    1424:	07 95       	ror	r16
    1426:	8a 95       	dec	r24
    1428:	d2 f7       	brpl	.-12     	; 0x141e <__fixsfsi+0x64>
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	88 23       	and	r24, r24
    142e:	81 f0       	breq	.+32     	; 0x1450 <__fixsfsi+0x96>
    1430:	30 95       	com	r19
    1432:	20 95       	com	r18
    1434:	10 95       	com	r17
    1436:	01 95       	neg	r16
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	2f 4f       	sbci	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	08 c0       	rjmp	.+16     	; 0x1450 <__fixsfsi+0x96>
    1440:	00 e0       	ldi	r16, 0x00	; 0
    1442:	10 e0       	ldi	r17, 0x00	; 0
    1444:	98 01       	movw	r18, r16
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <__fixsfsi+0x96>
    1448:	0f ef       	ldi	r16, 0xFF	; 255
    144a:	1f ef       	ldi	r17, 0xFF	; 255
    144c:	2f ef       	ldi	r18, 0xFF	; 255
    144e:	3f e7       	ldi	r19, 0x7F	; 127
    1450:	b8 01       	movw	r22, r16
    1452:	c9 01       	movw	r24, r18
    1454:	2c 96       	adiw	r28, 0x0c	; 12
    1456:	e4 e0       	ldi	r30, 0x04	; 4
    1458:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__epilogue_restores__+0x1c>

0000145c <__floatunsisf>:
    145c:	a8 e0       	ldi	r26, 0x08	; 8
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e4 e3       	ldi	r30, 0x34	; 52
    1462:	fa e0       	ldi	r31, 0x0A	; 10
    1464:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__prologue_saves__+0x14>
    1468:	6b 01       	movw	r12, r22
    146a:	7c 01       	movw	r14, r24
    146c:	1a 82       	std	Y+2, r1	; 0x02
    146e:	61 15       	cp	r22, r1
    1470:	71 05       	cpc	r23, r1
    1472:	81 05       	cpc	r24, r1
    1474:	91 05       	cpc	r25, r1
    1476:	19 f4       	brne	.+6      	; 0x147e <__floatunsisf+0x22>
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	5e c0       	rjmp	.+188    	; 0x153a <__floatunsisf+0xde>
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	0e e1       	ldi	r16, 0x1E	; 30
    1484:	10 e0       	ldi	r17, 0x00	; 0
    1486:	1c 83       	std	Y+4, r17	; 0x04
    1488:	0b 83       	std	Y+3, r16	; 0x03
    148a:	cd 82       	std	Y+5, r12	; 0x05
    148c:	de 82       	std	Y+6, r13	; 0x06
    148e:	ef 82       	std	Y+7, r14	; 0x07
    1490:	f8 86       	std	Y+8, r15	; 0x08
    1492:	c7 01       	movw	r24, r14
    1494:	b6 01       	movw	r22, r12
    1496:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__clzsi2>
    149a:	9c 01       	movw	r18, r24
    149c:	21 50       	subi	r18, 0x01	; 1
    149e:	30 40       	sbci	r19, 0x00	; 0
    14a0:	37 ff       	sbrs	r19, 7
    14a2:	38 c0       	rjmp	.+112    	; 0x1514 <__floatunsisf+0xb8>
    14a4:	ee 27       	eor	r30, r30
    14a6:	ff 27       	eor	r31, r31
    14a8:	e2 1b       	sub	r30, r18
    14aa:	f3 0b       	sbc	r31, r19
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a0 e0       	ldi	r26, 0x00	; 0
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	0e 2e       	mov	r0, r30
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <__floatunsisf+0x64>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	aa 1f       	adc	r26, r26
    14be:	bb 1f       	adc	r27, r27
    14c0:	0a 94       	dec	r0
    14c2:	d2 f7       	brpl	.-12     	; 0x14b8 <__floatunsisf+0x5c>
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	a1 09       	sbc	r26, r1
    14c8:	b1 09       	sbc	r27, r1
    14ca:	8c 21       	and	r24, r12
    14cc:	9d 21       	and	r25, r13
    14ce:	ae 21       	and	r26, r14
    14d0:	bf 21       	and	r27, r15
    14d2:	41 e0       	ldi	r20, 0x01	; 1
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	a1 05       	cpc	r26, r1
    14de:	b1 05       	cpc	r27, r1
    14e0:	19 f4       	brne	.+6      	; 0x14e8 <__floatunsisf+0x8c>
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	ba 01       	movw	r22, r20
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <__floatunsisf+0x96>
    14ea:	f6 94       	lsr	r15
    14ec:	e7 94       	ror	r14
    14ee:	d7 94       	ror	r13
    14f0:	c7 94       	ror	r12
    14f2:	ea 95       	dec	r30
    14f4:	d2 f7       	brpl	.-12     	; 0x14ea <__floatunsisf+0x8e>
    14f6:	c4 2a       	or	r12, r20
    14f8:	d5 2a       	or	r13, r21
    14fa:	e6 2a       	or	r14, r22
    14fc:	f7 2a       	or	r15, r23
    14fe:	cd 82       	std	Y+5, r12	; 0x05
    1500:	de 82       	std	Y+6, r13	; 0x06
    1502:	ef 82       	std	Y+7, r14	; 0x07
    1504:	f8 86       	std	Y+8, r15	; 0x08
    1506:	8e e1       	ldi	r24, 0x1E	; 30
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	82 1b       	sub	r24, r18
    150c:	93 0b       	sbc	r25, r19
    150e:	9c 83       	std	Y+4, r25	; 0x04
    1510:	8b 83       	std	Y+3, r24	; 0x03
    1512:	13 c0       	rjmp	.+38     	; 0x153a <__floatunsisf+0xde>
    1514:	21 15       	cp	r18, r1
    1516:	31 05       	cpc	r19, r1
    1518:	81 f0       	breq	.+32     	; 0x153a <__floatunsisf+0xde>
    151a:	02 2e       	mov	r0, r18
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <__floatunsisf+0xca>
    151e:	cc 0c       	add	r12, r12
    1520:	dd 1c       	adc	r13, r13
    1522:	ee 1c       	adc	r14, r14
    1524:	ff 1c       	adc	r15, r15
    1526:	0a 94       	dec	r0
    1528:	d2 f7       	brpl	.-12     	; 0x151e <__floatunsisf+0xc2>
    152a:	cd 82       	std	Y+5, r12	; 0x05
    152c:	de 82       	std	Y+6, r13	; 0x06
    152e:	ef 82       	std	Y+7, r14	; 0x07
    1530:	f8 86       	std	Y+8, r15	; 0x08
    1532:	02 1b       	sub	r16, r18
    1534:	13 0b       	sbc	r17, r19
    1536:	1c 83       	std	Y+4, r17	; 0x04
    1538:	0b 83       	std	Y+3, r16	; 0x03
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__pack_f>
    1542:	46 2f       	mov	r20, r22
    1544:	57 2f       	mov	r21, r23
    1546:	68 2f       	mov	r22, r24
    1548:	79 2f       	mov	r23, r25
    154a:	cb 01       	movw	r24, r22
    154c:	ba 01       	movw	r22, r20
    154e:	28 96       	adiw	r28, 0x08	; 8
    1550:	e8 e0       	ldi	r30, 0x08	; 8
    1552:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__epilogue_restores__+0x14>

00001556 <__clzsi2>:
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	8b 01       	movw	r16, r22
    1564:	9c 01       	movw	r18, r24
    1566:	00 30       	cpi	r16, 0x00	; 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	18 07       	cpc	r17, r24
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	28 07       	cpc	r18, r24
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	38 07       	cpc	r19, r24
    1574:	50 f4       	brcc	.+20     	; 0x158a <__clzsi2+0x34>
    1576:	0f 3f       	cpi	r16, 0xFF	; 255
    1578:	11 05       	cpc	r17, r1
    157a:	21 05       	cpc	r18, r1
    157c:	31 05       	cpc	r19, r1
    157e:	09 f0       	breq	.+2      	; 0x1582 <__clzsi2+0x2c>
    1580:	88 f4       	brcc	.+34     	; 0x15a4 <__clzsi2+0x4e>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	dc 01       	movw	r26, r24
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <__clzsi2+0x60>
    158a:	00 30       	cpi	r16, 0x00	; 0
    158c:	e0 e0       	ldi	r30, 0x00	; 0
    158e:	1e 07       	cpc	r17, r30
    1590:	e0 e0       	ldi	r30, 0x00	; 0
    1592:	2e 07       	cpc	r18, r30
    1594:	e1 e0       	ldi	r30, 0x01	; 1
    1596:	3e 07       	cpc	r19, r30
    1598:	50 f4       	brcc	.+20     	; 0x15ae <__clzsi2+0x58>
    159a:	80 e1       	ldi	r24, 0x10	; 16
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a0 e0       	ldi	r26, 0x00	; 0
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <__clzsi2+0x60>
    15a4:	88 e0       	ldi	r24, 0x08	; 8
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a0 e0       	ldi	r26, 0x00	; 0
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <__clzsi2+0x60>
    15ae:	88 e1       	ldi	r24, 0x18	; 24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a0 e0       	ldi	r26, 0x00	; 0
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	40 e2       	ldi	r20, 0x20	; 32
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	48 1b       	sub	r20, r24
    15c0:	59 0b       	sbc	r21, r25
    15c2:	6a 0b       	sbc	r22, r26
    15c4:	7b 0b       	sbc	r23, r27
    15c6:	68 01       	movw	r12, r16
    15c8:	79 01       	movw	r14, r18
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <__clzsi2+0x7e>
    15cc:	f6 94       	lsr	r15
    15ce:	e7 94       	ror	r14
    15d0:	d7 94       	ror	r13
    15d2:	c7 94       	ror	r12
    15d4:	8a 95       	dec	r24
    15d6:	d2 f7       	brpl	.-12     	; 0x15cc <__clzsi2+0x76>
    15d8:	d7 01       	movw	r26, r14
    15da:	c6 01       	movw	r24, r12
    15dc:	8a 55       	subi	r24, 0x5A	; 90
    15de:	9e 4f       	sbci	r25, 0xFE	; 254
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	48 1b       	sub	r20, r24
    15e6:	51 09       	sbc	r21, r1
    15e8:	61 09       	sbc	r22, r1
    15ea:	71 09       	sbc	r23, r1
    15ec:	ca 01       	movw	r24, r20
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	df 90       	pop	r13
    15f8:	cf 90       	pop	r12
    15fa:	08 95       	ret

000015fc <__pack_f>:
    15fc:	cf 92       	push	r12
    15fe:	df 92       	push	r13
    1600:	ef 92       	push	r14
    1602:	ff 92       	push	r15
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	dc 01       	movw	r26, r24
    160a:	14 96       	adiw	r26, 0x04	; 4
    160c:	4d 91       	ld	r20, X+
    160e:	5d 91       	ld	r21, X+
    1610:	6d 91       	ld	r22, X+
    1612:	7c 91       	ld	r23, X
    1614:	17 97       	sbiw	r26, 0x07	; 7
    1616:	11 96       	adiw	r26, 0x01	; 1
    1618:	ec 91       	ld	r30, X
    161a:	11 97       	sbiw	r26, 0x01	; 1
    161c:	8c 91       	ld	r24, X
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	20 f4       	brcc	.+8      	; 0x162a <__pack_f+0x2e>
    1622:	60 61       	ori	r22, 0x10	; 16
    1624:	8f ef       	ldi	r24, 0xFF	; 255
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a5 c0       	rjmp	.+330    	; 0x1774 <__pack_f+0x178>
    162a:	84 30       	cpi	r24, 0x04	; 4
    162c:	09 f4       	brne	.+2      	; 0x1630 <__pack_f+0x34>
    162e:	9d c0       	rjmp	.+314    	; 0x176a <__pack_f+0x16e>
    1630:	82 30       	cpi	r24, 0x02	; 2
    1632:	09 f4       	brne	.+2      	; 0x1636 <__pack_f+0x3a>
    1634:	94 c0       	rjmp	.+296    	; 0x175e <__pack_f+0x162>
    1636:	41 15       	cp	r20, r1
    1638:	51 05       	cpc	r21, r1
    163a:	61 05       	cpc	r22, r1
    163c:	71 05       	cpc	r23, r1
    163e:	09 f4       	brne	.+2      	; 0x1642 <__pack_f+0x46>
    1640:	91 c0       	rjmp	.+290    	; 0x1764 <__pack_f+0x168>
    1642:	12 96       	adiw	r26, 0x02	; 2
    1644:	8d 91       	ld	r24, X+
    1646:	9c 91       	ld	r25, X
    1648:	13 97       	sbiw	r26, 0x03	; 3
    164a:	2f ef       	ldi	r18, 0xFF	; 255
    164c:	82 38       	cpi	r24, 0x82	; 130
    164e:	92 07       	cpc	r25, r18
    1650:	0c f0       	brlt	.+2      	; 0x1654 <__pack_f+0x58>
    1652:	59 c0       	rjmp	.+178    	; 0x1706 <__pack_f+0x10a>
    1654:	22 e8       	ldi	r18, 0x82	; 130
    1656:	3f ef       	ldi	r19, 0xFF	; 255
    1658:	28 1b       	sub	r18, r24
    165a:	39 0b       	sbc	r19, r25
    165c:	2a 31       	cpi	r18, 0x1A	; 26
    165e:	31 05       	cpc	r19, r1
    1660:	64 f5       	brge	.+88     	; 0x16ba <__pack_f+0xbe>
    1662:	6a 01       	movw	r12, r20
    1664:	7b 01       	movw	r14, r22
    1666:	02 2e       	mov	r0, r18
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <__pack_f+0x76>
    166a:	f6 94       	lsr	r15
    166c:	e7 94       	ror	r14
    166e:	d7 94       	ror	r13
    1670:	c7 94       	ror	r12
    1672:	0a 94       	dec	r0
    1674:	d2 f7       	brpl	.-12     	; 0x166a <__pack_f+0x6e>
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 e0       	ldi	r26, 0x00	; 0
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <__pack_f+0x8c>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	aa 1f       	adc	r26, r26
    1686:	bb 1f       	adc	r27, r27
    1688:	2a 95       	dec	r18
    168a:	d2 f7       	brpl	.-12     	; 0x1680 <__pack_f+0x84>
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	a1 09       	sbc	r26, r1
    1690:	b1 09       	sbc	r27, r1
    1692:	84 23       	and	r24, r20
    1694:	95 23       	and	r25, r21
    1696:	a6 23       	and	r26, r22
    1698:	b7 23       	and	r27, r23
    169a:	41 e0       	ldi	r20, 0x01	; 1
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	a1 05       	cpc	r26, r1
    16a6:	b1 05       	cpc	r27, r1
    16a8:	19 f4       	brne	.+6      	; 0x16b0 <__pack_f+0xb4>
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	ba 01       	movw	r22, r20
    16b0:	4c 29       	or	r20, r12
    16b2:	5d 29       	or	r21, r13
    16b4:	6e 29       	or	r22, r14
    16b6:	7f 29       	or	r23, r15
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <__pack_f+0xc4>
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	ba 01       	movw	r22, r20
    16c0:	db 01       	movw	r26, r22
    16c2:	ca 01       	movw	r24, r20
    16c4:	8f 77       	andi	r24, 0x7F	; 127
    16c6:	90 70       	andi	r25, 0x00	; 0
    16c8:	a0 70       	andi	r26, 0x00	; 0
    16ca:	b0 70       	andi	r27, 0x00	; 0
    16cc:	80 34       	cpi	r24, 0x40	; 64
    16ce:	91 05       	cpc	r25, r1
    16d0:	a1 05       	cpc	r26, r1
    16d2:	b1 05       	cpc	r27, r1
    16d4:	39 f4       	brne	.+14     	; 0x16e4 <__pack_f+0xe8>
    16d6:	47 ff       	sbrs	r20, 7
    16d8:	09 c0       	rjmp	.+18     	; 0x16ec <__pack_f+0xf0>
    16da:	40 5c       	subi	r20, 0xC0	; 192
    16dc:	5f 4f       	sbci	r21, 0xFF	; 255
    16de:	6f 4f       	sbci	r22, 0xFF	; 255
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	04 c0       	rjmp	.+8      	; 0x16ec <__pack_f+0xf0>
    16e4:	41 5c       	subi	r20, 0xC1	; 193
    16e6:	5f 4f       	sbci	r21, 0xFF	; 255
    16e8:	6f 4f       	sbci	r22, 0xFF	; 255
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	40 30       	cpi	r20, 0x00	; 0
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	52 07       	cpc	r21, r18
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	62 07       	cpc	r22, r18
    16fa:	20 e4       	ldi	r18, 0x40	; 64
    16fc:	72 07       	cpc	r23, r18
    16fe:	38 f5       	brcc	.+78     	; 0x174e <__pack_f+0x152>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	24 c0       	rjmp	.+72     	; 0x174e <__pack_f+0x152>
    1706:	80 38       	cpi	r24, 0x80	; 128
    1708:	91 05       	cpc	r25, r1
    170a:	7c f5       	brge	.+94     	; 0x176a <__pack_f+0x16e>
    170c:	8a 01       	movw	r16, r20
    170e:	9b 01       	movw	r18, r22
    1710:	0f 77       	andi	r16, 0x7F	; 127
    1712:	10 70       	andi	r17, 0x00	; 0
    1714:	20 70       	andi	r18, 0x00	; 0
    1716:	30 70       	andi	r19, 0x00	; 0
    1718:	00 34       	cpi	r16, 0x40	; 64
    171a:	11 05       	cpc	r17, r1
    171c:	21 05       	cpc	r18, r1
    171e:	31 05       	cpc	r19, r1
    1720:	39 f4       	brne	.+14     	; 0x1730 <__pack_f+0x134>
    1722:	47 ff       	sbrs	r20, 7
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <__pack_f+0x13c>
    1726:	40 5c       	subi	r20, 0xC0	; 192
    1728:	5f 4f       	sbci	r21, 0xFF	; 255
    172a:	6f 4f       	sbci	r22, 0xFF	; 255
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <__pack_f+0x13c>
    1730:	41 5c       	subi	r20, 0xC1	; 193
    1732:	5f 4f       	sbci	r21, 0xFF	; 255
    1734:	6f 4f       	sbci	r22, 0xFF	; 255
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	77 fd       	sbrc	r23, 7
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <__pack_f+0x146>
    173c:	81 58       	subi	r24, 0x81	; 129
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	06 c0       	rjmp	.+12     	; 0x174e <__pack_f+0x152>
    1742:	76 95       	lsr	r23
    1744:	67 95       	ror	r22
    1746:	57 95       	ror	r21
    1748:	47 95       	ror	r20
    174a:	80 58       	subi	r24, 0x80	; 128
    174c:	9f 4f       	sbci	r25, 0xFF	; 255
    174e:	97 e0       	ldi	r25, 0x07	; 7
    1750:	76 95       	lsr	r23
    1752:	67 95       	ror	r22
    1754:	57 95       	ror	r21
    1756:	47 95       	ror	r20
    1758:	9a 95       	dec	r25
    175a:	d1 f7       	brne	.-12     	; 0x1750 <__pack_f+0x154>
    175c:	0b c0       	rjmp	.+22     	; 0x1774 <__pack_f+0x178>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	05 c0       	rjmp	.+10     	; 0x176e <__pack_f+0x172>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <__pack_f+0x178>
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	ba 01       	movw	r22, r20
    1774:	98 2f       	mov	r25, r24
    1776:	97 95       	ror	r25
    1778:	99 27       	eor	r25, r25
    177a:	97 95       	ror	r25
    177c:	a6 2f       	mov	r26, r22
    177e:	af 77       	andi	r26, 0x7F	; 127
    1780:	e7 95       	ror	r30
    1782:	ee 27       	eor	r30, r30
    1784:	e7 95       	ror	r30
    1786:	86 95       	lsr	r24
    1788:	3a 2f       	mov	r19, r26
    178a:	39 2b       	or	r19, r25
    178c:	28 2f       	mov	r18, r24
    178e:	2e 2b       	or	r18, r30
    1790:	84 2f       	mov	r24, r20
    1792:	95 2f       	mov	r25, r21
    1794:	a3 2f       	mov	r26, r19
    1796:	b2 2f       	mov	r27, r18
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	ff 90       	pop	r15
    17a2:	ef 90       	pop	r14
    17a4:	df 90       	pop	r13
    17a6:	cf 90       	pop	r12
    17a8:	08 95       	ret

000017aa <__unpack_f>:
    17aa:	dc 01       	movw	r26, r24
    17ac:	fb 01       	movw	r30, r22
    17ae:	4c 91       	ld	r20, X
    17b0:	11 96       	adiw	r26, 0x01	; 1
    17b2:	5c 91       	ld	r21, X
    17b4:	11 97       	sbiw	r26, 0x01	; 1
    17b6:	12 96       	adiw	r26, 0x02	; 2
    17b8:	8c 91       	ld	r24, X
    17ba:	12 97       	sbiw	r26, 0x02	; 2
    17bc:	68 2f       	mov	r22, r24
    17be:	6f 77       	andi	r22, 0x7F	; 127
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	98 2f       	mov	r25, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	99 27       	eor	r25, r25
    17c8:	99 1f       	adc	r25, r25
    17ca:	13 96       	adiw	r26, 0x03	; 3
    17cc:	2c 91       	ld	r18, X
    17ce:	13 97       	sbiw	r26, 0x03	; 3
    17d0:	82 2f       	mov	r24, r18
    17d2:	88 0f       	add	r24, r24
    17d4:	89 2b       	or	r24, r25
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	22 1f       	adc	r18, r18
    17da:	22 27       	eor	r18, r18
    17dc:	22 1f       	adc	r18, r18
    17de:	21 83       	std	Z+1, r18	; 0x01
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	39 f5       	brne	.+78     	; 0x1832 <__unpack_f+0x88>
    17e4:	41 15       	cp	r20, r1
    17e6:	51 05       	cpc	r21, r1
    17e8:	61 05       	cpc	r22, r1
    17ea:	71 05       	cpc	r23, r1
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <__unpack_f+0x48>
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	29 c0       	rjmp	.+82     	; 0x1844 <__unpack_f+0x9a>
    17f2:	82 e8       	ldi	r24, 0x82	; 130
    17f4:	9f ef       	ldi	r25, 0xFF	; 255
    17f6:	93 83       	std	Z+3, r25	; 0x03
    17f8:	82 83       	std	Z+2, r24	; 0x02
    17fa:	27 e0       	ldi	r18, 0x07	; 7
    17fc:	44 0f       	add	r20, r20
    17fe:	55 1f       	adc	r21, r21
    1800:	66 1f       	adc	r22, r22
    1802:	77 1f       	adc	r23, r23
    1804:	2a 95       	dec	r18
    1806:	d1 f7       	brne	.-12     	; 0x17fc <__unpack_f+0x52>
    1808:	83 e0       	ldi	r24, 0x03	; 3
    180a:	80 83       	st	Z, r24
    180c:	09 c0       	rjmp	.+18     	; 0x1820 <__unpack_f+0x76>
    180e:	44 0f       	add	r20, r20
    1810:	55 1f       	adc	r21, r21
    1812:	66 1f       	adc	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	93 83       	std	Z+3, r25	; 0x03
    181e:	82 83       	std	Z+2, r24	; 0x02
    1820:	40 30       	cpi	r20, 0x00	; 0
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	58 07       	cpc	r21, r24
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	68 07       	cpc	r22, r24
    182a:	80 e4       	ldi	r24, 0x40	; 64
    182c:	78 07       	cpc	r23, r24
    182e:	78 f3       	brcs	.-34     	; 0x180e <__unpack_f+0x64>
    1830:	20 c0       	rjmp	.+64     	; 0x1872 <__unpack_f+0xc8>
    1832:	8f 3f       	cpi	r24, 0xFF	; 255
    1834:	91 05       	cpc	r25, r1
    1836:	79 f4       	brne	.+30     	; 0x1856 <__unpack_f+0xac>
    1838:	41 15       	cp	r20, r1
    183a:	51 05       	cpc	r21, r1
    183c:	61 05       	cpc	r22, r1
    183e:	71 05       	cpc	r23, r1
    1840:	19 f4       	brne	.+6      	; 0x1848 <__unpack_f+0x9e>
    1842:	84 e0       	ldi	r24, 0x04	; 4
    1844:	80 83       	st	Z, r24
    1846:	08 95       	ret
    1848:	64 ff       	sbrs	r22, 4
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <__unpack_f+0xa8>
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	80 83       	st	Z, r24
    1850:	10 c0       	rjmp	.+32     	; 0x1872 <__unpack_f+0xc8>
    1852:	10 82       	st	Z, r1
    1854:	0e c0       	rjmp	.+28     	; 0x1872 <__unpack_f+0xc8>
    1856:	8f 57       	subi	r24, 0x7F	; 127
    1858:	90 40       	sbci	r25, 0x00	; 0
    185a:	93 83       	std	Z+3, r25	; 0x03
    185c:	82 83       	std	Z+2, r24	; 0x02
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	80 83       	st	Z, r24
    1862:	87 e0       	ldi	r24, 0x07	; 7
    1864:	44 0f       	add	r20, r20
    1866:	55 1f       	adc	r21, r21
    1868:	66 1f       	adc	r22, r22
    186a:	77 1f       	adc	r23, r23
    186c:	8a 95       	dec	r24
    186e:	d1 f7       	brne	.-12     	; 0x1864 <__unpack_f+0xba>
    1870:	70 64       	ori	r23, 0x40	; 64
    1872:	44 83       	std	Z+4, r20	; 0x04
    1874:	55 83       	std	Z+5, r21	; 0x05
    1876:	66 83       	std	Z+6, r22	; 0x06
    1878:	77 83       	std	Z+7, r23	; 0x07
    187a:	08 95       	ret

0000187c <__fpcmp_parts_f>:
    187c:	cf 93       	push	r28
    187e:	fc 01       	movw	r30, r24
    1880:	db 01       	movw	r26, r22
    1882:	90 81       	ld	r25, Z
    1884:	92 30       	cpi	r25, 0x02	; 2
    1886:	08 f4       	brcc	.+2      	; 0x188a <__fpcmp_parts_f+0xe>
    1888:	4c c0       	rjmp	.+152    	; 0x1922 <__fpcmp_parts_f+0xa6>
    188a:	8c 91       	ld	r24, X
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	08 f4       	brcc	.+2      	; 0x1892 <__fpcmp_parts_f+0x16>
    1890:	48 c0       	rjmp	.+144    	; 0x1922 <__fpcmp_parts_f+0xa6>
    1892:	94 30       	cpi	r25, 0x04	; 4
    1894:	69 f4       	brne	.+26     	; 0x18b0 <__fpcmp_parts_f+0x34>
    1896:	21 81       	ldd	r18, Z+1	; 0x01
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	39 f4       	brne	.+14     	; 0x18aa <__fpcmp_parts_f+0x2e>
    189c:	11 96       	adiw	r26, 0x01	; 1
    189e:	8c 91       	ld	r24, X
    18a0:	11 97       	sbiw	r26, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	82 1b       	sub	r24, r18
    18a6:	91 09       	sbc	r25, r1
    18a8:	44 c0       	rjmp	.+136    	; 0x1932 <__fpcmp_parts_f+0xb6>
    18aa:	22 23       	and	r18, r18
    18ac:	d1 f1       	breq	.+116    	; 0x1922 <__fpcmp_parts_f+0xa6>
    18ae:	3f c0       	rjmp	.+126    	; 0x192e <__fpcmp_parts_f+0xb2>
    18b0:	84 30       	cpi	r24, 0x04	; 4
    18b2:	21 f0       	breq	.+8      	; 0x18bc <__fpcmp_parts_f+0x40>
    18b4:	92 30       	cpi	r25, 0x02	; 2
    18b6:	41 f4       	brne	.+16     	; 0x18c8 <__fpcmp_parts_f+0x4c>
    18b8:	82 30       	cpi	r24, 0x02	; 2
    18ba:	b1 f1       	breq	.+108    	; 0x1928 <__fpcmp_parts_f+0xac>
    18bc:	11 96       	adiw	r26, 0x01	; 1
    18be:	8c 91       	ld	r24, X
    18c0:	11 97       	sbiw	r26, 0x01	; 1
    18c2:	88 23       	and	r24, r24
    18c4:	a1 f1       	breq	.+104    	; 0x192e <__fpcmp_parts_f+0xb2>
    18c6:	2d c0       	rjmp	.+90     	; 0x1922 <__fpcmp_parts_f+0xa6>
    18c8:	c1 81       	ldd	r28, Z+1	; 0x01
    18ca:	82 30       	cpi	r24, 0x02	; 2
    18cc:	01 f1       	breq	.+64     	; 0x190e <__fpcmp_parts_f+0x92>
    18ce:	11 96       	adiw	r26, 0x01	; 1
    18d0:	8c 91       	ld	r24, X
    18d2:	11 97       	sbiw	r26, 0x01	; 1
    18d4:	c8 17       	cp	r28, r24
    18d6:	d9 f4       	brne	.+54     	; 0x190e <__fpcmp_parts_f+0x92>
    18d8:	82 81       	ldd	r24, Z+2	; 0x02
    18da:	93 81       	ldd	r25, Z+3	; 0x03
    18dc:	12 96       	adiw	r26, 0x02	; 2
    18de:	2d 91       	ld	r18, X+
    18e0:	3c 91       	ld	r19, X
    18e2:	13 97       	sbiw	r26, 0x03	; 3
    18e4:	28 17       	cp	r18, r24
    18e6:	39 07       	cpc	r19, r25
    18e8:	94 f0       	brlt	.+36     	; 0x190e <__fpcmp_parts_f+0x92>
    18ea:	82 17       	cp	r24, r18
    18ec:	93 07       	cpc	r25, r19
    18ee:	bc f0       	brlt	.+46     	; 0x191e <__fpcmp_parts_f+0xa2>
    18f0:	44 81       	ldd	r20, Z+4	; 0x04
    18f2:	55 81       	ldd	r21, Z+5	; 0x05
    18f4:	66 81       	ldd	r22, Z+6	; 0x06
    18f6:	77 81       	ldd	r23, Z+7	; 0x07
    18f8:	14 96       	adiw	r26, 0x04	; 4
    18fa:	8d 91       	ld	r24, X+
    18fc:	9d 91       	ld	r25, X+
    18fe:	0d 90       	ld	r0, X+
    1900:	bc 91       	ld	r27, X
    1902:	a0 2d       	mov	r26, r0
    1904:	84 17       	cp	r24, r20
    1906:	95 07       	cpc	r25, r21
    1908:	a6 07       	cpc	r26, r22
    190a:	b7 07       	cpc	r27, r23
    190c:	18 f4       	brcc	.+6      	; 0x1914 <__fpcmp_parts_f+0x98>
    190e:	cc 23       	and	r28, r28
    1910:	41 f0       	breq	.+16     	; 0x1922 <__fpcmp_parts_f+0xa6>
    1912:	0d c0       	rjmp	.+26     	; 0x192e <__fpcmp_parts_f+0xb2>
    1914:	48 17       	cp	r20, r24
    1916:	59 07       	cpc	r21, r25
    1918:	6a 07       	cpc	r22, r26
    191a:	7b 07       	cpc	r23, r27
    191c:	28 f4       	brcc	.+10     	; 0x1928 <__fpcmp_parts_f+0xac>
    191e:	cc 23       	and	r28, r28
    1920:	31 f0       	breq	.+12     	; 0x192e <__fpcmp_parts_f+0xb2>
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	05 c0       	rjmp	.+10     	; 0x1932 <__fpcmp_parts_f+0xb6>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <__fpcmp_parts_f+0xb6>
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	9f ef       	ldi	r25, 0xFF	; 255
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <main>:

int main(void)
{
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	2d 97       	sbiw	r28, 0x0d	; 13
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61

   unsigned int firstMove = 0;


   unsigned char *button;
   can_init(5);       // 초기화
    194a:	85 e0       	ldi	r24, 0x05	; 5
    194c:	0e 94 6b 00 	call	0xd6	; 0xd6 <can_init>
   can_init_8Mhz(5);
    1950:	85 e0       	ldi	r24, 0x05	; 5
    1952:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <can_init_8Mhz>
   can_rx_set(1, 0x01, EXT, 8, 0x00, 0x05  );       // CAN 수신기 초기화 
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	21 e0       	ldi	r18, 0x01	; 1
    1962:	08 e0       	ldi	r16, 0x08	; 8
    1964:	cc 24       	eor	r12, r12
    1966:	dd 24       	eor	r13, r13
    1968:	76 01       	movw	r14, r12
    196a:	a5 e0       	ldi	r26, 0x05	; 5
    196c:	aa 2e       	mov	r10, r26
    196e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <can_rx_set>



   initPort();      // 입출력 포트 초기화
    1972:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <initPort>
   init_EXT_INT();
    1976:	0e 94 49 04 	call	0x892	; 0x892 <init_EXT_INT>
   init_TIMER0_COMPA();
    197a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <init_TIMER0_COMPA>

    LCD_init();     // LCD 초기화
    197e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_init>

   initMotor();   // 스텝모터 제어를 위한 타이머/카운터 초기화 
    1982:	0e 94 db 03 	call	0x7b6	; 0x7b6 <initMotor>

   sei();         // 사용이유에 대해서 보고서에 첨부하기바람.
    1986:	78 94       	sei

   LCD_cmd(0x01);   // LCD 화면 지우기 
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LCD_cmd>
   float distance, distance2;
   unsigned char position = 0;
   unsigned char distenceCheck=0;
   unsigned int dir = 2;
   unsigned int accTime = 0;
   unsigned int tempTime = 0;
    198e:	aa 24       	eor	r10, r10
    1990:	bb 24       	eor	r11, r11
   unsigned char thousand, hundred, ten, one;
   float distance, distance2;
   unsigned char position = 0;
   unsigned char distenceCheck=0;
   unsigned int dir = 2;
   unsigned int accTime = 0;
    1992:	22 24       	eor	r2, r2
    1994:	33 24       	eor	r3, r3
   unsigned int mode = 0; //0은 wait, 1은 speed up, 2는 speed down
   unsigned char thousand, hundred, ten, one;
   float distance, distance2;
   unsigned char position = 0;
   unsigned char distenceCheck=0;
   unsigned int dir = 2;
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9d 87       	std	Y+13, r25	; 0x0d
    199c:	8c 87       	std	Y+12, r24	; 0x0c
   unsigned int speed=3;
   unsigned int mode = 0; //0은 wait, 1은 speed up, 2는 speed down
   unsigned char thousand, hundred, ten, one;
   float distance, distance2;
   unsigned char position = 0;
   unsigned char distenceCheck=0;
    199e:	55 24       	eor	r5, r5
{
   unsigned int speed=3;
   unsigned int mode = 0; //0은 wait, 1은 speed up, 2는 speed down
   unsigned char thousand, hundred, ten, one;
   float distance, distance2;
   unsigned char position = 0;
    19a0:	dd 24       	eor	r13, r13
   while(1)
   {
   /****************************************
   : 초음파 센서를 사용하기 위한 소스코드 제공
   ****************************************/
      cli();            // clear interrupt
    19a2:	f8 94       	cli
      PE4_Clear;
    19a4:	74 98       	cbi	0x0e, 4	; 14
      PE4_OUT;         // PE4 pin is output
    19a6:	6c 9a       	sbi	0x0d, 4	; 13
      us_delay(500);
    19a8:	84 ef       	ldi	r24, 0xF4	; 244
    19aa:	91 e0       	ldi	r25, 0x01	; 1
    19ac:	0e 94 a7 04 	call	0x94e	; 0x94e <us_delay>

      PE4_Set;         // output set during 5us
    19b0:	74 9a       	sbi	0x0e, 4	; 14
      us_delay(5);
    19b2:	85 e0       	ldi	r24, 0x05	; 5
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 a7 04 	call	0x94e	; 0x94e <us_delay>

      PE4_Clear;         // PE4 clear
    19ba:	74 98       	cbi	0x0e, 4	; 14
      us_delay(100);
    19bc:	84 e6       	ldi	r24, 0x64	; 100
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 a7 04 	call	0x94e	; 0x94e <us_delay>

      PE4_IN;            // PE4 pin is input
    19c4:	6c 98       	cbi	0x0d, 4	; 13
      us_delay(100);
    19c6:	84 e6       	ldi	r24, 0x64	; 100
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 a7 04 	call	0x94e	; 0x94e <us_delay>

      sei();            // set interrupt
    19ce:	78 94       	sei


   /* distance = velocity * time */
   distance = (331.5+(0.6*TEMPERATURE))*(pulse_end*0.00001/2)*1000;
    19d0:	60 91 ba 02 	lds	r22, 0x02BA
    19d4:	70 91 bb 02 	lds	r23, 0x02BB
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	0e 94 2e 0a 	call	0x145c	; 0x145c <__floatunsisf>
    19e0:	2c ea       	ldi	r18, 0xAC	; 172
    19e2:	35 ec       	ldi	r19, 0xC5	; 197
    19e4:	47 e2       	ldi	r20, 0x27	; 39
    19e6:	57 e3       	ldi	r21, 0x37	; 55
    19e8:	0e 94 27 07 	call	0xe4e	; 0xe4e <__mulsf3>
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 27 07 	call	0xe4e	; 0xe4e <__mulsf3>
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e4       	ldi	r19, 0x40	; 64
    19fc:	4d ea       	ldi	r20, 0xAD	; 173
    19fe:	53 e4       	ldi	r21, 0x43	; 67
    1a00:	0e 94 27 07 	call	0xe4e	; 0xe4e <__mulsf3>
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a e7       	ldi	r20, 0x7A	; 122
    1a0a:	54 e4       	ldi	r21, 0x44	; 68
    1a0c:	0e 94 27 07 	call	0xe4e	; 0xe4e <__mulsf3>
    1a10:	16 2f       	mov	r17, r22
    1a12:	07 2f       	mov	r16, r23
    1a14:	e8 2e       	mov	r14, r24
    1a16:	c9 2e       	mov	r12, r25
   

   /* distance digit display */
      thousand = distance/1000;
    1a18:	a8 01       	movw	r20, r16
    1a1a:	85 2f       	mov	r24, r21
    1a1c:	94 2f       	mov	r25, r20
    1a1e:	ae 2d       	mov	r26, r14
    1a20:	bc 2d       	mov	r27, r12
    1a22:	bc 01       	movw	r22, r24
    1a24:	cd 01       	movw	r24, r26
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	54 e4       	ldi	r21, 0x44	; 68
    1a2e:	0e 94 28 08 	call	0x1050	; 0x1050 <__divsf3>
    1a32:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fixunssfsi>
    1a36:	46 2e       	mov	r4, r22
      distance = distance - (thousand * 1000);
    1a38:	86 2f       	mov	r24, r22
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	28 ee       	ldi	r18, 0xE8	; 232
    1a3e:	33 e0       	ldi	r19, 0x03	; 3
    1a40:	82 9f       	mul	r24, r18
    1a42:	b0 01       	movw	r22, r0
    1a44:	83 9f       	mul	r24, r19
    1a46:	70 0d       	add	r23, r0
    1a48:	92 9f       	mul	r25, r18
    1a4a:	70 0d       	add	r23, r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	88 27       	eor	r24, r24
    1a50:	77 fd       	sbrc	r23, 7
    1a52:	80 95       	com	r24
    1a54:	98 2f       	mov	r25, r24
    1a56:	0e 94 66 09 	call	0x12cc	; 0x12cc <__floatsisf>
    1a5a:	9b 01       	movw	r18, r22
    1a5c:	ac 01       	movw	r20, r24
    1a5e:	f8 01       	movw	r30, r16
    1a60:	8f 2f       	mov	r24, r31
    1a62:	9e 2f       	mov	r25, r30
    1a64:	ae 2d       	mov	r26, r14
    1a66:	bc 2d       	mov	r27, r12
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 ef 06 	call	0xdde	; 0xdde <__subsf3>
    1a70:	c6 2e       	mov	r12, r22
    1a72:	97 2e       	mov	r9, r23
    1a74:	88 2e       	mov	r8, r24
    1a76:	69 2e       	mov	r6, r25
      distance2 = distance;
   
      hundred = distance /100;
    1a78:	86 2f       	mov	r24, r22
    1a7a:	99 2d       	mov	r25, r9
    1a7c:	a8 2d       	mov	r26, r8
    1a7e:	b6 2d       	mov	r27, r6
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	48 ec       	ldi	r20, 0xC8	; 200
    1a8a:	52 e4       	ldi	r21, 0x42	; 66
    1a8c:	0e 94 28 08 	call	0x1050	; 0x1050 <__divsf3>
    1a90:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fixunssfsi>
    1a94:	16 2f       	mov	r17, r22
      distance = distance - (hundred * 100);
    1a96:	64 e6       	ldi	r22, 0x64	; 100
    1a98:	16 9f       	mul	r17, r22
    1a9a:	b0 01       	movw	r22, r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	88 27       	eor	r24, r24
    1aa0:	77 fd       	sbrc	r23, 7
    1aa2:	80 95       	com	r24
    1aa4:	98 2f       	mov	r25, r24
    1aa6:	0e 94 66 09 	call	0x12cc	; 0x12cc <__floatsisf>
    1aaa:	9b 01       	movw	r18, r22
    1aac:	ac 01       	movw	r20, r24
    1aae:	8c 2d       	mov	r24, r12
    1ab0:	99 2d       	mov	r25, r9
    1ab2:	a8 2d       	mov	r26, r8
    1ab4:	b6 2d       	mov	r27, r6
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 ef 06 	call	0xdde	; 0xdde <__subsf3>
    1abe:	06 2f       	mov	r16, r22
    1ac0:	e7 2e       	mov	r14, r23
    1ac2:	f8 2e       	mov	r15, r24
    1ac4:	79 2e       	mov	r7, r25

      ten = distance/10; 
    1ac6:	86 2f       	mov	r24, r22
    1ac8:	9e 2d       	mov	r25, r14
    1aca:	af 2d       	mov	r26, r15
    1acc:	b7 2d       	mov	r27, r7
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e2       	ldi	r20, 0x20	; 32
    1ad8:	51 e4       	ldi	r21, 0x41	; 65
    1ada:	0e 94 28 08 	call	0x1050	; 0x1050 <__divsf3>
    1ade:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fixunssfsi>
      distance = distance - (ten * 10);

      one = distance;

   char part[5];
   part[0] = thousand + '0';
    1ae2:	84 2d       	mov	r24, r4
    1ae4:	80 5d       	subi	r24, 0xD0	; 208
    1ae6:	89 83       	std	Y+1, r24	; 0x01
   part[1] = hundred + '0';
    1ae8:	10 5d       	subi	r17, 0xD0	; 208
    1aea:	1a 83       	std	Y+2, r17	; 0x02
   part[2] = ten + '0';
    1aec:	86 2f       	mov	r24, r22
    1aee:	80 5d       	subi	r24, 0xD0	; 208
    1af0:	8b 83       	std	Y+3, r24	; 0x03
   
      hundred = distance /100;
      distance = distance - (hundred * 100);

      ten = distance/10; 
      distance = distance - (ten * 10);
    1af2:	86 2f       	mov	r24, r22
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	bc 01       	movw	r22, r24
    1af8:	66 0f       	add	r22, r22
    1afa:	77 1f       	adc	r23, r23
    1afc:	f3 e0       	ldi	r31, 0x03	; 3
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	fa 95       	dec	r31
    1b04:	e1 f7       	brne	.-8      	; 0x1afe <main+0x1c8>
    1b06:	68 0f       	add	r22, r24
    1b08:	79 1f       	adc	r23, r25
    1b0a:	88 27       	eor	r24, r24
    1b0c:	77 fd       	sbrc	r23, 7
    1b0e:	80 95       	com	r24
    1b10:	98 2f       	mov	r25, r24
    1b12:	0e 94 66 09 	call	0x12cc	; 0x12cc <__floatsisf>
    1b16:	9b 01       	movw	r18, r22
    1b18:	ac 01       	movw	r20, r24
    1b1a:	80 2f       	mov	r24, r16
    1b1c:	9e 2d       	mov	r25, r14
    1b1e:	af 2d       	mov	r26, r15
    1b20:	b7 2d       	mov	r27, r7
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	0e 94 ef 06 	call	0xdde	; 0xdde <__subsf3>

      one = distance;
    1b2a:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fixunssfsi>

   char part[5];
   part[0] = thousand + '0';
   part[1] = hundred + '0';
   part[2] = ten + '0';
   part[3] = one + '0';
    1b2e:	60 5d       	subi	r22, 0xD0	; 208
    1b30:	6c 83       	std	Y+4, r22	; 0x04
   part[4] = '\0';
    1b32:	1d 82       	std	Y+5, r1	; 0x05
   LCD_Write(10,0, part);
    1b34:	8a e0       	ldi	r24, 0x0A	; 10
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	ae 01       	movw	r20, r28
    1b3a:	4f 5f       	subi	r20, 0xFF	; 255
    1b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3e:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_Write>

   can_rx(1, &msg1);/////////////////////////////////
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	60 ec       	ldi	r22, 0xC0	; 192
    1b46:	72 e0       	ldi	r23, 0x02	; 2
    1b48:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <can_rx>

   mode = (int)msg1.data[0];///
    1b4c:	10 91 c7 02 	lds	r17, 0x02C7
   LCD_Write(6,0, &msg1.data[0]);
    1b50:	86 e0       	ldi	r24, 0x06	; 6
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	47 ec       	ldi	r20, 0xC7	; 199
    1b56:	52 e0       	ldi	r21, 0x02	; 2
    1b58:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_Write>

   button = ButtonInput(); 
    1b5c:	0e 94 2c 04 	call	0x858	; 0x858 <ButtonInput>
    1b60:	90 e0       	ldi	r25, 0x00	; 0
   if(button == SPEED_UP)
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	91 05       	cpc	r25, r1
    1b66:	61 f4       	brne	.+24     	; 0x1b80 <main+0x24a>
      {mode = 1; LCD_Write(5,0, "UP");
    1b68:	85 e0       	ldi	r24, 0x05	; 5
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	51 e0       	ldi	r21, 0x01	; 1
    1b70:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_Write>
	   firstMove = 1;}
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	e6 2e       	mov	r14, r22
    1b78:	f1 2c       	mov	r15, r1
   mode = (int)msg1.data[0];///
   LCD_Write(6,0, &msg1.data[0]);

   button = ButtonInput(); 
   if(button == SPEED_UP)
      {mode = 1; LCD_Write(5,0, "UP");
    1b7a:	01 e0       	ldi	r16, 0x01	; 1
    1b7c:	10 e0       	ldi	r17, 0x00	; 0
    1b7e:	1e c0       	rjmp	.+60     	; 0x1bbc <main+0x286>
	   firstMove = 1;}
   else if(button == SPEED_DOWN)
    1b80:	82 30       	cpi	r24, 0x02	; 2
    1b82:	91 05       	cpc	r25, r1
    1b84:	59 f4       	brne	.+22     	; 0x1b9c <main+0x266>
      {mode = 2; LCD_Write(5,0, "DN");}
    1b86:	85 e0       	ldi	r24, 0x05	; 5
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	43 e0       	ldi	r20, 0x03	; 3
    1b8c:	51 e0       	ldi	r21, 0x01	; 1
    1b8e:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_Write>
    1b92:	ee 24       	eor	r14, r14
    1b94:	ff 24       	eor	r15, r15
    1b96:	02 e0       	ldi	r16, 0x02	; 2
    1b98:	10 e0       	ldi	r17, 0x00	; 0
    1b9a:	10 c0       	rjmp	.+32     	; 0x1bbc <main+0x286>
   part[4] = '\0';
   LCD_Write(10,0, part);

   can_rx(1, &msg1);/////////////////////////////////

   mode = (int)msg1.data[0];///
    1b9c:	01 2f       	mov	r16, r17
    1b9e:	10 e0       	ldi	r17, 0x00	; 0
      {mode = 1; LCD_Write(5,0, "UP");
	   firstMove = 1;}
   else if(button == SPEED_DOWN)
      {mode = 2; LCD_Write(5,0, "DN");}

   if (mode == 0) LCD_Write(0,0, "WAIT");//모드 출력
    1ba0:	01 15       	cp	r16, r1
    1ba2:	11 05       	cpc	r17, r1
    1ba4:	49 f4       	brne	.+18     	; 0x1bb8 <main+0x282>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	46 e0       	ldi	r20, 0x06	; 6
    1bac:	51 e0       	ldi	r21, 0x01	; 1
    1bae:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_Write>
    1bb2:	ee 24       	eor	r14, r14
    1bb4:	ff 24       	eor	r15, r15
    1bb6:	13 c0       	rjmp	.+38     	; 0x1bde <main+0x2a8>
    1bb8:	ee 24       	eor	r14, r14
    1bba:	ff 24       	eor	r15, r15
   if (mode == 1) LCD_Write(0,0, "SPUP");//모드 출력
    1bbc:	01 30       	cpi	r16, 0x01	; 1
    1bbe:	11 05       	cpc	r17, r1
    1bc0:	29 f4       	brne	.+10     	; 0x1bcc <main+0x296>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	4b e0       	ldi	r20, 0x0B	; 11
    1bc8:	51 e0       	ldi	r21, 0x01	; 1
    1bca:	07 c0       	rjmp	.+14     	; 0x1bda <main+0x2a4>
   if (mode == 2) LCD_Write(0,0, "SPDN");//모드 출력
    1bcc:	02 30       	cpi	r16, 0x02	; 2
    1bce:	11 05       	cpc	r17, r1
    1bd0:	31 f4       	brne	.+12     	; 0x1bde <main+0x2a8>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	40 e1       	ldi	r20, 0x10	; 16
    1bd8:	51 e0       	ldi	r21, 0x01	; 1
    1bda:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_Write>

   if (position == 0) LCD_Write(10,1, "R");
    1bde:	dd 20       	and	r13, r13
    1be0:	29 f4       	brne	.+10     	; 0x1bec <main+0x2b6>
    1be2:	8a e0       	ldi	r24, 0x0A	; 10
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	45 e1       	ldi	r20, 0x15	; 21
    1be8:	51 e0       	ldi	r21, 0x01	; 1
    1bea:	07 c0       	rjmp	.+14     	; 0x1bfa <main+0x2c4>
   if (position == 1) LCD_Write(10,1, "L");
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	d9 16       	cp	r13, r25
    1bf0:	31 f4       	brne	.+12     	; 0x1bfe <main+0x2c8>
    1bf2:	8a e0       	ldi	r24, 0x0A	; 10
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	47 e1       	ldi	r20, 0x17	; 23
    1bf8:	51 e0       	ldi	r21, 0x01	; 1
    1bfa:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_Write>

   


    sprintf(temp,"%d",accTime);
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <main+0x2ca>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <main+0x2cc>
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <main+0x2ce>
    1c04:	ed b7       	in	r30, 0x3d	; 61
    1c06:	fe b7       	in	r31, 0x3e	; 62
    1c08:	31 96       	adiw	r30, 0x01	; 1
    1c0a:	86 e0       	ldi	r24, 0x06	; 6
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	8c 0f       	add	r24, r28
    1c10:	9d 1f       	adc	r25, r29
    1c12:	ad b7       	in	r26, 0x3d	; 61
    1c14:	be b7       	in	r27, 0x3e	; 62
    1c16:	12 96       	adiw	r26, 0x02	; 2
    1c18:	9c 93       	st	X, r25
    1c1a:	8e 93       	st	-X, r24
    1c1c:	11 97       	sbiw	r26, 0x01	; 1
    1c1e:	a9 e1       	ldi	r26, 0x19	; 25
    1c20:	b1 e0       	ldi	r27, 0x01	; 1
    1c22:	b3 83       	std	Z+3, r27	; 0x03
    1c24:	a2 83       	std	Z+2, r26	; 0x02
    1c26:	35 82       	std	Z+5, r3	; 0x05
    1c28:	24 82       	std	Z+4, r2	; 0x04
    1c2a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <sprintf>
    LCD_Write(0,1, temp);
    1c2e:	8d b7       	in	r24, 0x3d	; 61
    1c30:	9e b7       	in	r25, 0x3e	; 62
    1c32:	06 96       	adiw	r24, 0x06	; 6
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	9e bf       	out	0x3e, r25	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	8d bf       	out	0x3d, r24	; 61
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	ae 01       	movw	r20, r28
    1c44:	4a 5f       	subi	r20, 0xFA	; 250
    1c46:	5f 4f       	sbci	r21, 0xFF	; 255
    1c48:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_Write>
    sprintf(temp,"%d",tempTime);
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <main+0x318>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <main+0x31a>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <main+0x31c>
    1c52:	ed b7       	in	r30, 0x3d	; 61
    1c54:	fe b7       	in	r31, 0x3e	; 62
    1c56:	31 96       	adiw	r30, 0x01	; 1
    1c58:	86 e0       	ldi	r24, 0x06	; 6
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	8c 0f       	add	r24, r28
    1c5e:	9d 1f       	adc	r25, r29
    1c60:	ad b7       	in	r26, 0x3d	; 61
    1c62:	be b7       	in	r27, 0x3e	; 62
    1c64:	12 96       	adiw	r26, 0x02	; 2
    1c66:	9c 93       	st	X, r25
    1c68:	8e 93       	st	-X, r24
    1c6a:	11 97       	sbiw	r26, 0x01	; 1
    1c6c:	a9 e1       	ldi	r26, 0x19	; 25
    1c6e:	b1 e0       	ldi	r27, 0x01	; 1
    1c70:	b3 83       	std	Z+3, r27	; 0x03
    1c72:	a2 83       	std	Z+2, r26	; 0x02
    1c74:	b5 82       	std	Z+5, r11	; 0x05
    1c76:	a4 82       	std	Z+4, r10	; 0x04
    1c78:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <sprintf>
    LCD_Write(4,1, temp);
    1c7c:	8d b7       	in	r24, 0x3d	; 61
    1c7e:	9e b7       	in	r25, 0x3e	; 62
    1c80:	06 96       	adiw	r24, 0x06	; 6
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	9e bf       	out	0x3e, r25	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	8d bf       	out	0x3d, r24	; 61
    1c8c:	84 e0       	ldi	r24, 0x04	; 4
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	ae 01       	movw	r20, r28
    1c92:	4a 5f       	subi	r20, 0xFA	; 250
    1c94:	5f 4f       	sbci	r21, 0xFF	; 255
    1c96:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_Write>
    
  
	  speed = 3;
      if (firstMove == 1)
    1c9a:	91 e0       	ldi	r25, 0x01	; 1
    1c9c:	e9 16       	cp	r14, r25
    1c9e:	f1 04       	cpc	r15, r1
    1ca0:	39 f4       	brne	.+14     	; 0x1cb0 <main+0x37a>
	  {
	    firstMove = 0;
		tempTime = 0;
	  	CtrlDcMotor(speed, dir);
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ca8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1caa:	0e 94 ee 03 	call	0x7dc	; 0x7dc <CtrlDcMotor>
    1cae:	63 c0       	rjmp	.+198    	; 0x1d76 <main+0x440>
		delay(300);
	  }
	  else{
	  
		  if(distance2 < 50)
    1cb0:	8c 2d       	mov	r24, r12
    1cb2:	99 2d       	mov	r25, r9
    1cb4:	a8 2d       	mov	r26, r8
    1cb6:	b6 2d       	mov	r27, r6
    1cb8:	bc 01       	movw	r22, r24
    1cba:	cd 01       	movw	r24, r26
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	48 e4       	ldi	r20, 0x48	; 72
    1cc2:	52 e4       	ldi	r21, 0x42	; 66
    1cc4:	0e 94 35 09 	call	0x126a	; 0x126a <__ltsf2>
    1cc8:	87 ff       	sbrs	r24, 7
    1cca:	09 c0       	rjmp	.+18     	; 0x1cde <main+0x3a8>
	      {
	         distenceCheck = position;
	         tempTime += 1;
    1ccc:	08 94       	sec
    1cce:	a1 1c       	adc	r10, r1
    1cd0:	b1 1c       	adc	r11, r1

	         if(tempTime > 200) {mode = 0; dir =2; tempTime = 0;}
    1cd2:	5d 2c       	mov	r5, r13
    1cd4:	a9 ec       	ldi	r26, 0xC9	; 201
    1cd6:	aa 16       	cp	r10, r26
    1cd8:	b1 04       	cpc	r11, r1
    1cda:	c8 f5       	brcc	.+114    	; 0x1d4e <main+0x418>
    1cdc:	57 c0       	rjmp	.+174    	; 0x1d8c <main+0x456>
	      }
	      else if((distance2 > 100)&& (distance2 < 200) && (position == distenceCheck))
    1cde:	8c 2d       	mov	r24, r12
    1ce0:	99 2d       	mov	r25, r9
    1ce2:	a8 2d       	mov	r26, r8
    1ce4:	b6 2d       	mov	r27, r6
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	48 ec       	ldi	r20, 0xC8	; 200
    1cf0:	52 e4       	ldi	r21, 0x42	; 66
    1cf2:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	0c f0       	brlt	.+2      	; 0x1cfc <main+0x3c6>
    1cfa:	48 c0       	rjmp	.+144    	; 0x1d8c <main+0x456>
    1cfc:	8c 2d       	mov	r24, r12
    1cfe:	99 2d       	mov	r25, r9
    1d00:	a8 2d       	mov	r26, r8
    1d02:	b6 2d       	mov	r27, r6
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	48 e4       	ldi	r20, 0x48	; 72
    1d0e:	53 e4       	ldi	r21, 0x43	; 67
    1d10:	0e 94 35 09 	call	0x126a	; 0x126a <__ltsf2>
    1d14:	87 ff       	sbrs	r24, 7
    1d16:	3a c0       	rjmp	.+116    	; 0x1d8c <main+0x456>
    1d18:	d5 14       	cp	r13, r5
    1d1a:	c1 f5       	brne	.+112    	; 0x1d8c <main+0x456>
	      {
	         accTime = tempTime;
	         tempTime = 0;
	         if (position == 0)
    1d1c:	dd 20       	and	r13, r13
    1d1e:	51 f4       	brne	.+20     	; 0x1d34 <main+0x3fe>
	         {
	            position = 1;
	            if(mode == 1)//speedup
    1d20:	15 01       	movw	r2, r10
	         if(tempTime > 200) {mode = 0; dir =2; tempTime = 0;}
	      }
	      else if((distance2 > 100)&& (distance2 < 200) && (position == distenceCheck))
	      {
	         accTime = tempTime;
	         tempTime = 0;
    1d22:	aa 24       	eor	r10, r10
    1d24:	bb 24       	eor	r11, r11
	         if (position == 0)
	         {
	            position = 1;
	            if(mode == 1)//speedup
    1d26:	01 30       	cpi	r16, 0x01	; 1
    1d28:	11 05       	cpc	r17, r1
    1d2a:	d1 f0       	breq	.+52     	; 0x1d60 <main+0x42a>
	            dir = 1;
	            else if(mode == 2)//speed down
    1d2c:	02 30       	cpi	r16, 0x02	; 2
    1d2e:	11 05       	cpc	r17, r1
    1d30:	d9 f4       	brne	.+54     	; 0x1d68 <main+0x432>
    1d32:	1e c0       	rjmp	.+60     	; 0x1d70 <main+0x43a>
	            dir = 0;
	         }
	         else if (position == 1)
    1d34:	b1 e0       	ldi	r27, 0x01	; 1
	         {
	            position = 0;
	            if(mode == 1)//speedup
    1d36:	15 01       	movw	r2, r10
	            if(mode == 1)//speedup
	            dir = 1;
	            else if(mode == 2)//speed down
	            dir = 0;
	         }
	         else if (position == 1)
    1d38:	db 16       	cp	r13, r27
    1d3a:	e9 f4       	brne	.+58     	; 0x1d76 <main+0x440>
	         if(tempTime > 200) {mode = 0; dir =2; tempTime = 0;}
	      }
	      else if((distance2 > 100)&& (distance2 < 200) && (position == distenceCheck))
	      {
	         accTime = tempTime;
	         tempTime = 0;
    1d3c:	aa 24       	eor	r10, r10
    1d3e:	bb 24       	eor	r11, r11
	            dir = 0;
	         }
	         else if (position == 1)
	         {
	            position = 0;
	            if(mode == 1)//speedup
    1d40:	01 30       	cpi	r16, 0x01	; 1
    1d42:	11 05       	cpc	r17, r1
    1d44:	d9 f0       	breq	.+54     	; 0x1d7c <main+0x446>
	            dir = 0;
	            else if(mode == 2)//speed down
    1d46:	02 30       	cpi	r16, 0x02	; 2
    1d48:	11 05       	cpc	r17, r1
    1d4a:	f9 f4       	brne	.+62     	; 0x1d8a <main+0x454>
    1d4c:	1a c0       	rjmp	.+52     	; 0x1d82 <main+0x44c>
		  if(distance2 < 50)
	      {
	         distenceCheck = position;
	         tempTime += 1;

	         if(tempTime > 200) {mode = 0; dir =2; tempTime = 0;}
    1d4e:	aa 24       	eor	r10, r10
    1d50:	bb 24       	eor	r11, r11
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9d 87       	std	Y+13, r25	; 0x0d
    1d58:	8c 87       	std	Y+12, r24	; 0x0c
    1d5a:	00 e0       	ldi	r16, 0x00	; 0
    1d5c:	10 e0       	ldi	r17, 0x00	; 0
    1d5e:	16 c0       	rjmp	.+44     	; 0x1d8c <main+0x456>
	         tempTime = 0;
	         if (position == 0)
	         {
	            position = 1;
	            if(mode == 1)//speedup
	            dir = 1;
    1d60:	a1 e0       	ldi	r26, 0x01	; 1
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	bd 87       	std	Y+13, r27	; 0x0d
    1d66:	ac 87       	std	Y+12, r26	; 0x0c
	         accTime = tempTime;
	         tempTime = 0;
	         if (position == 0)
	         {
	            position = 1;
	            if(mode == 1)//speedup
    1d68:	5d 2c       	mov	r5, r13
	      {
	         accTime = tempTime;
	         tempTime = 0;
	         if (position == 0)
	         {
	            position = 1;
    1d6a:	dd 24       	eor	r13, r13
    1d6c:	d3 94       	inc	r13
    1d6e:	0e c0       	rjmp	.+28     	; 0x1d8c <main+0x456>
	            if(mode == 1)//speedup
	            dir = 1;
	            else if(mode == 2)//speed down
	            dir = 0;
    1d70:	1d 86       	std	Y+13, r1	; 0x0d
    1d72:	1c 86       	std	Y+12, r1	; 0x0c
    1d74:	f9 cf       	rjmp	.-14     	; 0x1d68 <main+0x432>
	         if(tempTime > 200) {mode = 0; dir =2; tempTime = 0;}
	      }
	      else if((distance2 > 100)&& (distance2 < 200) && (position == distenceCheck))
	      {
	         accTime = tempTime;
	         tempTime = 0;
    1d76:	aa 24       	eor	r10, r10
    1d78:	bb 24       	eor	r11, r11
    1d7a:	08 c0       	rjmp	.+16     	; 0x1d8c <main+0x456>
	         }
	         else if (position == 1)
	         {
	            position = 0;
	            if(mode == 1)//speedup
	            dir = 0;
    1d7c:	1d 86       	std	Y+13, r1	; 0x0d
    1d7e:	1c 86       	std	Y+12, r1	; 0x0c
    1d80:	04 c0       	rjmp	.+8      	; 0x1d8a <main+0x454>
	            else if(mode == 2)//speed down
	            dir = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9d 87       	std	Y+13, r25	; 0x0d
    1d88:	8c 87       	std	Y+12, r24	; 0x0c
	            else if(mode == 2)//speed down
	            dir = 0;
	         }
	         else if (position == 1)
	         {
	            position = 0;
    1d8a:	dd 24       	eor	r13, r13
	   }
      
      


      CtrlDcMotor(speed, dir);
    1d8c:	83 e0       	ldi	r24, 0x03	; 3
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d92:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d94:	0e 94 ee 03 	call	0x7dc	; 0x7dc <CtrlDcMotor>

          //From MCU2 to MCU1
	 msg3.data[0] = mode;
    1d98:	00 93 23 01 	sts	0x0123, r16
     msg3.data[1] = '\0'; 
    1d9c:	10 92 24 01 	sts	0x0124, r1
     msg3.data[2] = tempTime; 
    1da0:	a0 92 25 01 	sts	0x0125, r10
     msg3.data[3] = '\0'; 
    1da4:	10 92 26 01 	sts	0x0126, r1
     msg3.data[4] = '\0'; 
    1da8:	10 92 27 01 	sts	0x0127, r1
     msg3.data[5] = '\0'; 
    1dac:	10 92 28 01 	sts	0x0128, r1
     msg3.data[6] = '\0';
    1db0:	10 92 29 01 	sts	0x0129, r1
     msg3.data[7] = '\0'; 
    1db4:	10 92 2a 01 	sts	0x012A, r1

	if(mode != 0)
    1db8:	01 15       	cp	r16, r1
    1dba:	11 05       	cpc	r17, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <main+0x48a>
    1dbe:	f1 cd       	rjmp	.-1054   	; 0x19a2 <main+0x6c>
	  can_tx(3, &msg3, 0);
    1dc0:	83 e0       	ldi	r24, 0x03	; 3
    1dc2:	6c e1       	ldi	r22, 0x1C	; 28
    1dc4:	71 e0       	ldi	r23, 0x01	; 1
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	0e 94 4b 01 	call	0x296	; 0x296 <can_tx>
    1dcc:	ea cd       	rjmp	.-1068   	; 0x19a2 <main+0x6c>

00001dce <__mulsi3>:
    1dce:	62 9f       	mul	r22, r18
    1dd0:	d0 01       	movw	r26, r0
    1dd2:	73 9f       	mul	r23, r19
    1dd4:	f0 01       	movw	r30, r0
    1dd6:	82 9f       	mul	r24, r18
    1dd8:	e0 0d       	add	r30, r0
    1dda:	f1 1d       	adc	r31, r1
    1ddc:	64 9f       	mul	r22, r20
    1dde:	e0 0d       	add	r30, r0
    1de0:	f1 1d       	adc	r31, r1
    1de2:	92 9f       	mul	r25, r18
    1de4:	f0 0d       	add	r31, r0
    1de6:	83 9f       	mul	r24, r19
    1de8:	f0 0d       	add	r31, r0
    1dea:	74 9f       	mul	r23, r20
    1dec:	f0 0d       	add	r31, r0
    1dee:	65 9f       	mul	r22, r21
    1df0:	f0 0d       	add	r31, r0
    1df2:	99 27       	eor	r25, r25
    1df4:	72 9f       	mul	r23, r18
    1df6:	b0 0d       	add	r27, r0
    1df8:	e1 1d       	adc	r30, r1
    1dfa:	f9 1f       	adc	r31, r25
    1dfc:	63 9f       	mul	r22, r19
    1dfe:	b0 0d       	add	r27, r0
    1e00:	e1 1d       	adc	r30, r1
    1e02:	f9 1f       	adc	r31, r25
    1e04:	bd 01       	movw	r22, r26
    1e06:	cf 01       	movw	r24, r30
    1e08:	11 24       	eor	r1, r1
    1e0a:	08 95       	ret

00001e0c <__divmodsi4>:
    1e0c:	97 fb       	bst	r25, 7
    1e0e:	09 2e       	mov	r0, r25
    1e10:	05 26       	eor	r0, r21
    1e12:	0e d0       	rcall	.+28     	; 0x1e30 <__divmodsi4_neg1>
    1e14:	57 fd       	sbrc	r21, 7
    1e16:	04 d0       	rcall	.+8      	; 0x1e20 <__divmodsi4_neg2>
    1e18:	14 d0       	rcall	.+40     	; 0x1e42 <__udivmodsi4>
    1e1a:	0a d0       	rcall	.+20     	; 0x1e30 <__divmodsi4_neg1>
    1e1c:	00 1c       	adc	r0, r0
    1e1e:	38 f4       	brcc	.+14     	; 0x1e2e <__divmodsi4_exit>

00001e20 <__divmodsi4_neg2>:
    1e20:	50 95       	com	r21
    1e22:	40 95       	com	r20
    1e24:	30 95       	com	r19
    1e26:	21 95       	neg	r18
    1e28:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e2c:	5f 4f       	sbci	r21, 0xFF	; 255

00001e2e <__divmodsi4_exit>:
    1e2e:	08 95       	ret

00001e30 <__divmodsi4_neg1>:
    1e30:	f6 f7       	brtc	.-4      	; 0x1e2e <__divmodsi4_exit>
    1e32:	90 95       	com	r25
    1e34:	80 95       	com	r24
    1e36:	70 95       	com	r23
    1e38:	61 95       	neg	r22
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e40:	08 95       	ret

00001e42 <__udivmodsi4>:
    1e42:	a1 e2       	ldi	r26, 0x21	; 33
    1e44:	1a 2e       	mov	r1, r26
    1e46:	aa 1b       	sub	r26, r26
    1e48:	bb 1b       	sub	r27, r27
    1e4a:	fd 01       	movw	r30, r26
    1e4c:	0d c0       	rjmp	.+26     	; 0x1e68 <__udivmodsi4_ep>

00001e4e <__udivmodsi4_loop>:
    1e4e:	aa 1f       	adc	r26, r26
    1e50:	bb 1f       	adc	r27, r27
    1e52:	ee 1f       	adc	r30, r30
    1e54:	ff 1f       	adc	r31, r31
    1e56:	a2 17       	cp	r26, r18
    1e58:	b3 07       	cpc	r27, r19
    1e5a:	e4 07       	cpc	r30, r20
    1e5c:	f5 07       	cpc	r31, r21
    1e5e:	20 f0       	brcs	.+8      	; 0x1e68 <__udivmodsi4_ep>
    1e60:	a2 1b       	sub	r26, r18
    1e62:	b3 0b       	sbc	r27, r19
    1e64:	e4 0b       	sbc	r30, r20
    1e66:	f5 0b       	sbc	r31, r21

00001e68 <__udivmodsi4_ep>:
    1e68:	66 1f       	adc	r22, r22
    1e6a:	77 1f       	adc	r23, r23
    1e6c:	88 1f       	adc	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	1a 94       	dec	r1
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <__udivmodsi4_loop>
    1e74:	60 95       	com	r22
    1e76:	70 95       	com	r23
    1e78:	80 95       	com	r24
    1e7a:	90 95       	com	r25
    1e7c:	9b 01       	movw	r18, r22
    1e7e:	ac 01       	movw	r20, r24
    1e80:	bd 01       	movw	r22, r26
    1e82:	cf 01       	movw	r24, r30
    1e84:	08 95       	ret

00001e86 <__prologue_saves__>:
    1e86:	2f 92       	push	r2
    1e88:	3f 92       	push	r3
    1e8a:	4f 92       	push	r4
    1e8c:	5f 92       	push	r5
    1e8e:	6f 92       	push	r6
    1e90:	7f 92       	push	r7
    1e92:	8f 92       	push	r8
    1e94:	9f 92       	push	r9
    1e96:	af 92       	push	r10
    1e98:	bf 92       	push	r11
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	ca 1b       	sub	r28, r26
    1eb0:	db 0b       	sbc	r29, r27
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	09 94       	ijmp

00001ebe <__epilogue_restores__>:
    1ebe:	2a 88       	ldd	r2, Y+18	; 0x12
    1ec0:	39 88       	ldd	r3, Y+17	; 0x11
    1ec2:	48 88       	ldd	r4, Y+16	; 0x10
    1ec4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ec6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ec8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eca:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ecc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ece:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ed0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ed2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ed4:	df 80       	ldd	r13, Y+7	; 0x07
    1ed6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ed8:	fd 80       	ldd	r15, Y+5	; 0x05
    1eda:	0c 81       	ldd	r16, Y+4	; 0x04
    1edc:	1b 81       	ldd	r17, Y+3	; 0x03
    1ede:	aa 81       	ldd	r26, Y+2	; 0x02
    1ee0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ee2:	ce 0f       	add	r28, r30
    1ee4:	d1 1d       	adc	r29, r1
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	ed 01       	movw	r28, r26
    1ef2:	08 95       	ret

00001ef4 <sprintf>:
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	2e 97       	sbiw	r28, 0x0e	; 14
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	0d 89       	ldd	r16, Y+21	; 0x15
    1f0e:	1e 89       	ldd	r17, Y+22	; 0x16
    1f10:	86 e0       	ldi	r24, 0x06	; 6
    1f12:	8c 83       	std	Y+4, r24	; 0x04
    1f14:	1a 83       	std	Y+2, r17	; 0x02
    1f16:	09 83       	std	Y+1, r16	; 0x01
    1f18:	8f ef       	ldi	r24, 0xFF	; 255
    1f1a:	9f e7       	ldi	r25, 0x7F	; 127
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
    1f20:	ae 01       	movw	r20, r28
    1f22:	47 5e       	subi	r20, 0xE7	; 231
    1f24:	5f 4f       	sbci	r21, 0xFF	; 255
    1f26:	ce 01       	movw	r24, r28
    1f28:	01 96       	adiw	r24, 0x01	; 1
    1f2a:	6f 89       	ldd	r22, Y+23	; 0x17
    1f2c:	78 8d       	ldd	r23, Y+24	; 0x18
    1f2e:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <vfprintf>
    1f32:	ef 81       	ldd	r30, Y+7	; 0x07
    1f34:	f8 85       	ldd	r31, Y+8	; 0x08
    1f36:	e0 0f       	add	r30, r16
    1f38:	f1 1f       	adc	r31, r17
    1f3a:	10 82       	st	Z, r1
    1f3c:	2e 96       	adiw	r28, 0x0e	; 14
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	08 95       	ret

00001f52 <vfprintf>:
    1f52:	2f 92       	push	r2
    1f54:	3f 92       	push	r3
    1f56:	4f 92       	push	r4
    1f58:	5f 92       	push	r5
    1f5a:	6f 92       	push	r6
    1f5c:	7f 92       	push	r7
    1f5e:	8f 92       	push	r8
    1f60:	9f 92       	push	r9
    1f62:	af 92       	push	r10
    1f64:	bf 92       	push	r11
    1f66:	cf 92       	push	r12
    1f68:	df 92       	push	r13
    1f6a:	ef 92       	push	r14
    1f6c:	ff 92       	push	r15
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	2d 97       	sbiw	r28, 0x0d	; 13
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	3c 01       	movw	r6, r24
    1f88:	7d 87       	std	Y+13, r23	; 0x0d
    1f8a:	6c 87       	std	Y+12, r22	; 0x0c
    1f8c:	5a 01       	movw	r10, r20
    1f8e:	fc 01       	movw	r30, r24
    1f90:	17 82       	std	Z+7, r1	; 0x07
    1f92:	16 82       	std	Z+6, r1	; 0x06
    1f94:	83 81       	ldd	r24, Z+3	; 0x03
    1f96:	81 ff       	sbrs	r24, 1
    1f98:	c8 c1       	rjmp	.+912    	; 0x232a <vfprintf+0x3d8>
    1f9a:	2e 01       	movw	r4, r28
    1f9c:	08 94       	sec
    1f9e:	41 1c       	adc	r4, r1
    1fa0:	51 1c       	adc	r5, r1
    1fa2:	f3 01       	movw	r30, r6
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fa8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1faa:	93 fd       	sbrc	r25, 3
    1fac:	85 91       	lpm	r24, Z+
    1fae:	93 ff       	sbrs	r25, 3
    1fb0:	81 91       	ld	r24, Z+
    1fb2:	fd 87       	std	Y+13, r31	; 0x0d
    1fb4:	ec 87       	std	Y+12, r30	; 0x0c
    1fb6:	88 23       	and	r24, r24
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <vfprintf+0x6a>
    1fba:	b3 c1       	rjmp	.+870    	; 0x2322 <vfprintf+0x3d0>
    1fbc:	85 32       	cpi	r24, 0x25	; 37
    1fbe:	41 f4       	brne	.+16     	; 0x1fd0 <vfprintf+0x7e>
    1fc0:	93 fd       	sbrc	r25, 3
    1fc2:	85 91       	lpm	r24, Z+
    1fc4:	93 ff       	sbrs	r25, 3
    1fc6:	81 91       	ld	r24, Z+
    1fc8:	fd 87       	std	Y+13, r31	; 0x0d
    1fca:	ec 87       	std	Y+12, r30	; 0x0c
    1fcc:	85 32       	cpi	r24, 0x25	; 37
    1fce:	29 f4       	brne	.+10     	; 0x1fda <vfprintf+0x88>
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	b3 01       	movw	r22, r6
    1fd4:	0e 94 c6 11 	call	0x238c	; 0x238c <fputc>
    1fd8:	e4 cf       	rjmp	.-56     	; 0x1fa2 <vfprintf+0x50>
    1fda:	ff 24       	eor	r15, r15
    1fdc:	ee 24       	eor	r14, r14
    1fde:	10 e0       	ldi	r17, 0x00	; 0
    1fe0:	10 32       	cpi	r17, 0x20	; 32
    1fe2:	b0 f4       	brcc	.+44     	; 0x2010 <vfprintf+0xbe>
    1fe4:	8b 32       	cpi	r24, 0x2B	; 43
    1fe6:	69 f0       	breq	.+26     	; 0x2002 <vfprintf+0xb0>
    1fe8:	8c 32       	cpi	r24, 0x2C	; 44
    1fea:	28 f4       	brcc	.+10     	; 0x1ff6 <vfprintf+0xa4>
    1fec:	80 32       	cpi	r24, 0x20	; 32
    1fee:	51 f0       	breq	.+20     	; 0x2004 <vfprintf+0xb2>
    1ff0:	83 32       	cpi	r24, 0x23	; 35
    1ff2:	71 f4       	brne	.+28     	; 0x2010 <vfprintf+0xbe>
    1ff4:	0b c0       	rjmp	.+22     	; 0x200c <vfprintf+0xba>
    1ff6:	8d 32       	cpi	r24, 0x2D	; 45
    1ff8:	39 f0       	breq	.+14     	; 0x2008 <vfprintf+0xb6>
    1ffa:	80 33       	cpi	r24, 0x30	; 48
    1ffc:	49 f4       	brne	.+18     	; 0x2010 <vfprintf+0xbe>
    1ffe:	11 60       	ori	r17, 0x01	; 1
    2000:	2c c0       	rjmp	.+88     	; 0x205a <vfprintf+0x108>
    2002:	12 60       	ori	r17, 0x02	; 2
    2004:	14 60       	ori	r17, 0x04	; 4
    2006:	29 c0       	rjmp	.+82     	; 0x205a <vfprintf+0x108>
    2008:	18 60       	ori	r17, 0x08	; 8
    200a:	27 c0       	rjmp	.+78     	; 0x205a <vfprintf+0x108>
    200c:	10 61       	ori	r17, 0x10	; 16
    200e:	25 c0       	rjmp	.+74     	; 0x205a <vfprintf+0x108>
    2010:	17 fd       	sbrc	r17, 7
    2012:	2e c0       	rjmp	.+92     	; 0x2070 <vfprintf+0x11e>
    2014:	28 2f       	mov	r18, r24
    2016:	20 53       	subi	r18, 0x30	; 48
    2018:	2a 30       	cpi	r18, 0x0A	; 10
    201a:	98 f4       	brcc	.+38     	; 0x2042 <vfprintf+0xf0>
    201c:	16 ff       	sbrs	r17, 6
    201e:	08 c0       	rjmp	.+16     	; 0x2030 <vfprintf+0xde>
    2020:	8f 2d       	mov	r24, r15
    2022:	88 0f       	add	r24, r24
    2024:	f8 2e       	mov	r15, r24
    2026:	ff 0c       	add	r15, r15
    2028:	ff 0c       	add	r15, r15
    202a:	f8 0e       	add	r15, r24
    202c:	f2 0e       	add	r15, r18
    202e:	15 c0       	rjmp	.+42     	; 0x205a <vfprintf+0x108>
    2030:	8e 2d       	mov	r24, r14
    2032:	88 0f       	add	r24, r24
    2034:	e8 2e       	mov	r14, r24
    2036:	ee 0c       	add	r14, r14
    2038:	ee 0c       	add	r14, r14
    203a:	e8 0e       	add	r14, r24
    203c:	e2 0e       	add	r14, r18
    203e:	10 62       	ori	r17, 0x20	; 32
    2040:	0c c0       	rjmp	.+24     	; 0x205a <vfprintf+0x108>
    2042:	8e 32       	cpi	r24, 0x2E	; 46
    2044:	21 f4       	brne	.+8      	; 0x204e <vfprintf+0xfc>
    2046:	16 fd       	sbrc	r17, 6
    2048:	6c c1       	rjmp	.+728    	; 0x2322 <vfprintf+0x3d0>
    204a:	10 64       	ori	r17, 0x40	; 64
    204c:	06 c0       	rjmp	.+12     	; 0x205a <vfprintf+0x108>
    204e:	8c 36       	cpi	r24, 0x6C	; 108
    2050:	11 f4       	brne	.+4      	; 0x2056 <vfprintf+0x104>
    2052:	10 68       	ori	r17, 0x80	; 128
    2054:	02 c0       	rjmp	.+4      	; 0x205a <vfprintf+0x108>
    2056:	88 36       	cpi	r24, 0x68	; 104
    2058:	59 f4       	brne	.+22     	; 0x2070 <vfprintf+0x11e>
    205a:	ec 85       	ldd	r30, Y+12	; 0x0c
    205c:	fd 85       	ldd	r31, Y+13	; 0x0d
    205e:	93 fd       	sbrc	r25, 3
    2060:	85 91       	lpm	r24, Z+
    2062:	93 ff       	sbrs	r25, 3
    2064:	81 91       	ld	r24, Z+
    2066:	fd 87       	std	Y+13, r31	; 0x0d
    2068:	ec 87       	std	Y+12, r30	; 0x0c
    206a:	88 23       	and	r24, r24
    206c:	09 f0       	breq	.+2      	; 0x2070 <vfprintf+0x11e>
    206e:	b8 cf       	rjmp	.-144    	; 0x1fe0 <vfprintf+0x8e>
    2070:	98 2f       	mov	r25, r24
    2072:	95 54       	subi	r25, 0x45	; 69
    2074:	93 30       	cpi	r25, 0x03	; 3
    2076:	18 f0       	brcs	.+6      	; 0x207e <vfprintf+0x12c>
    2078:	90 52       	subi	r25, 0x20	; 32
    207a:	93 30       	cpi	r25, 0x03	; 3
    207c:	38 f4       	brcc	.+14     	; 0x208c <vfprintf+0x13a>
    207e:	24 e0       	ldi	r18, 0x04	; 4
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	a2 0e       	add	r10, r18
    2084:	b3 1e       	adc	r11, r19
    2086:	3f e3       	ldi	r19, 0x3F	; 63
    2088:	39 83       	std	Y+1, r19	; 0x01
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <vfprintf+0x158>
    208c:	83 36       	cpi	r24, 0x63	; 99
    208e:	31 f0       	breq	.+12     	; 0x209c <vfprintf+0x14a>
    2090:	83 37       	cpi	r24, 0x73	; 115
    2092:	81 f0       	breq	.+32     	; 0x20b4 <vfprintf+0x162>
    2094:	83 35       	cpi	r24, 0x53	; 83
    2096:	09 f0       	breq	.+2      	; 0x209a <vfprintf+0x148>
    2098:	5a c0       	rjmp	.+180    	; 0x214e <vfprintf+0x1fc>
    209a:	22 c0       	rjmp	.+68     	; 0x20e0 <vfprintf+0x18e>
    209c:	f5 01       	movw	r30, r10
    209e:	80 81       	ld	r24, Z
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	22 e0       	ldi	r18, 0x02	; 2
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	a2 0e       	add	r10, r18
    20a8:	b3 1e       	adc	r11, r19
    20aa:	21 e0       	ldi	r18, 0x01	; 1
    20ac:	c2 2e       	mov	r12, r18
    20ae:	d1 2c       	mov	r13, r1
    20b0:	42 01       	movw	r8, r4
    20b2:	14 c0       	rjmp	.+40     	; 0x20dc <vfprintf+0x18a>
    20b4:	92 e0       	ldi	r25, 0x02	; 2
    20b6:	29 2e       	mov	r2, r25
    20b8:	31 2c       	mov	r3, r1
    20ba:	2a 0c       	add	r2, r10
    20bc:	3b 1c       	adc	r3, r11
    20be:	f5 01       	movw	r30, r10
    20c0:	80 80       	ld	r8, Z
    20c2:	91 80       	ldd	r9, Z+1	; 0x01
    20c4:	16 ff       	sbrs	r17, 6
    20c6:	03 c0       	rjmp	.+6      	; 0x20ce <vfprintf+0x17c>
    20c8:	6f 2d       	mov	r22, r15
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <vfprintf+0x180>
    20ce:	6f ef       	ldi	r22, 0xFF	; 255
    20d0:	7f ef       	ldi	r23, 0xFF	; 255
    20d2:	c4 01       	movw	r24, r8
    20d4:	0e 94 bb 11 	call	0x2376	; 0x2376 <strnlen>
    20d8:	6c 01       	movw	r12, r24
    20da:	51 01       	movw	r10, r2
    20dc:	1f 77       	andi	r17, 0x7F	; 127
    20de:	15 c0       	rjmp	.+42     	; 0x210a <vfprintf+0x1b8>
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	28 2e       	mov	r2, r24
    20e4:	31 2c       	mov	r3, r1
    20e6:	2a 0c       	add	r2, r10
    20e8:	3b 1c       	adc	r3, r11
    20ea:	f5 01       	movw	r30, r10
    20ec:	80 80       	ld	r8, Z
    20ee:	91 80       	ldd	r9, Z+1	; 0x01
    20f0:	16 ff       	sbrs	r17, 6
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <vfprintf+0x1a8>
    20f4:	6f 2d       	mov	r22, r15
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <vfprintf+0x1ac>
    20fa:	6f ef       	ldi	r22, 0xFF	; 255
    20fc:	7f ef       	ldi	r23, 0xFF	; 255
    20fe:	c4 01       	movw	r24, r8
    2100:	0e 94 b0 11 	call	0x2360	; 0x2360 <strnlen_P>
    2104:	6c 01       	movw	r12, r24
    2106:	10 68       	ori	r17, 0x80	; 128
    2108:	51 01       	movw	r10, r2
    210a:	13 fd       	sbrc	r17, 3
    210c:	1c c0       	rjmp	.+56     	; 0x2146 <vfprintf+0x1f4>
    210e:	06 c0       	rjmp	.+12     	; 0x211c <vfprintf+0x1ca>
    2110:	80 e2       	ldi	r24, 0x20	; 32
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	b3 01       	movw	r22, r6
    2116:	0e 94 c6 11 	call	0x238c	; 0x238c <fputc>
    211a:	ea 94       	dec	r14
    211c:	8e 2d       	mov	r24, r14
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	c8 16       	cp	r12, r24
    2122:	d9 06       	cpc	r13, r25
    2124:	a8 f3       	brcs	.-22     	; 0x2110 <vfprintf+0x1be>
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <vfprintf+0x1f4>
    2128:	f4 01       	movw	r30, r8
    212a:	17 fd       	sbrc	r17, 7
    212c:	85 91       	lpm	r24, Z+
    212e:	17 ff       	sbrs	r17, 7
    2130:	81 91       	ld	r24, Z+
    2132:	4f 01       	movw	r8, r30
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	b3 01       	movw	r22, r6
    2138:	0e 94 c6 11 	call	0x238c	; 0x238c <fputc>
    213c:	e1 10       	cpse	r14, r1
    213e:	ea 94       	dec	r14
    2140:	08 94       	sec
    2142:	c1 08       	sbc	r12, r1
    2144:	d1 08       	sbc	r13, r1
    2146:	c1 14       	cp	r12, r1
    2148:	d1 04       	cpc	r13, r1
    214a:	71 f7       	brne	.-36     	; 0x2128 <vfprintf+0x1d6>
    214c:	e7 c0       	rjmp	.+462    	; 0x231c <vfprintf+0x3ca>
    214e:	84 36       	cpi	r24, 0x64	; 100
    2150:	11 f0       	breq	.+4      	; 0x2156 <vfprintf+0x204>
    2152:	89 36       	cpi	r24, 0x69	; 105
    2154:	51 f5       	brne	.+84     	; 0x21aa <vfprintf+0x258>
    2156:	f5 01       	movw	r30, r10
    2158:	17 ff       	sbrs	r17, 7
    215a:	07 c0       	rjmp	.+14     	; 0x216a <vfprintf+0x218>
    215c:	80 81       	ld	r24, Z
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	a2 81       	ldd	r26, Z+2	; 0x02
    2162:	b3 81       	ldd	r27, Z+3	; 0x03
    2164:	24 e0       	ldi	r18, 0x04	; 4
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	08 c0       	rjmp	.+16     	; 0x217a <vfprintf+0x228>
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	aa 27       	eor	r26, r26
    2170:	97 fd       	sbrc	r25, 7
    2172:	a0 95       	com	r26
    2174:	ba 2f       	mov	r27, r26
    2176:	22 e0       	ldi	r18, 0x02	; 2
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	a2 0e       	add	r10, r18
    217c:	b3 1e       	adc	r11, r19
    217e:	01 2f       	mov	r16, r17
    2180:	0f 76       	andi	r16, 0x6F	; 111
    2182:	b7 ff       	sbrs	r27, 7
    2184:	08 c0       	rjmp	.+16     	; 0x2196 <vfprintf+0x244>
    2186:	b0 95       	com	r27
    2188:	a0 95       	com	r26
    218a:	90 95       	com	r25
    218c:	81 95       	neg	r24
    218e:	9f 4f       	sbci	r25, 0xFF	; 255
    2190:	af 4f       	sbci	r26, 0xFF	; 255
    2192:	bf 4f       	sbci	r27, 0xFF	; 255
    2194:	00 68       	ori	r16, 0x80	; 128
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	a2 01       	movw	r20, r4
    219c:	2a e0       	ldi	r18, 0x0A	; 10
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__ultoa_invert>
    21a4:	d8 2e       	mov	r13, r24
    21a6:	d4 18       	sub	r13, r4
    21a8:	3f c0       	rjmp	.+126    	; 0x2228 <vfprintf+0x2d6>
    21aa:	85 37       	cpi	r24, 0x75	; 117
    21ac:	21 f4       	brne	.+8      	; 0x21b6 <vfprintf+0x264>
    21ae:	1f 7e       	andi	r17, 0xEF	; 239
    21b0:	2a e0       	ldi	r18, 0x0A	; 10
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	20 c0       	rjmp	.+64     	; 0x21f6 <vfprintf+0x2a4>
    21b6:	19 7f       	andi	r17, 0xF9	; 249
    21b8:	8f 36       	cpi	r24, 0x6F	; 111
    21ba:	a9 f0       	breq	.+42     	; 0x21e6 <vfprintf+0x294>
    21bc:	80 37       	cpi	r24, 0x70	; 112
    21be:	20 f4       	brcc	.+8      	; 0x21c8 <vfprintf+0x276>
    21c0:	88 35       	cpi	r24, 0x58	; 88
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <vfprintf+0x274>
    21c4:	ae c0       	rjmp	.+348    	; 0x2322 <vfprintf+0x3d0>
    21c6:	0b c0       	rjmp	.+22     	; 0x21de <vfprintf+0x28c>
    21c8:	80 37       	cpi	r24, 0x70	; 112
    21ca:	21 f0       	breq	.+8      	; 0x21d4 <vfprintf+0x282>
    21cc:	88 37       	cpi	r24, 0x78	; 120
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <vfprintf+0x280>
    21d0:	a8 c0       	rjmp	.+336    	; 0x2322 <vfprintf+0x3d0>
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <vfprintf+0x284>
    21d4:	10 61       	ori	r17, 0x10	; 16
    21d6:	14 ff       	sbrs	r17, 4
    21d8:	09 c0       	rjmp	.+18     	; 0x21ec <vfprintf+0x29a>
    21da:	14 60       	ori	r17, 0x04	; 4
    21dc:	07 c0       	rjmp	.+14     	; 0x21ec <vfprintf+0x29a>
    21de:	14 ff       	sbrs	r17, 4
    21e0:	08 c0       	rjmp	.+16     	; 0x21f2 <vfprintf+0x2a0>
    21e2:	16 60       	ori	r17, 0x06	; 6
    21e4:	06 c0       	rjmp	.+12     	; 0x21f2 <vfprintf+0x2a0>
    21e6:	28 e0       	ldi	r18, 0x08	; 8
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	05 c0       	rjmp	.+10     	; 0x21f6 <vfprintf+0x2a4>
    21ec:	20 e1       	ldi	r18, 0x10	; 16
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <vfprintf+0x2a4>
    21f2:	20 e1       	ldi	r18, 0x10	; 16
    21f4:	32 e0       	ldi	r19, 0x02	; 2
    21f6:	f5 01       	movw	r30, r10
    21f8:	17 ff       	sbrs	r17, 7
    21fa:	07 c0       	rjmp	.+14     	; 0x220a <vfprintf+0x2b8>
    21fc:	60 81       	ld	r22, Z
    21fe:	71 81       	ldd	r23, Z+1	; 0x01
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	93 81       	ldd	r25, Z+3	; 0x03
    2204:	44 e0       	ldi	r20, 0x04	; 4
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	06 c0       	rjmp	.+12     	; 0x2216 <vfprintf+0x2c4>
    220a:	60 81       	ld	r22, Z
    220c:	71 81       	ldd	r23, Z+1	; 0x01
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	42 e0       	ldi	r20, 0x02	; 2
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	a4 0e       	add	r10, r20
    2218:	b5 1e       	adc	r11, r21
    221a:	a2 01       	movw	r20, r4
    221c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__ultoa_invert>
    2220:	d8 2e       	mov	r13, r24
    2222:	d4 18       	sub	r13, r4
    2224:	01 2f       	mov	r16, r17
    2226:	0f 77       	andi	r16, 0x7F	; 127
    2228:	06 ff       	sbrs	r16, 6
    222a:	09 c0       	rjmp	.+18     	; 0x223e <vfprintf+0x2ec>
    222c:	0e 7f       	andi	r16, 0xFE	; 254
    222e:	df 14       	cp	r13, r15
    2230:	30 f4       	brcc	.+12     	; 0x223e <vfprintf+0x2ec>
    2232:	04 ff       	sbrs	r16, 4
    2234:	06 c0       	rjmp	.+12     	; 0x2242 <vfprintf+0x2f0>
    2236:	02 fd       	sbrc	r16, 2
    2238:	04 c0       	rjmp	.+8      	; 0x2242 <vfprintf+0x2f0>
    223a:	0f 7e       	andi	r16, 0xEF	; 239
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <vfprintf+0x2f0>
    223e:	1d 2d       	mov	r17, r13
    2240:	01 c0       	rjmp	.+2      	; 0x2244 <vfprintf+0x2f2>
    2242:	1f 2d       	mov	r17, r15
    2244:	80 2f       	mov	r24, r16
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	04 ff       	sbrs	r16, 4
    224a:	0c c0       	rjmp	.+24     	; 0x2264 <vfprintf+0x312>
    224c:	fe 01       	movw	r30, r28
    224e:	ed 0d       	add	r30, r13
    2250:	f1 1d       	adc	r31, r1
    2252:	20 81       	ld	r18, Z
    2254:	20 33       	cpi	r18, 0x30	; 48
    2256:	11 f4       	brne	.+4      	; 0x225c <vfprintf+0x30a>
    2258:	09 7e       	andi	r16, 0xE9	; 233
    225a:	09 c0       	rjmp	.+18     	; 0x226e <vfprintf+0x31c>
    225c:	02 ff       	sbrs	r16, 2
    225e:	06 c0       	rjmp	.+12     	; 0x226c <vfprintf+0x31a>
    2260:	1e 5f       	subi	r17, 0xFE	; 254
    2262:	05 c0       	rjmp	.+10     	; 0x226e <vfprintf+0x31c>
    2264:	86 78       	andi	r24, 0x86	; 134
    2266:	90 70       	andi	r25, 0x00	; 0
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	09 f0       	breq	.+2      	; 0x226e <vfprintf+0x31c>
    226c:	1f 5f       	subi	r17, 0xFF	; 255
    226e:	80 2e       	mov	r8, r16
    2270:	99 24       	eor	r9, r9
    2272:	03 fd       	sbrc	r16, 3
    2274:	12 c0       	rjmp	.+36     	; 0x229a <vfprintf+0x348>
    2276:	00 ff       	sbrs	r16, 0
    2278:	0d c0       	rjmp	.+26     	; 0x2294 <vfprintf+0x342>
    227a:	fd 2c       	mov	r15, r13
    227c:	1e 15       	cp	r17, r14
    227e:	50 f4       	brcc	.+20     	; 0x2294 <vfprintf+0x342>
    2280:	fe 0c       	add	r15, r14
    2282:	f1 1a       	sub	r15, r17
    2284:	1e 2d       	mov	r17, r14
    2286:	06 c0       	rjmp	.+12     	; 0x2294 <vfprintf+0x342>
    2288:	80 e2       	ldi	r24, 0x20	; 32
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	b3 01       	movw	r22, r6
    228e:	0e 94 c6 11 	call	0x238c	; 0x238c <fputc>
    2292:	1f 5f       	subi	r17, 0xFF	; 255
    2294:	1e 15       	cp	r17, r14
    2296:	c0 f3       	brcs	.-16     	; 0x2288 <vfprintf+0x336>
    2298:	04 c0       	rjmp	.+8      	; 0x22a2 <vfprintf+0x350>
    229a:	1e 15       	cp	r17, r14
    229c:	10 f4       	brcc	.+4      	; 0x22a2 <vfprintf+0x350>
    229e:	e1 1a       	sub	r14, r17
    22a0:	01 c0       	rjmp	.+2      	; 0x22a4 <vfprintf+0x352>
    22a2:	ee 24       	eor	r14, r14
    22a4:	84 fe       	sbrs	r8, 4
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <vfprintf+0x374>
    22a8:	80 e3       	ldi	r24, 0x30	; 48
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	b3 01       	movw	r22, r6
    22ae:	0e 94 c6 11 	call	0x238c	; 0x238c <fputc>
    22b2:	82 fe       	sbrs	r8, 2
    22b4:	1f c0       	rjmp	.+62     	; 0x22f4 <vfprintf+0x3a2>
    22b6:	81 fe       	sbrs	r8, 1
    22b8:	03 c0       	rjmp	.+6      	; 0x22c0 <vfprintf+0x36e>
    22ba:	88 e5       	ldi	r24, 0x58	; 88
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	10 c0       	rjmp	.+32     	; 0x22e0 <vfprintf+0x38e>
    22c0:	88 e7       	ldi	r24, 0x78	; 120
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0d c0       	rjmp	.+26     	; 0x22e0 <vfprintf+0x38e>
    22c6:	c4 01       	movw	r24, r8
    22c8:	86 78       	andi	r24, 0x86	; 134
    22ca:	90 70       	andi	r25, 0x00	; 0
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	91 f0       	breq	.+36     	; 0x22f4 <vfprintf+0x3a2>
    22d0:	81 fc       	sbrc	r8, 1
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <vfprintf+0x386>
    22d4:	80 e2       	ldi	r24, 0x20	; 32
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <vfprintf+0x388>
    22d8:	8b e2       	ldi	r24, 0x2B	; 43
    22da:	07 fd       	sbrc	r16, 7
    22dc:	8d e2       	ldi	r24, 0x2D	; 45
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	b3 01       	movw	r22, r6
    22e2:	0e 94 c6 11 	call	0x238c	; 0x238c <fputc>
    22e6:	06 c0       	rjmp	.+12     	; 0x22f4 <vfprintf+0x3a2>
    22e8:	80 e3       	ldi	r24, 0x30	; 48
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	b3 01       	movw	r22, r6
    22ee:	0e 94 c6 11 	call	0x238c	; 0x238c <fputc>
    22f2:	fa 94       	dec	r15
    22f4:	df 14       	cp	r13, r15
    22f6:	c0 f3       	brcs	.-16     	; 0x22e8 <vfprintf+0x396>
    22f8:	da 94       	dec	r13
    22fa:	f2 01       	movw	r30, r4
    22fc:	ed 0d       	add	r30, r13
    22fe:	f1 1d       	adc	r31, r1
    2300:	80 81       	ld	r24, Z
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	b3 01       	movw	r22, r6
    2306:	0e 94 c6 11 	call	0x238c	; 0x238c <fputc>
    230a:	dd 20       	and	r13, r13
    230c:	a9 f7       	brne	.-22     	; 0x22f8 <vfprintf+0x3a6>
    230e:	06 c0       	rjmp	.+12     	; 0x231c <vfprintf+0x3ca>
    2310:	80 e2       	ldi	r24, 0x20	; 32
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	b3 01       	movw	r22, r6
    2316:	0e 94 c6 11 	call	0x238c	; 0x238c <fputc>
    231a:	ea 94       	dec	r14
    231c:	ee 20       	and	r14, r14
    231e:	c1 f7       	brne	.-16     	; 0x2310 <vfprintf+0x3be>
    2320:	40 ce       	rjmp	.-896    	; 0x1fa2 <vfprintf+0x50>
    2322:	f3 01       	movw	r30, r6
    2324:	86 81       	ldd	r24, Z+6	; 0x06
    2326:	97 81       	ldd	r25, Z+7	; 0x07
    2328:	02 c0       	rjmp	.+4      	; 0x232e <vfprintf+0x3dc>
    232a:	8f ef       	ldi	r24, 0xFF	; 255
    232c:	9f ef       	ldi	r25, 0xFF	; 255
    232e:	2d 96       	adiw	r28, 0x0d	; 13
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	ff 90       	pop	r15
    2344:	ef 90       	pop	r14
    2346:	df 90       	pop	r13
    2348:	cf 90       	pop	r12
    234a:	bf 90       	pop	r11
    234c:	af 90       	pop	r10
    234e:	9f 90       	pop	r9
    2350:	8f 90       	pop	r8
    2352:	7f 90       	pop	r7
    2354:	6f 90       	pop	r6
    2356:	5f 90       	pop	r5
    2358:	4f 90       	pop	r4
    235a:	3f 90       	pop	r3
    235c:	2f 90       	pop	r2
    235e:	08 95       	ret

00002360 <strnlen_P>:
    2360:	fc 01       	movw	r30, r24
    2362:	05 90       	lpm	r0, Z+
    2364:	61 50       	subi	r22, 0x01	; 1
    2366:	70 40       	sbci	r23, 0x00	; 0
    2368:	01 10       	cpse	r0, r1
    236a:	d8 f7       	brcc	.-10     	; 0x2362 <strnlen_P+0x2>
    236c:	80 95       	com	r24
    236e:	90 95       	com	r25
    2370:	8e 0f       	add	r24, r30
    2372:	9f 1f       	adc	r25, r31
    2374:	08 95       	ret

00002376 <strnlen>:
    2376:	fc 01       	movw	r30, r24
    2378:	61 50       	subi	r22, 0x01	; 1
    237a:	70 40       	sbci	r23, 0x00	; 0
    237c:	01 90       	ld	r0, Z+
    237e:	01 10       	cpse	r0, r1
    2380:	d8 f7       	brcc	.-10     	; 0x2378 <strnlen+0x2>
    2382:	80 95       	com	r24
    2384:	90 95       	com	r25
    2386:	8e 0f       	add	r24, r30
    2388:	9f 1f       	adc	r25, r31
    238a:	08 95       	ret

0000238c <fputc>:
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	8c 01       	movw	r16, r24
    2396:	eb 01       	movw	r28, r22
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	81 ff       	sbrs	r24, 1
    239c:	1b c0       	rjmp	.+54     	; 0x23d4 <fputc+0x48>
    239e:	82 ff       	sbrs	r24, 2
    23a0:	0d c0       	rjmp	.+26     	; 0x23bc <fputc+0x30>
    23a2:	2e 81       	ldd	r18, Y+6	; 0x06
    23a4:	3f 81       	ldd	r19, Y+7	; 0x07
    23a6:	8c 81       	ldd	r24, Y+4	; 0x04
    23a8:	9d 81       	ldd	r25, Y+5	; 0x05
    23aa:	28 17       	cp	r18, r24
    23ac:	39 07       	cpc	r19, r25
    23ae:	64 f4       	brge	.+24     	; 0x23c8 <fputc+0x3c>
    23b0:	e8 81       	ld	r30, Y
    23b2:	f9 81       	ldd	r31, Y+1	; 0x01
    23b4:	01 93       	st	Z+, r16
    23b6:	f9 83       	std	Y+1, r31	; 0x01
    23b8:	e8 83       	st	Y, r30
    23ba:	06 c0       	rjmp	.+12     	; 0x23c8 <fputc+0x3c>
    23bc:	e8 85       	ldd	r30, Y+8	; 0x08
    23be:	f9 85       	ldd	r31, Y+9	; 0x09
    23c0:	80 2f       	mov	r24, r16
    23c2:	09 95       	icall
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	31 f4       	brne	.+12     	; 0x23d4 <fputc+0x48>
    23c8:	8e 81       	ldd	r24, Y+6	; 0x06
    23ca:	9f 81       	ldd	r25, Y+7	; 0x07
    23cc:	01 96       	adiw	r24, 0x01	; 1
    23ce:	9f 83       	std	Y+7, r25	; 0x07
    23d0:	8e 83       	std	Y+6, r24	; 0x06
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <fputc+0x4c>
    23d4:	0f ef       	ldi	r16, 0xFF	; 255
    23d6:	1f ef       	ldi	r17, 0xFF	; 255
    23d8:	c8 01       	movw	r24, r16
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	1f 91       	pop	r17
    23e0:	0f 91       	pop	r16
    23e2:	08 95       	ret

000023e4 <__ultoa_invert>:
    23e4:	fa 01       	movw	r30, r20
    23e6:	aa 27       	eor	r26, r26
    23e8:	28 30       	cpi	r18, 0x08	; 8
    23ea:	51 f1       	breq	.+84     	; 0x2440 <__ultoa_invert+0x5c>
    23ec:	20 31       	cpi	r18, 0x10	; 16
    23ee:	81 f1       	breq	.+96     	; 0x2450 <__ultoa_invert+0x6c>
    23f0:	e8 94       	clt
    23f2:	6f 93       	push	r22
    23f4:	6e 7f       	andi	r22, 0xFE	; 254
    23f6:	6e 5f       	subi	r22, 0xFE	; 254
    23f8:	7f 4f       	sbci	r23, 0xFF	; 255
    23fa:	8f 4f       	sbci	r24, 0xFF	; 255
    23fc:	9f 4f       	sbci	r25, 0xFF	; 255
    23fe:	af 4f       	sbci	r26, 0xFF	; 255
    2400:	b1 e0       	ldi	r27, 0x01	; 1
    2402:	3e d0       	rcall	.+124    	; 0x2480 <__ultoa_invert+0x9c>
    2404:	b4 e0       	ldi	r27, 0x04	; 4
    2406:	3c d0       	rcall	.+120    	; 0x2480 <__ultoa_invert+0x9c>
    2408:	67 0f       	add	r22, r23
    240a:	78 1f       	adc	r23, r24
    240c:	89 1f       	adc	r24, r25
    240e:	9a 1f       	adc	r25, r26
    2410:	a1 1d       	adc	r26, r1
    2412:	68 0f       	add	r22, r24
    2414:	79 1f       	adc	r23, r25
    2416:	8a 1f       	adc	r24, r26
    2418:	91 1d       	adc	r25, r1
    241a:	a1 1d       	adc	r26, r1
    241c:	6a 0f       	add	r22, r26
    241e:	71 1d       	adc	r23, r1
    2420:	81 1d       	adc	r24, r1
    2422:	91 1d       	adc	r25, r1
    2424:	a1 1d       	adc	r26, r1
    2426:	20 d0       	rcall	.+64     	; 0x2468 <__ultoa_invert+0x84>
    2428:	09 f4       	brne	.+2      	; 0x242c <__ultoa_invert+0x48>
    242a:	68 94       	set
    242c:	3f 91       	pop	r19
    242e:	2a e0       	ldi	r18, 0x0A	; 10
    2430:	26 9f       	mul	r18, r22
    2432:	11 24       	eor	r1, r1
    2434:	30 19       	sub	r19, r0
    2436:	30 5d       	subi	r19, 0xD0	; 208
    2438:	31 93       	st	Z+, r19
    243a:	de f6       	brtc	.-74     	; 0x23f2 <__ultoa_invert+0xe>
    243c:	cf 01       	movw	r24, r30
    243e:	08 95       	ret
    2440:	46 2f       	mov	r20, r22
    2442:	47 70       	andi	r20, 0x07	; 7
    2444:	40 5d       	subi	r20, 0xD0	; 208
    2446:	41 93       	st	Z+, r20
    2448:	b3 e0       	ldi	r27, 0x03	; 3
    244a:	0f d0       	rcall	.+30     	; 0x246a <__ultoa_invert+0x86>
    244c:	c9 f7       	brne	.-14     	; 0x2440 <__ultoa_invert+0x5c>
    244e:	f6 cf       	rjmp	.-20     	; 0x243c <__ultoa_invert+0x58>
    2450:	46 2f       	mov	r20, r22
    2452:	4f 70       	andi	r20, 0x0F	; 15
    2454:	40 5d       	subi	r20, 0xD0	; 208
    2456:	4a 33       	cpi	r20, 0x3A	; 58
    2458:	18 f0       	brcs	.+6      	; 0x2460 <__ultoa_invert+0x7c>
    245a:	49 5d       	subi	r20, 0xD9	; 217
    245c:	31 fd       	sbrc	r19, 1
    245e:	40 52       	subi	r20, 0x20	; 32
    2460:	41 93       	st	Z+, r20
    2462:	02 d0       	rcall	.+4      	; 0x2468 <__ultoa_invert+0x84>
    2464:	a9 f7       	brne	.-22     	; 0x2450 <__ultoa_invert+0x6c>
    2466:	ea cf       	rjmp	.-44     	; 0x243c <__ultoa_invert+0x58>
    2468:	b4 e0       	ldi	r27, 0x04	; 4
    246a:	a6 95       	lsr	r26
    246c:	97 95       	ror	r25
    246e:	87 95       	ror	r24
    2470:	77 95       	ror	r23
    2472:	67 95       	ror	r22
    2474:	ba 95       	dec	r27
    2476:	c9 f7       	brne	.-14     	; 0x246a <__ultoa_invert+0x86>
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	61 05       	cpc	r22, r1
    247c:	71 05       	cpc	r23, r1
    247e:	08 95       	ret
    2480:	9b 01       	movw	r18, r22
    2482:	ac 01       	movw	r20, r24
    2484:	0a 2e       	mov	r0, r26
    2486:	06 94       	lsr	r0
    2488:	57 95       	ror	r21
    248a:	47 95       	ror	r20
    248c:	37 95       	ror	r19
    248e:	27 95       	ror	r18
    2490:	ba 95       	dec	r27
    2492:	c9 f7       	brne	.-14     	; 0x2486 <__ultoa_invert+0xa2>
    2494:	62 0f       	add	r22, r18
    2496:	73 1f       	adc	r23, r19
    2498:	84 1f       	adc	r24, r20
    249a:	95 1f       	adc	r25, r21
    249c:	a0 1d       	adc	r26, r0
    249e:	08 95       	ret

000024a0 <_exit>:
    24a0:	f8 94       	cli

000024a2 <__stop_program>:
    24a2:	ff cf       	rjmp	.-2      	; 0x24a2 <__stop_program>
